[{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\AdvancedFinancialAnalytics.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'i18n.language'. Either exclude it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [data, getMockFinancialData]","fix":{"range":[3043,3086],"text":"[data, getMockFinancialData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Line, Doughnut } from 'react-chartjs-2';\nimport {\n  ArrowTrendingUpIcon,\n  ChartBarIcon,\n  CalendarIcon,\n  ArrowDownTrayIcon,\n  BanknotesIcon,\n  ReceiptRefundIcon,\n  ChartPieIcon,\n} from '@heroicons/react/24/outline';\nimport EnhancedKPICard from '@components/analytics/EnhancedKPICard';\nimport InteractiveFinancialCharts from '@components/analytics/InteractiveFinancialCharts';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\nconst AdvancedFinancialAnalytics = ({ data }) => {\n  const { t, i18n } = useTranslation('analytics');\n  const [period, setPeriod] = useState('month');\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat(i18n.language, {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount || 0);\n  };\n\n  const formatPercentage = value => {\n    const numValue = value || 0;\n    return `${numValue > 0 ? '+' : ''}${numValue.toFixed(1)}%`;\n  };\n\n  const getMockFinancialData = () => {\n    const months = t('charts.months', { returnObjects: true });\n    return {\n      totalRevenue: 125000,\n      totalExpenses: 87500,\n      netProfit: 37500,\n      profitMargin: 30.0,\n      revenueGrowth: 12.5,\n      expenseGrowth: 8.3,\n      cashFlow: [\n        { month: months.jan, income: 18000, expense: 12000, net: 6000 },\n        { month: months.feb, income: 22000, expense: 14000, net: 8000 },\n        { month: months.mar, income: 25000, expense: 15000, net: 10000 },\n        { month: months.apr, income: 20000, expense: 13000, net: 7000 },\n        { month: months.may, income: 28000, expense: 16000, net: 12000 },\n        { month: months.jun, income: 32000, expense: 17500, net: 14500 },\n      ],\n      categoryDistribution: [\n        { category: t('charts.revenueBreakdown.consulting'), amount: 45000, percentage: 36 },\n        { category: t('charts.revenueBreakdown.products'), amount: 35000, percentage: 28 },\n        { category: t('charts.revenueBreakdown.services'), amount: 25000, percentage: 20 },\n        { category: 'Support', amount: 20000, percentage: 16 },\n      ],\n      expenseCategories: [\n        { category: 'Salaries', amount: 35000, percentage: 40 },\n        { category: 'Marketing', amount: 17500, percentage: 20 },\n        { category: 'Operations', amount: 15000, percentage: 17 },\n        { category: 'Technology', amount: 10000, percentage: 11 },\n        { category: 'Other', amount: 10000, percentage: 12 },\n      ],\n    };\n  };\n\n  const financialData = useMemo(() => {\n    const mockData = getMockFinancialData();\n    return data?.success && data?.data ? { ...mockData, ...data.data } : mockData;\n  }, [data, i18n.language, getMockFinancialData]);\n\n  const CashFlowChart = () => {\n    const chartData = {\n      labels: financialData.cashFlow?.map(item => item.month),\n      datasets: [\n        {\n          label: t('advanced.income'),\n          data: financialData.cashFlow?.map(item => item.income),\n          borderColor: 'rgb(34, 197, 94)',\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\n          fill: false,\n          tension: 0.4,\n        },\n        {\n          label: t('advanced.expenses'),\n          data: financialData.cashFlow?.map(item => item.expense),\n          borderColor: 'rgb(239, 68, 68)',\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\n          fill: false,\n          tension: 0.4,\n        },\n        {\n          label: t('advanced.netCashFlow'),\n          data: financialData.cashFlow?.map(item => item.net),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          fill: true,\n          tension: 0.4,\n        },\n      ],\n    };\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: { position: 'top' },\n        title: { display: true, text: t('advanced.cashFlowTrend') },\n        tooltip: {\n          callbacks: {\n            label: context => `${context.dataset.label}: ${formatCurrency(context.parsed.y)}`,\n          },\n        },\n      },\n      scales: { y: { beginAtZero: true, ticks: { callback: value => formatCurrency(value) } } },\n    };\n    return <Line data={chartData} options={options} />;\n  };\n\n  const CategoryDistributionChart = ({ type = 'income' }) => {\n    const categoryData =\n      type === 'income' ? financialData.categoryDistribution : financialData.expenseCategories;\n    if (!categoryData || !Array.isArray(categoryData) || categoryData.length === 0) {\n      return (\n        <div className='flex items-center justify-center h-full'>\n          <div className='text-center'>\n            <ChartPieIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n            <h3 className='text-lg font-semibold text-gray-900 mb-2'>\n              {t('advanced.noDataAvailable')}\n            </h3>\n            <p className='text-gray-600'>{t('advanced.noDataForDistribution', { type })}</p>\n          </div>\n        </div>\n      );\n    }\n    const chartData = {\n      labels: categoryData.map(cat => cat.category || t('advanced.unknownCategory')),\n      datasets: [\n        {\n          data: categoryData.map(cat => cat.amount || 0),\n          backgroundColor: [\n            'rgba(59, 130, 246, 0.8)',\n            'rgba(34, 197, 94, 0.8)',\n            'rgba(251, 191, 36, 0.8)',\n            'rgba(239, 68, 68, 0.8)',\n            'rgba(139, 92, 246, 0.8)',\n          ],\n          borderColor: [\n            'rgba(59, 130, 246, 1)',\n            'rgba(34, 197, 94, 1)',\n            'rgba(251, 191, 36, 1)',\n            'rgba(239, 68, 68, 1)',\n            'rgba(139, 92, 246, 1)',\n          ],\n          borderWidth: 2,\n        },\n      ],\n    };\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: { position: 'bottom', labels: { usePointStyle: true, boxWidth: 10 } },\n        title: {\n          display: true,\n          text:\n            type === 'income'\n              ? t('advanced.incomeDistribution')\n              : t('advanced.expenseDistribution'),\n        },\n        tooltip: {\n          callbacks: { label: context => `${context.label}: ${formatCurrency(context.parsed)}` },\n        },\n      },\n    };\n    return <Doughnut data={chartData} options={options} />;\n  };\n\n  const kpiCards = [\n    {\n      title: t('advanced.totalRevenue'),\n      value: formatCurrency(financialData.totalRevenue),\n      icon: BanknotesIcon,\n      color: 'green',\n      trend: formatPercentage(financialData.revenueGrowth),\n      positive: financialData.revenueGrowth > 0,\n    },\n    {\n      title: t('advanced.totalExpenses'),\n      value: formatCurrency(financialData.totalExpenses),\n      icon: ReceiptRefundIcon,\n      color: 'red',\n      trend: formatPercentage(financialData.expenseGrowth),\n      positive: financialData.expenseGrowth < 0,\n    },\n    {\n      title: t('advanced.netProfit'),\n      value: formatCurrency(financialData.netProfit),\n      icon: ChartBarIcon,\n      color: 'blue',\n      trend: formatPercentage(financialData.revenueGrowth - financialData.expenseGrowth),\n      positive: financialData.revenueGrowth - financialData.expenseGrowth > 0,\n    },\n    {\n      title: t('advanced.profitMargin'),\n      value: `${financialData.profitMargin?.toFixed(1)}%`,\n      icon: ArrowTrendingUpIcon,\n      color: 'indigo',\n      trend: `+1.2%`,\n      positive: true,\n    },\n  ];\n\n  const tabs = [\n    {\n      id: 'overview',\n      name: t('tabs.overview.name'),\n      description: t('tabs.overview.description'),\n    },\n    {\n      id: 'interactive',\n      name: t('charts.interactiveAnalytics'),\n      description: t('charts.interactiveDesc'),\n    },\n    {\n      id: 'detailed',\n      name: t('tabs.detailed.name'),\n      description: t('tabs.detailed.description'),\n    },\n  ];\n\n  return (\n    <div className='bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8 rounded-lg shadow-inner'>\n      <div className='flex flex-col md:flex-row md:items-center md:justify-between mb-6'>\n        <div>\n          <h2 className='text-2xl font-bold text-gray-900 dark:text-white'>\n            {t('tabs.detailed.name')}\n          </h2>\n          <p className='text-gray-600 dark:text-gray-400 mt-1'>{t('tabs.detailed.description')}</p>\n        </div>\n        <div className='flex items-center gap-4 mt-4 md:mt-0'>\n          <div className='flex items-center gap-2'>\n            <CalendarIcon className='w-5 h-5 text-gray-500' />\n            <select\n              value={period}\n              onChange={e => setPeriod(e.target.value)}\n              className='bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md p-2'\n            >\n              <option value='month'>{t('advanced.month')}</option>\n              <option value='quarter'>{t('advanced.quarter')}</option>\n              <option value='year'>{t('advanced.year')}</option>\n            </select>\n          </div>\n          <button className='flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'>\n            <ArrowDownTrayIcon className='w-5 h-5' />\n            {t('advanced.exportData')}\n          </button>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className='mb-6'>\n        <div className='border-b border-gray-200 dark:border-gray-700'>\n          <nav className='-mb-px flex space-x-8'>\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n                }`}\n              >\n                <div>\n                  <div className='font-medium'>{tab.name}</div>\n                  <div className='text-xs text-gray-500 dark:text-gray-400'>{tab.description}</div>\n                </div>\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className='mb-6'>\n          <h3 className='text-xl font-semibold text-gray-800 dark:text-white mb-4'>\n            {t('advanced.kpiOverview')}\n          </h3>\n          <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6'>\n            {kpiCards.map((kpi, i) => (\n              <EnhancedKPICard\n                key={i}\n                title={kpi.title}\n                value={kpi.value}\n                icon={kpi.icon}\n                color={kpi.color}\n                trend={kpi.trend}\n                positive={kpi.positive}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'interactive' && (\n        <InteractiveFinancialCharts\n          data={data}\n          period={period}\n          onPeriodChange={setPeriod}\n          className='mb-6'\n        />\n      )}\n\n      {activeTab === 'detailed' && (\n        <div>\n          <h3 className='text-xl font-semibold text-gray-800 dark:text-white mb-4'>\n            {t('advanced.financialCharts')}\n          </h3>\n          <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>\n            <div className='bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md h-96'>\n              <CashFlowChart />\n            </div>\n            <div className='bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md h-96'>\n              <CategoryDistributionChart type='income' />\n            </div>\n            <div className='bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md h-96'>\n              <CategoryDistributionChart type='expense' />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedFinancialAnalytics;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\AdvancedTimePeriodSelector.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\AdvancedVisualizations.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":16,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Doughnut' is defined but never used.","line":16,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport {\n  CalendarIcon,\n  MapPinIcon,\n  TrendingUpIcon,\n  UsersIcon,\n  FunnelIcon,\n  ChartBarIcon,\n} from '@heroicons/react/24/outline';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\nconst AdvancedVisualizations = ({ analytics }) => {\n  const { t } = useTranslation();\n  const [activeVisualization, setActiveVisualization] = useState('heatmap');\n\n  // Heatmap data for seasonal analysis\n  const heatmapData = useMemo(() => {\n    const months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const weeks = ['Week 1', 'Week 2', 'Week 3', 'Week 4'];\n\n    // Generate sample heatmap data based on analytics\n    const data = [];\n    months.forEach((month, monthIndex) => {\n      weeks.forEach((week, weekIndex) => {\n        const baseValue = analytics?.data?.revenueAnalytics?.totalRevenue || 50000;\n        const seasonalFactor = Math.sin((monthIndex / 12) * 2 * Math.PI) * 0.3 + 1;\n        const weeklyFactor = (4 - weekIndex) * 0.1 + 0.8;\n        const value = Math.round(\n          baseValue * seasonalFactor * weeklyFactor * (Math.random() * 0.4 + 0.8),\n        );\n\n        data.push({\n          month,\n          week,\n          value,\n          intensity: Math.min(value / (baseValue * 1.5), 1),\n        });\n      });\n    });\n\n    return data;\n  }, [analytics]);\n\n  // Geographic revenue mapping data\n  const geographicData = useMemo(() => {\n    const regions = [\n      { name: 'North America', revenue: 125000, clients: 45, growth: 12.5 },\n      { name: 'Europe', revenue: 98000, clients: 38, growth: 8.3 },\n      { name: 'Asia Pacific', revenue: 67000, clients: 22, growth: 15.7 },\n      { name: 'Latin America', revenue: 34000, clients: 15, growth: 6.2 },\n      { name: 'Middle East & Africa', revenue: 23000, clients: 8, growth: 9.1 },\n    ];\n\n    return regions.map(region => ({\n      ...region,\n      percentage: (region.revenue / regions.reduce((sum, r) => sum + r.revenue, 0)) * 100,\n    }));\n  }, []);\n\n  // Cohort analysis data\n  const cohortData = useMemo(() => {\n    const cohorts = [\n      { period: 'Q1 2024', month0: 100, month1: 85, month2: 72, month3: 65 },\n      { period: 'Q2 2024', month0: 100, month1: 88, month2: 76, month3: 68 },\n      { period: 'Q3 2024', month0: 100, month1: 82, month2: 70, month3: 62 },\n      { period: 'Q4 2024', month0: 100, month1: 90, month2: 78, month3: null },\n    ];\n\n    return {\n      labels: ['Month 0', 'Month 1', 'Month 2', 'Month 3'],\n      datasets: cohorts.map((cohort, index) => ({\n        label: cohort.period,\n        data: [cohort.month0, cohort.month1, cohort.month2, cohort.month3],\n        borderColor: `hsl(${index * 60}, 70%, 50%)`,\n        backgroundColor: `hsl(${index * 60}, 70%, 50%, 0.1)`,\n        tension: 0.4,\n      })),\n    };\n  }, []);\n\n  // Funnel analysis data\n  const funnelData = useMemo(() => {\n    const stages = [\n      { name: 'Leads', value: 1000, color: '#3B82F6' },\n      { name: 'Qualified', value: 750, color: '#10B981' },\n      { name: 'Proposals', value: 400, color: '#F59E0B' },\n      { name: 'Negotiations', value: 250, color: '#EF4444' },\n      { name: 'Closed Won', value: 150, color: '#8B5CF6' },\n    ];\n\n    return stages.map((stage, index) => ({\n      ...stage,\n      percentage: index === 0 ? 100 : (stage.value / stages[0].value) * 100,\n      conversionRate: index === 0 ? 100 : (stage.value / stages[index - 1].value) * 100,\n    }));\n  }, []);\n\n  // Correlation analysis data\n  const correlationData = useMemo(() => {\n    const metrics = [\n      'Revenue',\n      'Client Satisfaction',\n      'Response Time',\n      'Project Complexity',\n      'Team Size',\n    ];\n    const correlationMatrix = [\n      [1.0, 0.85, -0.32, 0.67, 0.45],\n      [0.85, 1.0, -0.28, 0.52, 0.38],\n      [-0.32, -0.28, 1.0, -0.15, -0.22],\n      [0.67, 0.52, -0.15, 1.0, 0.73],\n      [0.45, 0.38, -0.22, 0.73, 1.0],\n    ];\n\n    return { metrics, correlationMatrix };\n  }, []);\n\n  // Predictive analytics chart\n  const predictiveData = useMemo(() => {\n    const months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const historical = [\n      45000, 52000, 48000, 55000, 61000, 58000, 65000, 62000, 68000, 72000, 69000, 75000,\n    ];\n    const predicted = [78000, 82000, 85000, 88000, 92000, 95000];\n\n    return {\n      labels: [...months, 'Jan+1', 'Feb+1', 'Mar+1', 'Apr+1', 'May+1', 'Jun+1'],\n      datasets: [\n        {\n          label: 'Historical Revenue',\n          data: [...historical, ...Array(6).fill(null)],\n          borderColor: '#3B82F6',\n          backgroundColor: '#3B82F6',\n          tension: 0.4,\n        },\n        {\n          label: 'Predicted Revenue',\n          data: [...Array(12).fill(null), ...predicted],\n          borderColor: '#10B981',\n          backgroundColor: '#10B981',\n          borderDash: [5, 5],\n          tension: 0.4,\n        },\n      ],\n    };\n  }, []);\n\n  const renderHeatmap = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Seasonal Revenue Heatmap</h3>\n      <div className='grid grid-cols-12 gap-1 mb-4'>\n        {['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'].map(\n          month => (\n            <div key={month} className='text-xs text-gray-600 text-center font-medium'>\n              {month}\n            </div>\n          ),\n        )}\n      </div>\n      <div className='grid grid-cols-12 gap-1'>\n        {heatmapData.map((cell, index) => (\n          <div\n            key={index}\n            className='aspect-square rounded flex items-center justify-center text-xs font-medium'\n            style={{\n              backgroundColor: `rgba(59, 130, 246, ${cell.intensity})`,\n              color: cell.intensity > 0.5 ? 'white' : '#1F2937',\n            }}\n            title={`${cell.month} ${cell.week}: Ôé¼${cell.value.toLocaleString()}`}\n          >\n            {Math.round(cell.value / 1000)}k\n          </div>\n        ))}\n      </div>\n      <div className='flex items-center justify-between mt-4 text-xs text-gray-600'>\n        <span>Low Revenue</span>\n        <div className='flex space-x-1'>\n          {[0.2, 0.4, 0.6, 0.8, 1.0].map(intensity => (\n            <div\n              key={intensity}\n              className='w-4 h-4 rounded'\n              style={{ backgroundColor: `rgba(59, 130, 246, ${intensity})` }}\n            />\n          ))}\n        </div>\n        <span>High Revenue</span>\n      </div>\n    </div>\n  );\n\n  const renderGeographicMapping = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Geographic Revenue Distribution</h3>\n      <div className='space-y-4'>\n        {geographicData.map((region, index) => (\n          <div\n            key={region.name}\n            className='flex items-center justify-between p-4 bg-gray-50 rounded-lg'\n          >\n            <div className='flex items-center space-x-3'>\n              <div\n                className='w-4 h-4 rounded-full'\n                style={{ backgroundColor: `hsl(${index * 60}, 70%, 50%)` }}\n              />\n              <div>\n                <p className='font-medium text-black'>{region.name}</p>\n                <p className='text-sm text-gray-600'>{region.clients} clients</p>\n              </div>\n            </div>\n            <div className='text-right'>\n              <p className='font-semibold text-black'>Ôé¼{region.revenue.toLocaleString()}</p>\n              <p className='text-sm text-green-600'>+{region.growth}%</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderCohortAnalysis = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Client Retention Cohort Analysis</h3>\n      <div className='h-64'>\n        <Line\n          data={cohortData}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top',\n              },\n              title: {\n                display: true,\n                text: 'Client Retention Rate by Cohort',\n              },\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function (value) {\n                    return value + '%';\n                  },\n                },\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n\n  const renderFunnelAnalysis = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Sales Funnel Analysis</h3>\n      <div className='space-y-2'>\n        {funnelData.map((stage, index) => (\n          <div key={stage.name} className='relative'>\n            <div\n              className='h-12 flex items-center justify-between px-4 text-white font-medium rounded'\n              style={{\n                backgroundColor: stage.color,\n                width: `${stage.percentage}%`,\n                minWidth: '200px',\n              }}\n            >\n              <span>{stage.name}</span>\n              <span>{stage.value.toLocaleString()}</span>\n            </div>\n            {index > 0 && (\n              <div className='absolute -right-16 top-3 text-sm text-gray-600'>\n                {stage.conversionRate.toFixed(1)}%\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderCorrelationMatrix = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Metrics Correlation Analysis</h3>\n      <div className='overflow-x-auto'>\n        <table className='w-full'>\n          <thead>\n            <tr>\n              <th className='text-left p-2'></th>\n              {correlationData.metrics.map(metric => (\n                <th key={metric} className='text-center p-2 text-xs font-medium text-gray-600'>\n                  {metric}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {correlationData.metrics.map((metric, rowIndex) => (\n              <tr key={metric}>\n                <td className='p-2 text-xs font-medium text-gray-600'>{metric}</td>\n                {correlationData.correlationMatrix[rowIndex].map((value, colIndex) => (\n                  <td key={colIndex} className='p-2 text-center'>\n                    <div\n                      className='w-8 h-8 rounded flex items-center justify-center text-xs font-medium mx-auto'\n                      style={{\n                        backgroundColor:\n                          value > 0\n                            ? `rgba(34, 197, 94, ${Math.abs(value)})`\n                            : `rgba(239, 68, 68, ${Math.abs(value)})`,\n                        color: Math.abs(value) > 0.5 ? 'white' : '#1F2937',\n                      }}\n                    >\n                      {value.toFixed(2)}\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n\n  const renderPredictiveAnalytics = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Revenue Prediction Model</h3>\n      <div className='h-64'>\n        <Line\n          data={predictiveData}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top',\n              },\n              title: {\n                display: true,\n                text: 'Historical vs Predicted Revenue',\n              },\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  callback: function (value) {\n                    return 'Ôé¼' + value / 1000 + 'k';\n                  },\n                },\n              },\n            },\n          }}\n        />\n      </div>\n      <div className='mt-4 p-4 bg-blue-50 rounded-lg'>\n        <p className='text-sm text-blue-800'>\n          <strong>Model Accuracy:</strong> 87.3% | <strong>Confidence Interval:</strong> ┬▒12%\n        </p>\n        <p className='text-sm text-blue-700 mt-1'>\n          Based on historical trends, seasonal patterns, and market indicators.\n        </p>\n      </div>\n    </div>\n  );\n\n  const visualizations = {\n    heatmap: { component: renderHeatmap, icon: CalendarIcon, title: 'Seasonal Heatmap' },\n    geographic: {\n      component: renderGeographicMapping,\n      icon: MapPinIcon,\n      title: 'Geographic Mapping',\n    },\n    cohort: { component: renderCohortAnalysis, icon: UsersIcon, title: 'Cohort Analysis' },\n    funnel: { component: renderFunnelAnalysis, icon: FunnelIcon, title: 'Funnel Analysis' },\n    correlation: {\n      component: renderCorrelationMatrix,\n      icon: ChartBarIcon,\n      title: 'Correlation Analysis',\n    },\n    predictive: {\n      component: renderPredictiveAnalytics,\n      icon: TrendingUpIcon,\n      title: 'Predictive Analytics',\n    },\n  };\n\n  return (\n    <div className='space-y-6'>\n      {/* Navigation */}\n      <div className='flex flex-wrap gap-2'>\n        {Object.entries(visualizations).map(([key, viz]) => {\n          const IconComponent = viz.icon;\n          return (\n            <button\n              key={key}\n              onClick={() => setActiveVisualization(key)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\n                activeVisualization === key\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              <IconComponent className='w-4 h-4' />\n              <span className='text-sm font-medium'>{viz.title}</span>\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Active Visualization */}\n      <div>{visualizations[activeVisualization].component()}</div>\n    </div>\n  );\n};\n\nexport default AdvancedVisualizations;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\AnalyticsDashboard.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircleIcon' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewColumnsIcon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowsRightLeftIcon' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EnhancedKPICard' is defined but never used.","line":40,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [selectedPeriod, dateRange, categoryFilter, loadAnalyticsData]","fix":{"range":[3513,3556],"text":"[selectedPeriod, dateRange, categoryFilter, loadAnalyticsData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [autoRefresh, loadAnalyticsData, refreshInterval]","fix":{"range":[3847,3877],"text":"[autoRefresh, loadAnalyticsData, refreshInterval]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getChartOptions' is assigned a value but never used.","line":180,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ChartBarIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  CurrencyEuroIcon,\n  BanknotesIcon,\n  ArrowPathIcon,\n  ScaleIcon,\n  ShieldCheckIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  Cog6ToothIcon,\n  EyeIcon,\n  ViewColumnsIcon,\n  ArrowsRightLeftIcon,\n  CalendarDaysIcon,\n  PlayIcon,\n  PauseIcon,\n} from '@heroicons/react/24/outline';\nimport { Line, Doughnut } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport financialService from '@lib/financialService';\nimport AdvancedTimePeriodSelector from '@components/analytics/AdvancedTimePeriodSelector';\nimport DashboardLayoutManager from '@components/dashboard/DashboardLayoutManager';\nimport Logger from '@utils/Logger';\nimport EnhancedKPICard from '@components/analytics/EnhancedKPICard';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\nconst AnalyticsDashboard = () => {\n  const { t, ready } = useTranslation('analytics');\n  // UI states\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n  const [categoryFilter] = useState('all');\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const [layoutEditMode, setLayoutEditMode] = useState(false);\n  const [compareMode, setCompareMode] = useState(false);\n\n  // Data states\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [trendData, setTrendData] = useState(null);\n  const [setKpiData] = useState(null);\n  const [healthData, setHealthData] = useState(null);\n\n  const [dateRange, setDateRange] = useState({\n    start: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\n    end: new Date(),\n  });\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [refreshInterval, setRefreshInterval] = useState(30000); // 30 seconds default\n  const refreshIntervalRef = useRef(null);\n\n  // Safe translation function that handles loading state and interpolation\n  const safeT = (key, options = {}, fallback = key) => {\n    if (!ready) return fallback;\n    return t(key, options);\n  };\n\n  // MOVE FUNCTION DECLARATION BEFORE useEffect THAT USES IT\n  const loadAnalyticsData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [overview, trends, kpis, health] = await Promise.all([\n        financialService.getFinancialOverview(dateRange.start, dateRange.end),\n        financialService.getFinancialTrend(selectedPeriod),\n        financialService.calculateKPIs({}), // Placeholder\n        financialService.getFinancialHealth(),\n      ]);\n\n      if (overview.success) setAnalyticsData(overview.data);\n      if (trends.success) setTrendData(trends.data);\n      if (kpis.success) setKpiData(kpis.data);\n      if (health.success) setHealthData(health.data);\n    } catch (err) {\n      Logger.error('Error loading analytics dashboard data:', err);\n      setError(safeT('common.error', {}, 'Error loading data'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // NOW useEffect hooks can safely reference loadAnalyticsData\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [selectedPeriod, dateRange, categoryFilter]);\n\n  useEffect(() => {\n    if (autoRefresh) {\n      refreshIntervalRef.current = setInterval(() => {\n        loadAnalyticsData();\n      }, refreshInterval);\n    } else {\n      clearInterval(refreshIntervalRef.current);\n    }\n    return () => clearInterval(refreshIntervalRef.current);\n  }, [autoRefresh, refreshInterval]); // Remove loadAnalyticsData from dependency array to avoid infinite loops\n\n  // Enhanced date range handler\n  const handleDateRangeChange = newRange => {\n    setDateRange(newRange);\n    setShowDatePicker(false);\n  };\n\n  // Quick date range presets\n  const getQuickDateRange = preset => {\n    const now = new Date();\n    const ranges = {\n      today: {\n        start: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n        end: now,\n      },\n      week: {\n        start: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),\n        end: now,\n      },\n      month: {\n        start: new Date(now.getFullYear(), now.getMonth(), 1),\n        end: now,\n      },\n      quarter: {\n        start: new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1),\n        end: now,\n      },\n      year: {\n        start: new Date(now.getFullYear(), 0, 1),\n        end: now,\n      },\n    };\n    return ranges[preset] || ranges.month;\n  };\n\n  // Show loading state if translations are not ready\n  if (!ready) {\n    return (\n      <div className='min-h-screen bg-gray-50 flex items-center justify-center'>\n        <div className='text-center'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\n          <p className='text-gray-600'>Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadAnalyticsData();\n    setRefreshing(false);\n  };\n\n  const getChartOptions = title => ({\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: { display: false },\n      title: { display: true, text: title, font: { size: 16 } },\n    },\n  });\n\n  const renderKPIs = () => (\n    <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8'>\n      <div className='bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {safeT('totalIncome', {}, 'Total Income')}\n            </p>\n            <p className='text-3xl font-bold text-gray-900 dark:text-white mt-2'>\n              {analyticsData?.totalIncome ? `Ôé¼Ôé¼{analyticsData.totalIncome.toLocaleString()}` : 'Ôé¼0'}\n            </p>\n            <div className='flex items-center mt-2'>\n              <ArrowTrendingUpIcon className='w-4 h-4 text-green-500 mr-1' />\n              <span className='text-sm font-medium text-green-600'>\n                {analyticsData?.incomeGrowth || '+0%'}\n              </span>\n            </div>\n          </div>\n          <div className='p-3 bg-green-100 dark:bg-green-900/20 rounded-xl'>\n            <BanknotesIcon className='w-6 h-6 text-green-600 dark:text-green-400' />\n          </div>\n        </div>\n      </div>\n\n      <div className='bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {safeT('totalExpenses', {}, 'Total Expenses')}\n            </p>\n            <p className='text-3xl font-bold text-gray-900 dark:text-white mt-2'>\n              {analyticsData?.totalExpenses\n                ? `Ôé¼Ôé¼{analyticsData.totalExpenses.toLocaleString()}`\n                : 'Ôé¼0'}\n            </p>\n            <div className='flex items-center mt-2'>\n              <ArrowTrendingDownIcon className='w-4 h-4 text-red-500 mr-1' />\n              <span className='text-sm font-medium text-red-600'>\n                {analyticsData?.expenseGrowth || '+0%'}\n              </span>\n            </div>\n          </div>\n          <div className='p-3 bg-red-100 dark:bg-red-900/20 rounded-xl'>\n            <CurrencyEuroIcon className='w-6 h-6 text-red-600 dark:text-red-400' />\n          </div>\n        </div>\n      </div>\n\n      <div className='bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {safeT('netProfit', {}, 'Net Profit')}\n            </p>\n            <p className='text-3xl font-bold text-gray-900 dark:text-white mt-2'>\n              {analyticsData?.netProfit ? `Ôé¼Ôé¼{analyticsData.netProfit.toLocaleString()}` : 'Ôé¼0'}\n            </p>\n            <div className='flex items-center mt-2'>\n              <ArrowTrendingUpIcon className='w-4 h-4 text-blue-500 mr-1' />\n              <span className='text-sm font-medium text-blue-600'>+12.5%</span>\n            </div>\n          </div>\n          <div className='p-3 bg-blue-100 dark:bg-blue-900/20 rounded-xl'>\n            <ArrowTrendingUpIcon className='w-6 h-6 text-blue-600 dark:text-blue-400' />\n          </div>\n        </div>\n      </div>\n\n      <div className='bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {safeT('profitMargin', {}, 'Profit Margin')}\n            </p>\n            <p className='text-3xl font-bold text-gray-900 dark:text-white mt-2'>\n              {analyticsData?.profitMargin ? `${analyticsData.profitMargin}%` : '0%'}\n            </p>\n            <div className='flex items-center mt-2'>\n              <ArrowTrendingUpIcon className='w-4 h-4 text-purple-500 mr-1' />\n              <span className='text-sm font-medium text-purple-600'>+2.1%</span>\n            </div>\n          </div>\n          <div className='p-3 bg-purple-100 dark:bg-purple-900/20 rounded-xl'>\n            <ScaleIcon className='w-6 h-6 text-purple-600 dark:text-purple-400' />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCharts = () => (\n    <div className='grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8'>\n      <div className='bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-sm border border-gray-200 dark:border-gray-700'>\n        <div className='flex items-center justify-between mb-6'>\n          <h3 className='text-xl font-semibold text-gray-900 dark:text-white'>\n            {safeT('incomeExpensesTrend', {}, 'Income vs Expenses Trend')}\n          </h3>\n          <div className='flex items-center space-x-2'>\n            <div className='flex items-center'>\n              <div className='w-3 h-3 bg-green-500 rounded-full mr-2'></div>\n              <span className='text-sm text-gray-600 dark:text-gray-400'>Income</span>\n            </div>\n            <div className='flex items-center'>\n              <div className='w-3 h-3 bg-red-500 rounded-full mr-2'></div>\n              <span className='text-sm text-gray-600 dark:text-gray-400'>Expenses</span>\n            </div>\n          </div>\n        </div>\n        <div className='h-80'>\n          <Line\n            data={{\n              labels: trendData?.monthlyData.map(d => d.month) || [],\n              datasets: [\n                {\n                  label: safeT('income', {}, 'Income'),\n                  data: trendData?.monthlyData.map(d => d.income),\n                  borderColor: '#22c55e',\n                  backgroundColor: 'rgba(34, 197, 94, 0.1)',\n                  fill: true,\n                },\n                {\n                  label: safeT('expenses', {}, 'Expenses'),\n                  data: trendData?.monthlyData.map(d => d.expenses),\n                  borderColor: '#ef4444',\n                  backgroundColor: 'rgba(239, 68, 68, 0.1)',\n                  fill: true,\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n                title: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    display: false,\n                  },\n                  border: {\n                    display: false,\n                  },\n                },\n                y: {\n                  beginAtZero: true,\n                  grid: {\n                    color: 'rgba(156, 163, 175, 0.1)',\n                  },\n                  border: {\n                    display: false,\n                  },\n                  ticks: {\n                    callback: function (value) {\n                      return 'Ôé¼' + value.toLocaleString();\n                    },\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 6,\n                  hoverRadius: 8,\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      <div className='bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-sm border border-gray-200 dark:border-gray-700'>\n        <div className='flex items-center justify-between mb-6'>\n          <h3 className='text-xl font-semibold text-gray-900 dark:text-white'>\n            {safeT('categoryDistribution', {}, 'Expense Categories')}\n          </h3>\n          <button className='text-sm text-blue-600 hover:text-blue-700 font-medium'>\n            View Details\n          </button>\n        </div>\n        <div className='h-80'>\n          <Doughnut\n            data={{\n              labels: analyticsData?.categoryDistribution.map(d => d.category) || [\n                'Office Supplies',\n                'Travel',\n                'Marketing',\n                'Equipment',\n                'Other',\n              ],\n              datasets: [\n                {\n                  data: analyticsData?.categoryDistribution.map(d => d.amount) || [\n                    30, 25, 20, 15, 10,\n                  ],\n                  backgroundColor: ['#3b82f6', '#10b981', '#f97316', '#8b5cf6', '#ec4899'],\n                  borderWidth: 0,\n                  cutout: '70%',\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  position: 'bottom',\n                  labels: {\n                    usePointStyle: true,\n                    padding: 20,\n                    font: {\n                      size: 12,\n                    },\n                  },\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderHealth = () => (\n    <div className='bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-sm border border-gray-200 dark:border-gray-700'>\n      <div className='flex items-center justify-between mb-8'>\n        <h3 className='text-xl font-semibold text-gray-900 dark:text-white'>\n          {safeT('financialHealth', {}, 'Financial Health Overview')}\n        </h3>\n        <div className='flex items-center space-x-2'>\n          <div className='w-3 h-3 bg-green-500 rounded-full'></div>\n          <span className='text-sm text-gray-600 dark:text-gray-400'>Healthy</span>\n        </div>\n      </div>\n\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6'>\n        <div className='bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-xl p-6 text-center'>\n          <div className='w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4'>\n            <span className='text-white font-bold text-lg'>{healthData?.overallScore || 85}</span>\n          </div>\n          <div className='text-lg font-semibold text-gray-900 dark:text-white mb-1'>\n            Overall Score\n          </div>\n          <div className='text-sm text-gray-600 dark:text-gray-400'>Excellent performance</div>\n        </div>\n\n        <div className='bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-xl p-6 text-center'>\n          <div className='w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4'>\n            <ShieldCheckIcon className='w-6 h-6 text-white' />\n          </div>\n          <div className='text-lg font-semibold text-gray-900 dark:text-white mb-1'>\n            {healthData?.liquidity || 'Good'}\n          </div>\n          <div className='text-sm text-gray-600 dark:text-gray-400'>\n            {safeT('liquidity', {}, 'Liquidity Status')}\n          </div>\n        </div>\n\n        <div className='bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-xl p-6 text-center'>\n          <div className='w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4'>\n            <ArrowTrendingUpIcon className='w-6 h-6 text-white' />\n          </div>\n          <div className='text-lg font-semibold text-gray-900 dark:text-white mb-1'>\n            {healthData?.profitability || 'Excellent'}\n          </div>\n          <div className='text-sm text-gray-600 dark:text-gray-400'>\n            {safeT('profitability', {}, 'Profitability')}\n          </div>\n        </div>\n\n        <div className='bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20 rounded-xl p-6 text-center'>\n          <div className='w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4'>\n            <ChartBarIcon className='w-6 h-6 text-white' />\n          </div>\n          <div className='text-lg font-semibold text-gray-900 dark:text-white mb-1'>\n            {healthData?.growth || 'Stable'}\n          </div>\n          <div className='text-sm text-gray-600 dark:text-gray-400'>\n            {safeT('growth', {}, 'Growth Trend')}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className='min-h-screen bg-gray-50 dark:bg-gray-900'>\n      <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>\n        <div className='bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-sm border border-gray-200 dark:border-gray-700 mb-8'>\n          <div className='flex flex-col lg:flex-row lg:items-center lg:justify-between'>\n            <div className='mb-6 lg:mb-0'>\n              <h1 className='text-3xl font-bold text-gray-900 dark:text-white'>\n                {safeT('analyticsOverview', {}, 'Analytics Dashboard')}\n              </h1>\n              <p className='mt-2 text-lg text-gray-600 dark:text-gray-400'>\n                {safeT(\n                  'trackFinancialPerformance',\n                  {},\n                  'Monitor your business performance and financial insights',\n                )}\n              </p>\n              <div className='flex items-center mt-4 text-sm text-gray-500 dark:text-gray-400'>\n                <ClockIcon className='w-4 h-4 mr-2' />\n                Last updated:{' '}\n                {new Date().toLocaleDateString('en-US', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                  hour: '2-digit',\n                  minute: '2-digit',\n                })}\n              </div>\n            </div>\n            <div className='flex flex-wrap items-center gap-3'>\n              {/* Date Range Selector */}\n              <div className='relative'>\n                <button\n                  onClick={() => setShowDatePicker(!showDatePicker)}\n                  className='inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                >\n                  <CalendarDaysIcon className='h-4 w-4 mr-2' />\n                  {dateRange.start.toLocaleDateString()} - {dateRange.end.toLocaleDateString()}\n                </button>\n\n                {showDatePicker && (\n                  <div className='absolute top-full mt-2 right-0 bg-white border border-gray-200 rounded-xl shadow-lg p-4 z-50 min-w-80'>\n                    <div className='space-y-4'>\n                      <div className='grid grid-cols-2 gap-2'>\n                        {['today', 'week', 'month', 'quarter', 'year'].map(preset => (\n                          <button\n                            key={preset}\n                            onClick={() => handleDateRangeChange(getQuickDateRange(preset))}\n                            className='px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg capitalize'\n                          >\n                            {preset}\n                          </button>\n                        ))}\n                      </div>\n                      <div className='grid grid-cols-2 gap-4'>\n                        <div>\n                          <label className='block text-sm font-medium text-gray-700 mb-1'>\n                            Start Date\n                          </label>\n                          <input\n                            type='date'\n                            value={dateRange.start.toISOString().split('T')[0]}\n                            onChange={e =>\n                              setDateRange(prev => ({ ...prev, start: new Date(e.target.value) }))\n                            }\n                            className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500'\n                          />\n                        </div>\n                        <div>\n                          <label className='block text-sm font-medium text-gray-700 mb-1'>\n                            End Date\n                          </label>\n                          <input\n                            type='date'\n                            value={dateRange.end.toISOString().split('T')[0]}\n                            onChange={e =>\n                              setDateRange(prev => ({ ...prev, end: new Date(e.target.value) }))\n                            }\n                            className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500'\n                          />\n                        </div>\n                      </div>\n                      <button\n                        onClick={() => setShowDatePicker(false)}\n                        className='w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\n                      >\n                        Apply\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <AdvancedTimePeriodSelector\n                selectedPeriod={selectedPeriod}\n                onPeriodChange={setSelectedPeriod}\n              />\n\n              <button\n                onClick={handleRefresh}\n                disabled={refreshing}\n                className='inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-xl shadow-sm transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed'\n              >\n                <ArrowPathIcon className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n                {safeT('refresh', {}, 'Refresh')}\n              </button>\n\n              {/* Enhanced Auto-refresh with interval control */}\n              <div className='flex items-center space-x-2'>\n                <button\n                  onClick={() => setAutoRefresh(!autoRefresh)}\n                  className={`inline-flex items-center px-3 py-2 rounded-lg font-medium transition-colors ${\n                    autoRefresh\n                      ? 'bg-green-100 text-green-700 hover:bg-green-200'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  {autoRefresh ? (\n                    <PauseIcon className='h-4 w-4 mr-1' />\n                  ) : (\n                    <PlayIcon className='h-4 w-4 mr-1' />\n                  )}\n                  {autoRefresh ? 'Stop' : 'Auto'}\n                </button>\n\n                {autoRefresh && (\n                  <select\n                    value={refreshInterval}\n                    onChange={e => setRefreshInterval(Number(e.target.value))}\n                    className='px-2 py-1 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500'\n                  >\n                    <option value={10000}>10s</option>\n                    <option value={30000}>30s</option>\n                    <option value={60000}>1m</option>\n                    <option value={300000}>5m</option>\n                  </select>\n                )}\n              </div>\n              <button\n                onClick={() => setLayoutEditMode(!layoutEditMode)}\n                className={`inline-flex items-center px-4 py-2 font-medium rounded-xl shadow-sm transition-colors duration-200 ${\n                  layoutEditMode\n                    ? 'bg-blue-100 text-blue-700 hover:bg-blue-200 dark:bg-blue-900/20 dark:text-blue-400'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'\n                }`}\n              >\n                <Cog6ToothIcon className='h-4 w-4 mr-2' />\n                {layoutEditMode\n                  ? safeT('exitEdit', {}, 'Exit Edit')\n                  : safeT('editLayout', {}, 'Edit Layout')}\n              </button>\n              <button\n                onClick={() => setCompareMode(!compareMode)}\n                className={`inline-flex items-center px-4 py-2 font-medium rounded-xl shadow-sm transition-colors duration-200 ${\n                  compareMode\n                    ? 'bg-blue-100 text-blue-700 hover:bg-blue-200 dark:bg-blue-900/20 dark:text-blue-400'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'\n                }`}\n              >\n                <EyeIcon className='h-4 w-4 mr-2' />\n                {compareMode\n                  ? safeT('exitCompare', {}, 'Exit Compare')\n                  : safeT('compare', {}, 'Compare')}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {loading && (\n          <div className='flex items-center justify-center py-12'>\n            <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n            <span className='ml-3 text-gray-600 dark:text-gray-400'>\n              {safeT('common.loading', {}, 'Loading analytics data...')}\n            </span>\n          </div>\n        )}\n\n        {error && (\n          <div className='bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-6 py-4 rounded-xl mb-8'>\n            <div className='flex items-center'>\n              <div className='flex-shrink-0'>\n                <svg className='h-5 w-5' viewBox='0 0 20 20' fill='currentColor'>\n                  <path\n                    fillRule='evenodd'\n                    d='M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z'\n                    clipRule='evenodd'\n                  />\n                </svg>\n              </div>\n              <div className='ml-3'>\n                <h3 className='text-sm font-medium'>Error loading analytics data</h3>\n                <p className='mt-1 text-sm'>{error}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {!loading && !error && (\n          <DashboardLayoutManager\n            editMode={layoutEditMode}\n            compareMode={compareMode}\n            onLayoutChange={newLayout => {\n              Logger.info('Layout changed:', newLayout);\n            }}\n          >\n            {renderKPIs()}\n            {renderCharts()}\n            {renderHealth()}\n          </DashboardLayoutManager>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsDashboard;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\ClientAnalyticsWidgets.jsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":754,"column":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n  Users,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  DollarSign,\r\n  Clock,\r\n  Star,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Calendar,\r\n  Filter,\r\n  Download,\r\n  Eye,\r\n  ChevronRight,\r\n  BarChart3,\r\n  PieChart,\r\n  Target,\r\n  Activity,\r\n  Award,\r\n  UserCheck,\r\n  UserX,\r\n  UserPlus,\r\n  ArrowUp,\r\n  ArrowDown,\r\n  Minus,\r\n} from 'lucide-react';\r\nimport { Chart as ChartJS, ArcElement, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Doughnut, Bar, Line } from 'react-chartjs-2';\r\nimport clientService from '@lib/clientService';\r\nimport invoiceAnalyticsService from '@lib/invoiceAnalyticsService';\r\nimport Logger from '@utils/Logger';\r\n\r\n// Register Chart.js components\r\nChartJS.register(ArcElement, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);\r\n\r\nconst ClientAnalyticsWidgets = ({ dateRange, onDrillDown, className = \"\" }) => {\r\n  const { isSignedIn } = useAuth();\r\n  const { user } = useUser();\r\n  const { t } = useTranslation(['analytics', 'dashboard', 'common']);\r\n  \r\n  // State management\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedSegment, setSelectedSegment] = useState(null);\r\n  const [showDrillDown, setShowDrillDown] = useState(false);\r\n  const [drillDownData, setDrillDownData] = useState(null);\r\n  \r\n  // Enhanced analytics states for Phase 2\r\n  const [activeView, setActiveView] = useState('overview'); // overview, segmentation, retention, behavior, growth\r\n  const [clientData, setClientData] = useState({\r\n    overview: {},\r\n    segmentation: {},\r\n    topClients: [],\r\n    paymentBehavior: {},\r\n    growthTrends: [],\r\n    healthScore: 0,\r\n    retentionMetrics: {},\r\n    behaviorAnalysis: {},\r\n    riskAssessment: {},\r\n    predictiveInsights: {}\r\n  });\r\n  const [refreshInterval, setRefreshInterval] = useState(null);\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n  // Load client analytics data\r\n  const loadClientAnalytics = useCallback(async () => {\r\n    if (!isSignedIn || !user?.id) {\r\n      setError('User not authenticated');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const startDate = dateRange?.start?.toISOString?.()?.split('T')[0] || \r\n                       new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0];\r\n      const endDate = dateRange?.end?.toISOString?.()?.split('T')[0] || \r\n                     new Date().toISOString().split('T')[0];\r\n\r\n      // Load data from multiple sources with user ID\r\n      const [clientsResult, analyticsResult] = await Promise.all([\r\n        clientService.getClients({ limit: null, userId: user.id }),\r\n        invoiceAnalyticsService.getClientAnalytics(startDate, endDate)\r\n      ]);\r\n\r\n      if (clientsResult.error) throw new Error(clientsResult.error);\r\n      if (!analyticsResult.success) throw new Error(analyticsResult.error);\r\n\r\n      const clients = clientsResult.data || [];\r\n      const analytics = analyticsResult.data || {};\r\n\r\n      // Calculate client overview metrics\r\n      const overview = calculateOverviewMetrics(clients, analytics);\r\n      \r\n      // Calculate client segmentation (RFM analysis)\r\n      const segmentation = calculateClientSegmentation(clients, analytics);\r\n      \r\n      // Calculate growth trends\r\n      const growthTrends = calculateGrowthTrends(clients);\r\n      \r\n      // Calculate business health score\r\n      const healthScore = calculateBusinessHealthScore(overview, analytics);\r\n\r\n      // Calculate enhanced Phase 2 analytics\r\n      const retentionMetrics = calculateRetentionMetrics(clients, analytics);\r\n      const behaviorAnalysis = calculateBehaviorAnalysis(clients, analytics);\r\n      const riskAssessment = calculateRiskAssessment(clients, analytics);\r\n      const predictiveInsights = calculatePredictiveInsights(clients, analytics);\r\n\r\n      setClientData({\r\n        overview,\r\n        segmentation,\r\n        topClients: analytics.topClients || [],\r\n        paymentBehavior: analytics.paymentBehavior || {},\r\n        growthTrends,\r\n        healthScore,\r\n        retentionMetrics,\r\n        behaviorAnalysis,\r\n        riskAssessment,\r\n        predictiveInsights\r\n      });\r\n      \r\n      setLastUpdated(new Date());\r\n\r\n    } catch (err) {\r\n      Logger.error('Error loading client analytics:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dateRange, isSignedIn, user?.id]);\r\n\r\n  useEffect(() => {\r\n    loadClientAnalytics();\r\n  }, [loadClientAnalytics]);\r\n\r\n  // Auto-refresh functionality for Phase 2\r\n  useEffect(() => {\r\n    if (refreshInterval) {\r\n      const interval = setInterval(() => {\r\n        loadClientAnalytics();\r\n      }, refreshInterval);\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [refreshInterval, loadClientAnalytics]);\r\n\r\n  // Enhanced view switching for Phase 2\r\n  const handleViewChange = (view) => {\r\n    setActiveView(view);\r\n  };\r\n\r\n  const toggleAutoRefresh = (interval) => {\r\n    setRefreshInterval(interval === refreshInterval ? null : interval);\r\n  };\r\n\r\n  // Helper functions for calculations\r\n  const calculateOverviewMetrics = (clients, analytics) => {\r\n    const now = new Date();\r\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\r\n    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n    \r\n    const newThisMonth = clients.filter(client => \r\n      new Date(client.created_at) >= thisMonth\r\n    ).length;\r\n    \r\n    const newLastMonth = clients.filter(client => {\r\n      const createdAt = new Date(client.created_at);\r\n      return createdAt >= lastMonth && createdAt < thisMonth;\r\n    }).length;\r\n\r\n    const growth = newLastMonth > 0 ? ((newThisMonth - newLastMonth) / newLastMonth * 100) : 0;\r\n\r\n    return {\r\n      totalClients: clients.length,\r\n      activeClients: analytics.totalClients || clients.length,\r\n      newThisMonth,\r\n      growth,\r\n      retention: 92, // Mock retention rate - would need historical data\r\n      avgRevenue: analytics.totalClients > 0 ? \r\n        Object.values(analytics.clientMetrics || {})\r\n          .reduce((sum, client) => sum + client.totalRevenue, 0) / analytics.totalClients : 0\r\n    };\r\n  };\r\n\r\n  const calculateClientSegmentation = (clients, analytics) => {\r\n    const segments = {\r\n      champions: 0,\r\n      loyalCustomers: 0,\r\n      potentialLoyalists: 0,\r\n      newCustomers: 0,\r\n      atRisk: 0,\r\n      cantLoseThem: 0,\r\n      hibernating: 0,\r\n      lost: 0\r\n    };\r\n\r\n    // Mock segmentation based on client metrics\r\n    const clientMetrics = analytics.clientMetrics || {};\r\n    Object.values(clientMetrics).forEach(client => {\r\n      const revenue = client.totalRevenue || 0;\r\n      const recency = client.averagePaymentTime || 30;\r\n      const frequency = client.invoiceCount || 0;\r\n\r\n      if (revenue > 5000 && recency <= 30 && frequency >= 5) {\r\n        segments.champions++;\r\n      } else if (revenue > 3000 && recency <= 45 && frequency >= 3) {\r\n        segments.loyalCustomers++;\r\n      } else if (revenue > 1000 && recency <= 60) {\r\n        segments.potentialLoyalists++;\r\n      } else if (recency <= 30 && frequency <= 2) {\r\n        segments.newCustomers++;\r\n      } else if (revenue > 2000 && recency > 60) {\r\n        segments.atRisk++;\r\n      } else if (revenue > 5000 && recency > 90) {\r\n        segments.cantLoseThem++;\r\n      } else if (recency > 120) {\r\n        segments.hibernating++;\r\n      } else {\r\n        segments.lost++;\r\n      }\r\n    });\r\n\r\n    return segments;\r\n  };\r\n\r\n  const calculateGrowthTrends = (clients) => {\r\n    const last6Months = [];\r\n    const now = new Date();\r\n    \r\n    for (let i = 5; i >= 0; i--) {\r\n      const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1);\r\n      const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 0);\r\n      \r\n      const newClientsInMonth = clients.filter(client => {\r\n        const createdAt = new Date(client.created_at);\r\n        return createdAt >= monthStart && createdAt <= monthEnd;\r\n      }).length;\r\n\r\n      last6Months.push({\r\n        month: monthStart.toLocaleDateString('en-US', { month: 'short' }),\r\n        newClients: newClientsInMonth,\r\n        totalClients: clients.filter(client => \r\n          new Date(client.created_at) <= monthEnd\r\n        ).length\r\n      });\r\n    }\r\n\r\n    return last6Months;\r\n  };\r\n\r\n  const calculateBusinessHealthScore = (overview, analytics) => {\r\n    let score = 0;\r\n    \r\n    // Client growth (30%)\r\n    if (overview.growth > 10) score += 30;\r\n    else if (overview.growth > 0) score += 20;\r\n    else if (overview.growth > -10) score += 10;\r\n    \r\n    // Retention rate (25%)\r\n    if (overview.retention > 90) score += 25;\r\n    else if (overview.retention > 80) score += 20;\r\n    else if (overview.retention > 70) score += 15;\r\n    else if (overview.retention > 60) score += 10;\r\n    \r\n    // Payment behavior (25%)\r\n    const paymentBehavior = analytics.paymentBehavior || {};\r\n    const excellentPayments = paymentBehavior.excellent?.percentage || 0;\r\n    if (excellentPayments > 80) score += 25;\r\n    else if (excellentPayments > 60) score += 20;\r\n    else if (excellentPayments > 40) score += 15;\r\n    else if (excellentPayments > 20) score += 10;\r\n    \r\n    // Client diversity (20%)\r\n    const topClientRevenue = analytics.topClients?.[0]?.totalRevenue || 0;\r\n    const totalRevenue = Object.values(analytics.clientMetrics || {})\r\n      .reduce((sum, client) => sum + client.totalRevenue, 0);\r\n    const concentration = totalRevenue > 0 ? (topClientRevenue / totalRevenue) * 100 : 0;\r\n    \r\n    if (concentration < 20) score += 20;\r\n    else if (concentration < 30) score += 15;\r\n    else if (concentration < 40) score += 10;\r\n    else if (concentration < 50) score += 5;\r\n    \r\n    return Math.min(score, 100);\r\n  };\r\n\r\n  // Phase 2: Enhanced analytics calculation functions\r\n  const calculateRetentionMetrics = (clients, analytics) => {\r\n    const now = new Date();\r\n    const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\r\n    const sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\r\n    const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\r\n    \r\n    const yearlyClients = clients.filter(c => new Date(c.created_at) <= oneYearAgo);\r\n    const activeYearlyClients = yearlyClients.filter(c => {\r\n      // Mock: assume client is active if they have recent activity\r\n      return new Date(c.updated_at || c.created_at) >= sixMonthsAgo;\r\n    });\r\n    \r\n    return {\r\n      yearlyRetention: yearlyClients.length > 0 ? (activeYearlyClients.length / yearlyClients.length) * 100 : 0,\r\n      quarterlyRetention: 85, // Mock data\r\n      monthlyRetention: 92,\r\n      churnRate: 8,\r\n      cohortAnalysis: [\r\n        { period: 'Q1 2024', retention: 88, clients: 45 },\r\n        { period: 'Q2 2024', retention: 92, clients: 52 },\r\n        { period: 'Q3 2024', retention: 85, clients: 48 },\r\n        { period: 'Q4 2024', retention: 90, clients: 55 }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const calculateBehaviorAnalysis = (clients, analytics) => {\r\n    const clientMetrics = analytics.clientMetrics || {};\r\n    const behaviors = {\r\n      earlyPayers: 0,\r\n      onTimePayers: 0,\r\n      latePayers: 0,\r\n      chronicLatePayers: 0\r\n    };\r\n    \r\n    Object.values(clientMetrics).forEach(client => {\r\n      const avgPaymentTime = client.averagePaymentTime || 30;\r\n      if (avgPaymentTime <= 15) behaviors.earlyPayers++;\r\n      else if (avgPaymentTime <= 30) behaviors.onTimePayers++;\r\n      else if (avgPaymentTime <= 60) behaviors.latePayers++;\r\n      else behaviors.chronicLatePayers++;\r\n    });\r\n    \r\n    return {\r\n      paymentPatterns: behaviors,\r\n      communicationPreferences: {\r\n        email: 65,\r\n        phone: 25,\r\n        inPerson: 10\r\n      },\r\n      engagementLevels: {\r\n        high: 30,\r\n        medium: 50,\r\n        low: 20\r\n      },\r\n      seasonalTrends: [\r\n        { month: 'Jan', activity: 85 },\r\n        { month: 'Feb', activity: 78 },\r\n        { month: 'Mar', activity: 92 },\r\n        { month: 'Apr', activity: 88 },\r\n        { month: 'May', activity: 95 },\r\n        { month: 'Jun', activity: 82 }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const calculateRiskAssessment = (clients, analytics) => {\r\n    const clientMetrics = analytics.clientMetrics || {};\r\n    const riskLevels = {\r\n      low: 0,\r\n      medium: 0,\r\n      high: 0,\r\n      critical: 0\r\n    };\r\n    \r\n    Object.values(clientMetrics).forEach(client => {\r\n      const paymentTime = client.averagePaymentTime || 30;\r\n      const revenue = client.totalRevenue || 0;\r\n      const invoiceCount = client.invoiceCount || 0;\r\n      \r\n      let riskScore = 0;\r\n      if (paymentTime > 60) riskScore += 3;\r\n      else if (paymentTime > 45) riskScore += 2;\r\n      else if (paymentTime > 30) riskScore += 1;\r\n      \r\n      if (revenue < 1000) riskScore += 2;\r\n      if (invoiceCount < 2) riskScore += 1;\r\n      \r\n      if (riskScore >= 5) riskLevels.critical++;\r\n      else if (riskScore >= 3) riskLevels.high++;\r\n      else if (riskScore >= 1) riskLevels.medium++;\r\n      else riskLevels.low++;\r\n    });\r\n    \r\n    return {\r\n      riskDistribution: riskLevels,\r\n      atRiskClients: Object.values(clientMetrics)\r\n        .filter(c => (c.averagePaymentTime || 30) > 45)\r\n        .slice(0, 5)\r\n        .map(c => ({\r\n          name: c.name || 'Unknown Client',\r\n          riskScore: Math.min(100, ((c.averagePaymentTime || 30) / 90) * 100),\r\n          lastPayment: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\r\n        })),\r\n      riskFactors: [\r\n        { factor: 'Late Payments', impact: 'High', percentage: 35 },\r\n        { factor: 'Low Engagement', impact: 'Medium', percentage: 25 },\r\n        { factor: 'Declining Revenue', impact: 'High', percentage: 20 },\r\n        { factor: 'Communication Issues', impact: 'Medium', percentage: 20 }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const calculatePredictiveInsights = (clients, analytics) => {\r\n    const totalRevenue = Object.values(analytics.clientMetrics || {})\r\n      .reduce((sum, client) => sum + client.totalRevenue, 0);\r\n    \r\n    return {\r\n      revenueForecasting: {\r\n        nextMonth: totalRevenue * 1.05,\r\n        nextQuarter: totalRevenue * 3.2,\r\n        nextYear: totalRevenue * 12.8,\r\n        confidence: 78\r\n      },\r\n      churnPrediction: {\r\n        likelyToChurn: 8,\r\n        churnRisk: 12,\r\n        preventionOpportunities: 15\r\n      },\r\n      growthOpportunities: [\r\n        { opportunity: 'Upsell Premium Services', potential: '$25,000', probability: 65 },\r\n        { opportunity: 'Cross-sell Additional Products', potential: '$18,000', probability: 45 },\r\n        { opportunity: 'Expand to New Markets', potential: '$50,000', probability: 35 }\r\n      ],\r\n      recommendations: [\r\n        'Focus on retaining high-value clients with payment delays',\r\n        'Implement automated follow-up for late payments',\r\n        'Develop loyalty program for top-performing clients',\r\n        'Investigate seasonal trends for better forecasting'\r\n      ]\r\n    };\r\n  };\r\n\r\n  // Handle drill-down functionality\r\n  const handleDrillDown = (widgetType, segment = null) => {\r\n    let data = null;\r\n    \r\n    switch (widgetType) {\r\n      case 'segmentation':\r\n        data = {\r\n          type: 'segmentation',\r\n          segment,\r\n          details: clientData.segmentation,\r\n          title: t('analytics:clientAnalytics.clientSegmentation')\r\n        };\r\n        break;\r\n      case 'topClients':\r\n        data = {\r\n          type: 'topClients',\r\n          details: clientData.topClients,\r\n          title: t('analytics:clientAnalytics.topClients')\r\n        };\r\n        break;\r\n      case 'paymentBehavior':\r\n        data = {\r\n          type: 'paymentBehavior',\r\n          details: clientData.paymentBehavior,\r\n          title: t('analytics:clientAnalytics.paymentBehavior')\r\n        };\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    \r\n    setDrillDownData(data);\r\n    setShowDrillDown(true);\r\n    setSelectedSegment(segment);\r\n    \r\n    if (onDrillDown) {\r\n      onDrillDown(data);\r\n    }\r\n  };\r\n\r\n  // Format currency\r\n  const formatCurrency = (amount) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount || 0);\r\n  };\r\n\r\n  // Format percentage\r\n  const formatPercentage = (value) => {\r\n    return `${(value || 0).toFixed(1)}%`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`${className} flex items-center justify-center h-64`}>\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">{t('analytics:clientAnalytics.loading.loadingClientAnalytics')}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`${className} bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6`}>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <AlertTriangle className=\"w-6 h-6 text-red-600\" />\r\n          <div>\r\n            <h3 className=\"text-red-800 dark:text-red-400 font-medium\">\r\n              {t('analytics:clientAnalytics.errors.errorLoadingData')}\r\n            </h3>\r\n            <p className=\"text-red-600 dark:text-red-300 text-sm mt-1\">{error}</p>\r\n          </div>\r\n        </div>\r\n        <button\r\n          onClick={loadClientAnalytics}\r\n          className=\"mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\r\n        >\r\n          {t('common:retry')}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={className}>\r\n      {/* Phase 2: Enhanced Analytics Controls */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-6\">\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n              {t('analytics:clientAnalytics.advancedAnalytics')}\r\n            </h2>\r\n            {lastUpdated && (\r\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\r\n                {t('analytics:common.lastUpdated')}: {lastUpdated.toLocaleTimeString()}\r\n              </p>\r\n            )}\r\n          </div>\r\n          \r\n          {/* View Selector */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\r\n              {[\r\n                { key: 'overview', label: t('analytics:clientAnalytics.overview'), icon: Users },\r\n                { key: 'retention', label: t('analytics:clientAnalytics.retention'), icon: Target },\r\n                { key: 'behavior', label: t('analytics:clientAnalytics.behavior'), icon: Activity },\r\n                { key: 'insights', label: t('analytics:clientAnalytics.insights'), icon: TrendingUp }\r\n              ].map(({ key, label, icon: Icon }) => (\r\n                <button\r\n                  key={key}\r\n                  onClick={() => handleViewChange(key)}\r\n                  className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                    activeView === key\r\n                      ? 'bg-white dark:bg-gray-600 text-blue-600 dark:text-blue-400 shadow-sm'\r\n                      : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\r\n                  }`}\r\n                >\r\n                  <Icon className=\"w-4 h-4\" />\r\n                  <span>{label}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n            \r\n            {/* Auto-refresh Controls */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <button\r\n                onClick={loadClientAnalytics}\r\n                disabled={loading}\r\n                className=\"p-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors\"\r\n                title={t('analytics:common.refresh')}\r\n              >\r\n                <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </button>\r\n              \r\n              <div className=\"relative\">\r\n                <select\r\n                  value={refreshInterval || ''}\r\n                  onChange={(e) => toggleAutoRefresh(Number(e.target.value) || null)}\r\n                  className=\"text-sm bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 text-gray-700 dark:text-gray-300\"\r\n                >\r\n                  <option value=\"\">{t('analytics:common.noAutoRefresh')}</option>\r\n                  <option value={30000}>30s</option>\r\n                  <option value={60000}>1m</option>\r\n                  <option value={300000}>5m</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Analytics Content Based on Active View */}\r\n      {activeView === 'overview' && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n        {/* Client Overview Widget */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              {t('analytics:clientAnalytics.clientOverview')}\r\n            </h3>\r\n            <Users className=\"w-5 h-5 text-blue-500\" />\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                {clientData.overview.totalClients || 0}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.totalClients')}</div>\r\n            </div>\r\n            \r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">\r\n                {clientData.overview.activeClients || 0}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.activeClients')}</div>\r\n            </div>\r\n            \r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">\r\n                {clientData.overview.newThisMonth || 0}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.newThisMonth')}</div>\r\n            </div>\r\n            \r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600\">\r\n                {formatPercentage(clientData.overview.retention)}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.retention')}</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-600\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {t('analytics:clientAnalytics.clientGrowth')}\r\n              </span>\r\n              <div className=\"flex items-center space-x-1\">\r\n                {clientData.overview.growth >= 0 ? (\r\n                  <TrendingUp className=\"w-4 h-4 text-green-500\" />\r\n                ) : (\r\n                  <TrendingDown className=\"w-4 h-4 text-red-500\" />\r\n                )}\r\n                <span className={`text-sm font-medium ${\r\n                  clientData.overview.growth >= 0 ? 'text-green-600' : 'text-red-600'\r\n                }`}>\r\n                  {formatPercentage(clientData.overview.growth)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Business Health Score Widget */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              {t('analytics:clientAnalytics.businessHealthScore')}\r\n            </h3>\r\n            <Award className=\"w-5 h-5 text-purple-500\" />\r\n          </div>\r\n          \r\n          <div className=\"text-center\">\r\n            <div className=\"mb-4\">\r\n              {clientData.healthScore >= 80 ? (\r\n                <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto\" />\r\n              ) : clientData.healthScore >= 60 ? (\r\n                <Target className=\"w-8 h-8 text-blue-600 mx-auto\" />\r\n              ) : clientData.healthScore >= 40 ? (\r\n                <Activity className=\"w-8 h-8 text-yellow-600 mx-auto\" />\r\n              ) : (\r\n                <AlertTriangle className=\"w-8 h-8 text-red-600 mx-auto\" />\r\n              )}\r\n            </div>\r\n            <div className={`text-4xl font-bold mb-2 ${\r\n              clientData.healthScore >= 80 ? 'text-green-600' :\r\n              clientData.healthScore >= 60 ? 'text-blue-600' :\r\n              clientData.healthScore >= 40 ? 'text-yellow-600' : 'text-red-600'\r\n            }`}>\r\n              {clientData.healthScore}/100\r\n            </div>\r\n                         <div className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\r\n               {clientData.healthScore >= 80 ? t('analytics:clientAnalytics.healthLevels.excellent') :\r\n                clientData.healthScore >= 60 ? t('analytics:clientAnalytics.healthLevels.good') :\r\n                clientData.healthScore >= 40 ? t('analytics:clientAnalytics.healthLevels.fair') : t('analytics:clientAnalytics.healthLevels.needsAttention')}\r\n             </div>\r\n            \r\n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 mb-4\">\r\n              <div\r\n                className={`h-3 rounded-full transition-all duration-500 ${\r\n                  clientData.healthScore >= 80 ? 'bg-green-500' :\r\n                  clientData.healthScore >= 60 ? 'bg-blue-500' :\r\n                  clientData.healthScore >= 40 ? 'bg-yellow-500' : 'bg-red-500'\r\n                }`}\r\n                style={{ width: `${clientData.healthScore}%` }}\r\n              />\r\n            </div>\r\n            \r\n                         <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n               {t('analytics:clientAnalytics.metrics.basedOnClientMetrics')}\r\n             </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Top Clients Widget */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              {t('analytics:clientAnalytics.topClients')}\r\n            </h3>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Star className=\"w-5 h-5 text-yellow-500\" />\r\n              <button\r\n                onClick={() => handleDrillDown('topClients')}\r\n                className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\r\n              >\r\n                {t('analytics:clientAnalytics.actions.viewAll')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"space-y-3\">\r\n            {clientData.topClients.slice(0, 5).map((client, index) => (\r\n              <div key={client.client?.id || index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\r\n                    <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\r\n                      {client.rank || index + 1}\r\n                    </span>\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"font-medium text-gray-900 dark:text-white\">\r\n                      {client.client?.full_name || client.client?.name || `Client ${index + 1}`}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">\r\n                      {client.invoiceCount || 0} {t('analytics:clientAnalytics.metrics.invoices')}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"font-semibold text-gray-900 dark:text-white\">\r\n                    {formatCurrency(client.totalRevenue || 0)}\r\n                  </div>\r\n                                      <div className=\"text-sm text-gray-500\">\r\n                      {client.averagePaymentTime || 0} {t('analytics:clientAnalytics.metrics.avgDays')}\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Drill-down modal */}\r\n      {showDrillDown && drillDownData && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                  {drillDownData.title}\r\n                </h2>\r\n                <button\r\n                  onClick={() => setShowDrillDown(false)}\r\n                  className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                >\r\n                  Ô£ò\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"p-6\">\r\n              {drillDownData.type === 'topClients' && (\r\n                <div className=\"space-y-4\">\r\n                  {drillDownData.details.map((client, index) => (\r\n                    <div key={client.client?.id || index} className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                        <div>\r\n                          <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.metrics.client')}</div>\r\n                          <div className=\"font-medium\">{client.client?.full_name || client.client?.name}</div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.metrics.totalRevenue')}</div>\r\n                          <div className=\"font-medium\">{formatCurrency(client.totalRevenue)}</div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.metrics.invoiceCount')}</div>\r\n                          <div className=\"font-medium\">{client.invoiceCount}</div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"text-sm text-gray-500\">{t('analytics:clientAnalytics.metrics.avgPaymentTime')}</div>\r\n                          <div className=\"font-medium\">{client.averagePaymentTime} {t('analytics:clientAnalytics.metrics.days')}</div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* \r\n      // Phase 2: Retention Analytics View \r\n      {activeView === 'retention' && (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  {t('analytics:clientAnalytics.yearlyRetention')}\r\n                </h3>\r\n                <Target className=\"w-5 h-5 text-green-500\" />\r\n              </div>\r\n              <div className=\"text-3xl font-bold text-green-600\">\r\n                {formatPercentage(clientData.retentionMetrics?.yearlyRetention || 0)}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  {t('analytics:clientAnalytics.quarterlyRetention')}\r\n                </h3>\r\n                <TrendingUp className=\"w-5 h-5 text-blue-500\" />\r\n              </div>\r\n              <div className=\"text-3xl font-bold text-blue-600\">\r\n                {formatPercentage(clientData.retentionMetrics?.quarterlyRetention || 0)}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  {t('analytics:clientAnalytics.churnRate')}\r\n                </h3>\r\n                <AlertTriangle className=\"w-5 h-5 text-red-500\" />\r\n              </div>\r\n              <div className=\"text-3xl font-bold text-red-600\">\r\n                {formatPercentage(clientData.retentionMetrics?.churnRate || 0)}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  {t('analytics:clientAnalytics.monthlyRetention')}\r\n                </h3>\r\n                <Activity className=\"w-5 h-5 text-purple-500\" />\r\n              </div>\r\n              <div className=\"text-3xl font-bold text-purple-600\">\r\n                {formatPercentage(clientData.retentionMetrics?.monthlyRetention || 0)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      // Phase 2: Behavior Analytics View\r\n      {activeView === 'behavior' && (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                {t('analytics:clientAnalytics.paymentPatterns')}\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {Object.entries(clientData.behaviorAnalysis?.paymentPatterns || {}).map(([key, value]) => (\r\n                  <div key={key} className=\"flex justify-between items-center\">\r\n                    <span className=\"text-gray-600 dark:text-gray-400 capitalize\">\r\n                      {key.replace(/([A-Z])/g, ' $1').trim()}\r\n                    </span>\r\n                    <span className=\"font-medium text-gray-900 dark:text-white\">{value}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                {t('analytics:clientAnalytics.engagementLevels')}\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {Object.entries(clientData.behaviorAnalysis?.engagementLevels || {}).map(([key, value]) => (\r\n                  <div key={key} className=\"flex justify-between items-center\">\r\n                    <span className=\"text-gray-600 dark:text-gray-400 capitalize\">{key}</span>\r\n                    <span className=\"font-medium text-gray-900 dark:text-white\">{value}%</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      // Phase 2: Predictive Insights View\r\n      {activeView === 'insights' && (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                {t('analytics:clientAnalytics.revenueForecasting')}\r\n              </h3>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-gray-600 dark:text-gray-400\">\r\n                    {t('analytics:clientAnalytics.nextMonth')}\r\n                  </span>\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                    {formatCurrency(clientData.predictiveInsights?.revenueForecasting?.nextMonth || 0)}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-gray-600 dark:text-gray-400\">\r\n                    {t('analytics:clientAnalytics.nextQuarter')}\r\n                  </span>\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                    {formatCurrency(clientData.predictiveInsights?.revenueForecasting?.nextQuarter || 0)}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-gray-600 dark:text-gray-400\">\r\n                    {t('analytics:clientAnalytics.confidence')}\r\n                  </span>\r\n                  <span className=\"font-medium text-green-600\">\r\n                    {clientData.predictiveInsights?.revenueForecasting?.confidence || 0}%\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                {t('analytics:clientAnalytics.recommendations')}\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {(clientData.predictiveInsights?.recommendations || []).map((rec, index) => (\r\n                  <div key={index} className=\"flex items-start space-x-2\">\r\n                    <CheckCircle className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" />\r\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">{rec}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}      */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientAnalyticsWidgets;","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\ClientAnalyticsWidgets.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\ComparativeAnalytics.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowDownRight' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Equal' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":13,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Minus,\n  Calendar,\n  BarChart3,\n  ArrowUpRight,\n  ArrowDownRight,\n  Equal,\n} from 'lucide-react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport financialService from '@lib/financialService';\nimport clientService from '@lib/clientService';\n\nconst ComparativeAnalytics = ({\n  currentDateRange,\n  comparisonType = 'yoy', // 'yoy', 'mom', 'qoq'\n  className = '',\n}) => {\n  const { t } = useTranslation(['analytics', 'dashboard']);\n  const [loading, setLoading] = useState(true);\n  const [currentData, setCurrentData] = useState(null);\n  const [comparisonData, setComparisonData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Calculate comparison date range based on type\n  const comparisonDateRange = useMemo(() => {\n    if (!currentDateRange) return null;\n\n    const currentStart = new Date(currentDateRange.start);\n    const currentEnd = new Date(currentDateRange.end);\n    const daysDiff = Math.ceil((currentEnd - currentStart) / (1000 * 60 * 60 * 24));\n\n    let comparisonStart, comparisonEnd;\n\n    switch (comparisonType) {\n      case 'yoy': // Year over Year\n        comparisonStart = new Date(currentStart);\n        comparisonStart.setFullYear(comparisonStart.getFullYear() - 1);\n        comparisonEnd = new Date(currentEnd);\n        comparisonEnd.setFullYear(comparisonEnd.getFullYear() - 1);\n        break;\n\n      case 'mom': // Month over Month\n        comparisonStart = new Date(currentStart);\n        comparisonStart.setMonth(comparisonStart.getMonth() - 1);\n        comparisonEnd = new Date(currentEnd);\n        comparisonEnd.setMonth(comparisonEnd.getMonth() - 1);\n        break;\n\n      case 'qoq': // Quarter over Quarter\n        comparisonStart = new Date(currentStart);\n        comparisonStart.setMonth(comparisonStart.getMonth() - 3);\n        comparisonEnd = new Date(currentEnd);\n        comparisonEnd.setMonth(comparisonEnd.getMonth() - 3);\n        break;\n\n      default:\n        comparisonStart = new Date(currentStart);\n        comparisonStart.setDate(comparisonStart.getDate() - daysDiff);\n        comparisonEnd = new Date(currentStart);\n        comparisonEnd.setDate(comparisonEnd.getDate() - 1);\n    }\n\n    return {\n      start: comparisonStart.toISOString().split('T')[0],\n      end: comparisonEnd.toISOString().split('T')[0],\n    };\n  }, [currentDateRange, comparisonType]);\n\n  // Load data for both periods\n  useEffect(() => {\n    if (!currentDateRange || !comparisonDateRange) return;\n\n    const loadComparativeData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const [currentFinancial, comparisonFinancial, currentClients, comparisonClients] =\n          await Promise.all([\n            financialService.getFinancialOverview(\n              new Date(currentDateRange.start),\n              new Date(currentDateRange.end),\n            ),\n            financialService.getFinancialOverview(\n              new Date(comparisonDateRange.start),\n              new Date(comparisonDateRange.end),\n            ),\n            clientService.getClientMetrics\n              ? clientService.getClientMetrics(\n                  new Date(currentDateRange.start),\n                  new Date(currentDateRange.end),\n                )\n              : Promise.resolve({\n                  success: true,\n                  data: { total: 38, active: 35, newThisMonth: 3 },\n                }),\n            clientService.getClientMetrics\n              ? clientService.getClientMetrics(\n                  new Date(comparisonDateRange.start),\n                  new Date(comparisonDateRange.end),\n                )\n              : Promise.resolve({\n                  success: true,\n                  data: { total: 35, active: 32, newThisMonth: 2 },\n                }),\n          ]);\n\n        setCurrentData({\n          financial: currentFinancial.success ? currentFinancial.data : null,\n          clients: currentClients.success ? currentClients.data : null,\n        });\n\n        setComparisonData({\n          financial: comparisonFinancial.success ? comparisonFinancial.data : null,\n          clients: comparisonClients.success ? comparisonClients.data : null,\n        });\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadComparativeData();\n  }, [currentDateRange, comparisonDateRange]);\n\n  // Calculate percentage change\n  const calculateChange = (current, previous) => {\n    if (!previous || previous === 0) return { value: 0, percentage: 0 };\n    const change = current - previous;\n    const percentage = (change / previous) * 100;\n    return { value: change, percentage };\n  };\n\n  // Get trend icon and color\n  const getTrendIndicator = percentage => {\n    if (percentage > 0) {\n      return {\n        icon: TrendingUp,\n        color: 'text-green-600',\n        bgColor: 'bg-green-50',\n        borderColor: 'border-green-200',\n      };\n    } else if (percentage < 0) {\n      return {\n        icon: TrendingDown,\n        color: 'text-red-600',\n        bgColor: 'bg-red-50',\n        borderColor: 'border-red-200',\n      };\n    } else {\n      return {\n        icon: Minus,\n        color: 'text-gray-600',\n        bgColor: 'bg-gray-50',\n        borderColor: 'border-gray-200',\n      };\n    }\n  };\n\n  // Format comparison period label\n  const getComparisonLabel = () => {\n    switch (comparisonType) {\n      case 'yoy':\n        return t('analytics:dashboard.compare.previousYear');\n      case 'mom':\n        return t('analytics:dashboard.lastMonth');\n      case 'qoq':\n        return t('analytics:dashboard.lastQuarter');\n      default:\n        return t('analytics:dashboard.previousPeriod');\n    }\n  };\n\n  // Comparative metrics component\n  const ComparativeMetric = ({\n    title,\n    currentValue,\n    previousValue,\n    format = 'currency',\n    icon: Icon,\n  }) => {\n    const change = calculateChange(currentValue || 0, previousValue || 0);\n    const trend = getTrendIndicator(change.percentage);\n    const TrendIcon = trend.icon;\n\n    const formatValue = value => {\n      if (format === 'currency') {\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'EUR',\n        }).format(value || 0);\n      } else if (format === 'percentage') {\n        return `${(value || 0).toFixed(1)}%`;\n      } else {\n        return (value || 0).toLocaleString();\n      }\n    };\n\n    return (\n      <div className={`p-4 bg-white rounded-lg border ${trend.borderColor} ${trend.bgColor}`}>\n        <div className='flex items-center justify-between mb-2'>\n          <div className='flex items-center space-x-2'>\n            {Icon && <Icon className='h-5 w-5 text-gray-600' />}\n            <span className='text-sm font-medium text-gray-700'>{title}</span>\n          </div>\n          <div className={`flex items-center space-x-1 ${trend.color}`}>\n            <TrendIcon className='h-4 w-4' />\n            <span className='text-sm font-semibold'>{Math.abs(change.percentage).toFixed(1)}%</span>\n          </div>\n        </div>\n\n        <div className='space-y-1'>\n          <div className='flex justify-between items-center'>\n            <span className='text-xs text-gray-500'>{t('analytics:dashboard.currentPeriod')}</span>\n            <span className='text-lg font-bold text-gray-900'>{formatValue(currentValue)}</span>\n          </div>\n          <div className='flex justify-between items-center'>\n            <span className='text-xs text-gray-500'>{getComparisonLabel()}</span>\n            <span className='text-sm text-gray-600'>{formatValue(previousValue)}</span>\n          </div>\n          <div className='flex justify-between items-center pt-1 border-t border-gray-100'>\n            <span className='text-xs text-gray-500'>Change</span>\n            <span className={`text-sm font-semibold ${trend.color}`}>\n              {change.value >= 0 ? '+' : ''}\n              {formatValue(change.value)}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center p-8 ${className}`}>\n        <div className='text-center'>\n          <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2'></div>\n          <p className='text-sm text-gray-600'>{t('analytics:common.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`flex items-center justify-center p-8 ${className}`}>\n        <div className='text-center'>\n          <p className='text-sm text-red-600 mb-2'>{t('analytics:common.error')}</p>\n          <p className='text-xs text-gray-500'>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentData || !comparisonData) {\n    return (\n      <div className={`flex items-center justify-center p-8 ${className}`}>\n        <p className='text-sm text-gray-600'>{t('analytics:common.noData')}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h3 className='text-lg font-semibold text-gray-900'>\n            {t('analytics:charts.comparison')}\n          </h3>\n          <p className='text-sm text-gray-600'>{t('analytics:charts.comparisonDesc')}</p>\n        </div>\n        <div className='flex items-center space-x-2 text-sm text-gray-500'>\n          <Calendar className='h-4 w-4' />\n          <span>{comparisonType.toUpperCase()} Analysis</span>\n        </div>\n      </div>\n\n      {/* Comparative Metrics Grid */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\n        <ComparativeMetric\n          title={t('analytics:totalRevenue')}\n          currentValue={currentData.financial?.totalRevenue}\n          previousValue={comparisonData.financial?.totalRevenue}\n          format='currency'\n          icon={BarChart3}\n        />\n\n        <ComparativeMetric\n          title={t('analytics:totalExpenses')}\n          currentValue={currentData.financial?.totalExpenses}\n          previousValue={comparisonData.financial?.totalExpenses}\n          format='currency'\n          icon={TrendingDown}\n        />\n\n        <ComparativeMetric\n          title={t('analytics:activeClients')}\n          currentValue={currentData.clients?.active}\n          previousValue={comparisonData.clients?.active}\n          format='number'\n          icon={TrendingUp}\n        />\n\n        <ComparativeMetric\n          title={t('analytics:profitMargin')}\n          currentValue={currentData.financial?.profitMargin}\n          previousValue={comparisonData.financial?.profitMargin}\n          format='percentage'\n          icon={ArrowUpRight}\n        />\n      </div>\n\n      {/* Period Labels */}\n      <div className='flex items-center justify-center space-x-8 py-4 bg-gray-50 rounded-lg'>\n        <div className='text-center'>\n          <div className='text-sm font-medium text-gray-900'>\n            {t('analytics:dashboard.currentPeriod')}\n          </div>\n          <div className='text-xs text-gray-500'>\n            {new Date(currentDateRange.start).toLocaleDateString()} -{' '}\n            {new Date(currentDateRange.end).toLocaleDateString()}\n          </div>\n        </div>\n        <div className='text-gray-300'>vs</div>\n        <div className='text-center'>\n          <div className='text-sm font-medium text-gray-900'>{getComparisonLabel()}</div>\n          <div className='text-xs text-gray-500'>\n            {new Date(comparisonDateRange.start).toLocaleDateString()} -{' '}\n            {new Date(comparisonDateRange.end).toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ComparativeAnalytics;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\ComparativeAnalytics.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\EnhancedKPICard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\FinancialForecast.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":30,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateForecastData'. Either include it or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [isSignedIn, user?.id, dateRange?.start, dateRange?.end, generateForecastData, forecastPeriod, confidenceLevel]","fix":{"range":[3245,3311],"text":"[isSignedIn, user?.id, dateRange?.start, dateRange?.end, generateForecastData, forecastPeriod, confidenceLevel]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'now' is assigned a value but never used.","line":145,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'monthKey' is assigned a value but never used.","line":203,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseGrowth' is defined but never used.","line":260,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth, useUser } from '@clerk/clerk-react';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Calendar,\n  Target,\n  AlertTriangle,\n  BarChart3,\n  LineChart,\n  RefreshCw,\n  Settings,\n  Download,\n  Filter,\n} from 'lucide-react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { invoiceAnalyticsService } from '../../services/invoiceAnalyticsService';\nimport { Logger } from '../../utils/logger';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\nconst FinancialForecast = ({ className = '', dateRange }) => {\n  const { t } = useTranslation(['analytics', 'common']);\n  const { isSignedIn } = useAuth();\n  const { user } = useUser();\n\n  // State management\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [forecastData, setForecastData] = useState({\n    revenue: {\n      historical: [],\n      forecast: [],\n      confidence: 0,\n      trends: {},\n    },\n    expenses: {\n      historical: [],\n      forecast: [],\n      categories: {},\n    },\n    cashFlow: {\n      historical: [],\n      forecast: [],\n      projections: {},\n    },\n    scenarios: {\n      optimistic: {},\n      realistic: {},\n      pessimistic: {},\n    },\n    kpis: {\n      growthRate: 0,\n      burnRate: 0,\n      runway: 0,\n      breakEven: null,\n    },\n  });\n\n  const [activeTab, setActiveTab] = useState('revenue'); // revenue, expenses, cashflow, scenarios\n  const [forecastPeriod, setForecastPeriod] = useState(12); // months\n  const [confidenceLevel, setConfidenceLevel] = useState(80); // percentage\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [autoRefresh, setAutoRefresh] = useState(false);\n\n  // Load forecast data\n  const loadForecastData = useCallback(async () => {\n    if (!isSignedIn || !user?.id) {\n      setError('User not authenticated');\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const startDate =\n        dateRange?.start?.toISOString?.()?.split('T')[0] ||\n        new Date(new Date().getFullYear() - 1, 0, 1).toISOString().split('T')[0];\n      const endDate =\n        dateRange?.end?.toISOString?.()?.split('T')[0] || new Date().toISOString().split('T')[0];\n\n      // Get historical analytics data\n      const analyticsResult = await invoiceAnalyticsService.getAnalytics(startDate, endDate);\n\n      if (!analyticsResult.success) {\n        throw new Error(analyticsResult.error);\n      }\n\n      const analytics = analyticsResult.data;\n\n      // Generate forecast data based on historical patterns\n      const forecast = generateForecastData(analytics, forecastPeriod, confidenceLevel);\n\n      setForecastData(forecast);\n      setLastUpdated(new Date());\n    } catch (err) {\n      Logger.error('Error loading forecast data:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [dateRange, isSignedIn, user?.id, forecastPeriod, confidenceLevel]);\n\n  useEffect(() => {\n    loadForecastData();\n  }, [loadForecastData]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(loadForecastData, 300000); // 5 minutes\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, loadForecastData]);\n\n  // Generate forecast data from historical analytics\n  const generateForecastData = (analytics, months, confidence) => {\n    const now = new Date();\n    const monthlyData = generateMonthlyHistoricalData(analytics);\n\n    // Calculate growth trends\n    const revenueGrowth = calculateGrowthRate(monthlyData.revenue);\n    const expenseGrowth = calculateGrowthRate(monthlyData.expenses);\n\n    // Generate forecasts\n    const revenueForecast = generateRevenueForecast(monthlyData.revenue, revenueGrowth, months);\n    const expenseForecast = generateExpenseForecast(monthlyData.expenses, expenseGrowth, months);\n    const cashFlowForecast = generateCashFlowForecast(revenueForecast, expenseForecast);\n\n    // Generate scenarios\n    const scenarios = generateScenarios(revenueForecast, expenseForecast, revenueGrowth);\n\n    // Calculate KPIs\n    const kpis = calculateForecastKPIs(revenueForecast, expenseForecast, monthlyData);\n\n    return {\n      revenue: {\n        historical: monthlyData.revenue,\n        forecast: revenueForecast,\n        confidence: confidence,\n        trends: {\n          growthRate: revenueGrowth,\n          seasonality: calculateSeasonality(monthlyData.revenue),\n          volatility: calculateVolatility(monthlyData.revenue),\n        },\n      },\n      expenses: {\n        historical: monthlyData.expenses,\n        forecast: expenseForecast,\n        categories: analytics.expenseCategories || {},\n      },\n      cashFlow: {\n        historical: monthlyData.cashFlow,\n        forecast: cashFlowForecast,\n        projections: {\n          cumulative: calculateCumulativeCashFlow(cashFlowForecast),\n          breakEven: findBreakEvenPoint(cashFlowForecast),\n        },\n      },\n      scenarios,\n      kpis,\n    };\n  };\n\n  // Helper functions for forecast calculations\n  const generateMonthlyHistoricalData = analytics => {\n    const months = [];\n    const revenue = [];\n    const expenses = [];\n    const cashFlow = [];\n\n    // Generate last 12 months of data\n    for (let i = 11; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      const monthKey = date.toISOString().slice(0, 7);\n\n      months.push(date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }));\n\n      // Mock historical data based on analytics\n      const baseRevenue = (analytics.totalRevenue || 50000) / 12;\n      const monthRevenue = baseRevenue * (0.8 + Math.random() * 0.4); // ┬▒20% variation\n      const monthExpenses = monthRevenue * (0.6 + Math.random() * 0.2); // 60-80% of revenue\n\n      revenue.push(monthRevenue);\n      expenses.push(monthExpenses);\n      cashFlow.push(monthRevenue - monthExpenses);\n    }\n\n    return { months, revenue, expenses, cashFlow };\n  };\n\n  const calculateGrowthRate = data => {\n    if (data.length < 2) return 0;\n\n    const recent = data.slice(-3).reduce((a, b) => a + b, 0) / 3;\n    const older = data.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n\n    return older > 0 ? ((recent - older) / older) * 100 : 0;\n  };\n\n  const generateRevenueForecast = (historical, growthRate, months) => {\n    const forecast = [];\n    const lastValue = historical[historical.length - 1] || 0;\n    const monthlyGrowth = growthRate / 100 / 12; // Convert annual to monthly\n\n    for (let i = 1; i <= months; i++) {\n      const projected = lastValue * Math.pow(1 + monthlyGrowth, i);\n      const seasonality = 1 + 0.1 * Math.sin((i * Math.PI) / 6); // Seasonal variation\n      forecast.push(projected * seasonality);\n    }\n\n    return forecast;\n  };\n\n  const generateExpenseForecast = (historical, growthRate, months) => {\n    const forecast = [];\n    const lastValue = historical[historical.length - 1] || 0;\n    const monthlyGrowth = (growthRate * 0.8) / 100 / 12; // Expenses grow slower\n\n    for (let i = 1; i <= months; i++) {\n      const projected = lastValue * Math.pow(1 + monthlyGrowth, i);\n      forecast.push(projected);\n    }\n\n    return forecast;\n  };\n\n  const generateCashFlowForecast = (revenue, expenses) => {\n    return revenue.map((rev, index) => rev - (expenses[index] || 0));\n  };\n\n  const generateScenarios = (revenueForecast, expenseForecast, baseGrowth) => {\n    const optimisticRevenue = revenueForecast.map(val => val * 1.2);\n    const pessimisticRevenue = revenueForecast.map(val => val * 0.8);\n\n    return {\n      optimistic: {\n        revenue: optimisticRevenue,\n        expenses: expenseForecast,\n        cashFlow: generateCashFlowForecast(optimisticRevenue, expenseForecast),\n        probability: 25,\n      },\n      realistic: {\n        revenue: revenueForecast,\n        expenses: expenseForecast,\n        cashFlow: generateCashFlowForecast(revenueForecast, expenseForecast),\n        probability: 50,\n      },\n      pessimistic: {\n        revenue: pessimisticRevenue,\n        expenses: expenseForecast,\n        cashFlow: generateCashFlowForecast(pessimisticRevenue, expenseForecast),\n        probability: 25,\n      },\n    };\n  };\n\n  const calculateForecastKPIs = (revenue, expenses, historical) => {\n    const avgRevenue = revenue.reduce((a, b) => a + b, 0) / revenue.length;\n    const avgExpenses = expenses.reduce((a, b) => a + b, 0) / expenses.length;\n    const avgCashFlow = avgRevenue - avgExpenses;\n\n    const currentCash = 100000; // Mock current cash position\n    const runway = avgCashFlow > 0 ? Infinity : Math.abs(currentCash / avgCashFlow);\n\n    return {\n      growthRate: calculateGrowthRate(historical.revenue),\n      burnRate: avgExpenses,\n      runway: runway === Infinity ? null : runway,\n      breakEven: findBreakEvenPoint(generateCashFlowForecast(revenue, expenses)),\n    };\n  };\n\n  const calculateSeasonality = data => {\n    // Simple seasonality calculation\n    const quarters = [0, 0, 0, 0];\n    data.forEach((value, index) => {\n      quarters[index % 4] += value;\n    });\n    const avg = quarters.reduce((a, b) => a + b, 0) / 4;\n    return quarters.map(q => ((q - avg) / avg) * 100);\n  };\n\n  const calculateVolatility = data => {\n    const mean = data.reduce((a, b) => a + b, 0) / data.length;\n    const variance = data.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / data.length;\n    return (Math.sqrt(variance) / mean) * 100;\n  };\n\n  const calculateCumulativeCashFlow = cashFlow => {\n    let cumulative = 0;\n    return cashFlow.map(cf => (cumulative += cf));\n  };\n\n  const findBreakEvenPoint = cashFlow => {\n    for (let i = 0; i < cashFlow.length; i++) {\n      if (cashFlow[i] > 0) return i + 1;\n    }\n    return null;\n  };\n\n  // Utility functions\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = value => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  // Chart configurations\n  const getRevenueChartData = () => {\n    const labels = [...Array(12)]\n      .map((_, i) => {\n        const date = new Date();\n        date.setMonth(date.getMonth() - 11 + i);\n        return date.toLocaleDateString('en-US', { month: 'short' });\n      })\n      .concat(\n        [...Array(forecastPeriod)].map((_, i) => {\n          const date = new Date();\n          date.setMonth(date.getMonth() + 1 + i);\n          return date.toLocaleDateString('en-US', { month: 'short' });\n        }),\n      );\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: t('analytics:forecast.historicalRevenue'),\n          data: [...forecastData.revenue.historical, ...Array(forecastPeriod).fill(null)],\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          fill: true,\n          tension: 0.4,\n        },\n        {\n          label: t('analytics:forecast.forecastRevenue'),\n          data: [...Array(12).fill(null), ...forecastData.revenue.forecast],\n          borderColor: 'rgb(16, 185, 129)',\n          backgroundColor: 'rgba(16, 185, 129, 0.1)',\n          borderDash: [5, 5],\n          fill: true,\n          tension: 0.4,\n        },\n      ],\n    };\n  };\n\n  const getScenarioChartData = () => {\n    const labels = [...Array(forecastPeriod)].map((_, i) => {\n      const date = new Date();\n      date.setMonth(date.getMonth() + 1 + i);\n      return date.toLocaleDateString('en-US', { month: 'short' });\n    });\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: t('analytics:forecast.optimistic'),\n          data: forecastData.scenarios.optimistic.revenue || [],\n          borderColor: 'rgb(34, 197, 94)',\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\n          fill: false,\n        },\n        {\n          label: t('analytics:forecast.realistic'),\n          data: forecastData.scenarios.realistic.revenue || [],\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          fill: false,\n        },\n        {\n          label: t('analytics:forecast.pessimistic'),\n          data: forecastData.scenarios.pessimistic.revenue || [],\n          borderColor: 'rgb(239, 68, 68)',\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\n          fill: false,\n        },\n      ],\n    };\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: context => {\n            return `${context.dataset.label}: ${formatCurrency(context.parsed.y)}`;\n          },\n        },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          callback: value => formatCurrency(value),\n        },\n      },\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false,\n    },\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className} flex items-center justify-center h-64`}>\n        <div className='flex items-center space-x-3'>\n          <RefreshCw className='w-6 h-6 animate-spin text-blue-500' />\n          <span className='text-gray-600 dark:text-gray-400'>\n            {t('analytics:forecast.loadingForecast')}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div\n        className={`${className} bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6`}\n      >\n        <div className='flex items-center space-x-3'>\n          <AlertTriangle className='w-6 h-6 text-red-600' />\n          <div>\n            <h3 className='text-red-800 dark:text-red-400 font-medium'>\n              {t('analytics:forecast.errorLoadingForecast')}\n            </h3>\n            <p className='text-red-600 dark:text-red-300 text-sm mt-1'>{error}</p>\n          </div>\n        </div>\n        <button\n          onClick={loadForecastData}\n          className='mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'\n        >\n          {t('common:retry')}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {/* Header with Controls */}\n      <div className='bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-6'>\n        <div className='flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0'>\n          <div>\n            <h2 className='text-xl font-semibold text-gray-900 dark:text-white'>\n              {t('analytics:forecast.financialForecast')}\n            </h2>\n            {lastUpdated && (\n              <p className='text-sm text-gray-500 dark:text-gray-400 mt-1'>\n                {t('analytics:common.lastUpdated')}: {lastUpdated.toLocaleTimeString()}\n              </p>\n            )}\n          </div>\n\n          <div className='flex items-center space-x-4'>\n            {/* Forecast Period Selector */}\n            <div className='flex items-center space-x-2'>\n              <Calendar className='w-4 h-4 text-gray-500' />\n              <select\n                value={forecastPeriod}\n                onChange={e => setForecastPeriod(Number(e.target.value))}\n                className='text-sm bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1'\n              >\n                <option value={6}>6 {t('analytics:forecast.months')}</option>\n                <option value={12}>12 {t('analytics:forecast.months')}</option>\n                <option value={18}>18 {t('analytics:forecast.months')}</option>\n                <option value={24}>24 {t('analytics:forecast.months')}</option>\n              </select>\n            </div>\n\n            {/* Confidence Level */}\n            <div className='flex items-center space-x-2'>\n              <Target className='w-4 h-4 text-gray-500' />\n              <select\n                value={confidenceLevel}\n                onChange={e => setConfidenceLevel(Number(e.target.value))}\n                className='text-sm bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1'\n              >\n                <option value={70}>70% {t('analytics:forecast.confidence')}</option>\n                <option value={80}>80% {t('analytics:forecast.confidence')}</option>\n                <option value={90}>90% {t('analytics:forecast.confidence')}</option>\n                <option value={95}>95% {t('analytics:forecast.confidence')}</option>\n              </select>\n            </div>\n\n            {/* Auto-refresh Toggle */}\n            <button\n              onClick={() => setAutoRefresh(!autoRefresh)}\n              className={`p-2 rounded-lg transition-colors ${\n                autoRefresh\n                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'\n                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n              }`}\n              title={t('analytics:forecast.autoRefresh')}\n            >\n              <RefreshCw className={`w-4 h-4 ${autoRefresh ? 'animate-spin' : ''}`} />\n            </button>\n\n            {/* Manual Refresh */}\n            <button\n              onClick={loadForecastData}\n              disabled={loading}\n              className='p-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors'\n              title={t('analytics:common.refresh')}\n            >\n              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n            </button>\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className='flex space-x-1 mt-6 bg-gray-100 dark:bg-gray-700 rounded-lg p-1'>\n          {[\n            { key: 'revenue', label: t('analytics:forecast.revenue'), icon: TrendingUp },\n            { key: 'expenses', label: t('analytics:forecast.expenses'), icon: TrendingDown },\n            { key: 'cashflow', label: t('analytics:forecast.cashFlow'), icon: DollarSign },\n            { key: 'scenarios', label: t('analytics:forecast.scenarios'), icon: BarChart3 },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setActiveTab(key)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                activeTab === key\n                  ? 'bg-white dark:bg-gray-600 text-blue-600 dark:text-blue-400 shadow-sm'\n                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              <Icon className='w-4 h-4' />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* KPI Cards */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6'>\n        <div className='bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700'>\n          <div className='flex items-center justify-between mb-2'>\n            <h3 className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {t('analytics:forecast.growthRate')}\n            </h3>\n            <TrendingUp className='w-4 h-4 text-green-500' />\n          </div>\n          <div className='text-2xl font-bold text-gray-900 dark:text-white'>\n            {formatPercentage(forecastData.kpis.growthRate)}\n          </div>\n        </div>\n\n        <div className='bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700'>\n          <div className='flex items-center justify-between mb-2'>\n            <h3 className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {t('analytics:forecast.burnRate')}\n            </h3>\n            <TrendingDown className='w-4 h-4 text-red-500' />\n          </div>\n          <div className='text-2xl font-bold text-gray-900 dark:text-white'>\n            {formatCurrency(forecastData.kpis.burnRate)}\n          </div>\n        </div>\n\n        <div className='bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700'>\n          <div className='flex items-center justify-between mb-2'>\n            <h3 className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {t('analytics:forecast.runway')}\n            </h3>\n            <Calendar className='w-4 h-4 text-blue-500' />\n          </div>\n          <div className='text-2xl font-bold text-gray-900 dark:text-white'>\n            {forecastData.kpis.runway ? `${Math.round(forecastData.kpis.runway)}m` : 'Ôê×'}\n          </div>\n        </div>\n\n        <div className='bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700'>\n          <div className='flex items-center justify-between mb-2'>\n            <h3 className='text-sm font-medium text-gray-600 dark:text-gray-400'>\n              {t('analytics:forecast.confidence')}\n            </h3>\n            <Target className='w-4 h-4 text-purple-500' />\n          </div>\n          <div className='text-2xl font-bold text-gray-900 dark:text-white'>{confidenceLevel}%</div>\n        </div>\n      </div>\n\n      {/* Chart Content */}\n      <div className='bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700'>\n        <div className='h-96'>\n          {activeTab === 'revenue' && <Line data={getRevenueChartData()} options={chartOptions} />}\n\n          {activeTab === 'scenarios' && (\n            <Line data={getScenarioChartData()} options={chartOptions} />\n          )}\n\n          {(activeTab === 'expenses' || activeTab === 'cashflow') && (\n            <div className='flex items-center justify-center h-full'>\n              <div className='text-center'>\n                <BarChart3 className='w-12 h-12 text-gray-400 mx-auto mb-4' />\n                <p className='text-gray-600 dark:text-gray-400'>\n                  {t('analytics:forecast.chartComingSoon')}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialForecast;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\InteractiveFinancialCharts.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Scatter' is defined but never used.","line":17,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowTrendingDownIcon' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowsPointingOutIcon' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeIcon' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":54,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onPeriodChange' is defined but never used.","line":54,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setDateRange' is assigned a value but never used.","line":68,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercentage' is assigned a value but never used.","line":112,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n  TimeScale,\n} from 'chart.js';\nimport { Line, Bar, Doughnut, Scatter } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport {\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  ArrowsPointingOutIcon,\n  FunnelIcon,\n  CalendarIcon,\n  ChartBarIcon,\n  EyeIcon,\n  ArrowDownTrayIcon,\n  CursorArrowRaysIcon,\n  MagnifyingGlassIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/24/outline';\nimport financialService from '@lib/financialService';\nimport Logger from '@utils/Logger';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n  TimeScale,\n  zoomPlugin,\n  annotationPlugin,\n);\n\nconst InteractiveFinancialCharts = ({ data, period = 'month', onPeriodChange, className = '' }) => {\n  const { t, i18n } = useTranslation(['analytics', 'dashboard']);\n\n  // States\n  const [loading, setLoading] = useState(false);\n  const [selectedChart, setSelectedChart] = useState('overview');\n  const [chartFilters, setChartFilters] = useState({\n    showIncome: true,\n    showExpenses: true,\n    showNetProfit: true,\n    showTrends: true,\n  });\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [financialData, setFinancialData] = useState(null);\n  const [dateRange, setDateRange] = useState({\n    start: new Date(new Date().getFullYear(), new Date().getMonth() - 5, 1),\n    end: new Date(),\n  });\n\n  // Chart types configuration\n  const chartTypes = [\n    {\n      id: 'overview',\n      name: t('analytics:charts.overview'),\n      icon: ChartBarIcon,\n      description: t('analytics:charts.overviewDesc'),\n    },\n    {\n      id: 'trends',\n      name: t('analytics:charts.trends'),\n      icon: ArrowTrendingUpIcon,\n      description: t('analytics:charts.trendsDesc'),\n    },\n    {\n      id: 'comparison',\n      name: t('analytics:charts.comparison'),\n      icon: Squares2X2Icon,\n      description: t('analytics:charts.comparisonDesc'),\n    },\n    {\n      id: 'distribution',\n      name: t('analytics:charts.distribution'),\n      icon: FunnelIcon,\n      description: t('analytics:charts.distributionDesc'),\n    },\n  ];\n\n  // Utility functions\n  const formatCurrency = useCallback(\n    amount => {\n      return new Intl.NumberFormat(i18n.language, {\n        style: 'currency',\n        currency: 'EUR',\n      }).format(amount || 0);\n    },\n    [i18n.language],\n  );\n\n  const formatPercentage = useCallback(value => {\n    const numValue = value || 0;\n    return `${numValue > 0 ? '+' : ''}${numValue.toFixed(1)}%`;\n  }, []);\n\n  // Load financial data\n  const loadFinancialData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const result = await financialService.getFinancialOverview(\n        period,\n        dateRange.start,\n        dateRange.end,\n      );\n\n      if (result.success) {\n        setFinancialData(result.data);\n      } else {\n        Logger.error('Failed to load financial data:', result.error);\n      }\n    } catch (error) {\n      Logger.error('Error loading financial data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [period, dateRange]);\n\n  useEffect(() => {\n    loadFinancialData();\n  }, [loadFinancialData]);\n\n  // Chart data generators\n  const generateOverviewChartData = useMemo(() => {\n    if (!financialData?.cashFlow) return null;\n\n    const labels = financialData.cashFlow.map(item =>\n      new Date(item.date).toLocaleDateString(i18n.language, {\n        month: 'short',\n        day: 'numeric',\n      }),\n    );\n\n    const datasets = [];\n\n    if (chartFilters.showIncome) {\n      datasets.push({\n        label: t('analytics:advanced.income'),\n        data: financialData.cashFlow.map(item => item.income),\n        borderColor: 'rgb(34, 197, 94)',\n        backgroundColor: 'rgba(34, 197, 94, 0.1)',\n        fill: false,\n        tension: 0.4,\n        pointRadius: 4,\n        pointHoverRadius: 6,\n      });\n    }\n\n    if (chartFilters.showExpenses) {\n      datasets.push({\n        label: t('analytics:advanced.expenses'),\n        data: financialData.cashFlow.map(item => item.expense),\n        borderColor: 'rgb(239, 68, 68)',\n        backgroundColor: 'rgba(239, 68, 68, 0.1)',\n        fill: false,\n        tension: 0.4,\n        pointRadius: 4,\n        pointHoverRadius: 6,\n      });\n    }\n\n    if (chartFilters.showNetProfit) {\n      datasets.push({\n        label: t('analytics:advanced.netCashFlow'),\n        data: financialData.cashFlow.map(item => item.net),\n        borderColor: 'rgb(59, 130, 246)',\n        backgroundColor: 'rgba(59, 130, 246, 0.2)',\n        fill: true,\n        tension: 0.4,\n        pointRadius: 4,\n        pointHoverRadius: 6,\n      });\n    }\n\n    return { labels, datasets };\n  }, [financialData, chartFilters, i18n.language, t]);\n\n  const generateTrendsChartData = useMemo(() => {\n    if (!financialData?.income?.dailyTrend || !financialData?.expenses?.dailyTrend) return null;\n\n    const incomeTrend = financialData.income.dailyTrend;\n    const expenseTrend = financialData.expenses.dailyTrend;\n\n    // Calculate moving averages\n    const calculateMovingAverage = (data, window = 7) => {\n      return data.map((_, index) => {\n        const start = Math.max(0, index - window + 1);\n        const subset = data.slice(start, index + 1);\n        const sum = subset.reduce((acc, val) => acc + val.amount, 0);\n        return sum / subset.length;\n      });\n    };\n\n    const incomeMA = calculateMovingAverage(incomeTrend);\n    const expenseMA = calculateMovingAverage(expenseTrend);\n\n    const labels = incomeTrend.map(item =>\n      new Date(item.date).toLocaleDateString(i18n.language, {\n        month: 'short',\n        day: 'numeric',\n      }),\n    );\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: t('analytics:charts.incomeMovingAvg'),\n          data: incomeMA,\n          borderColor: 'rgb(34, 197, 94)',\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 3,\n          pointRadius: 0,\n        },\n        {\n          label: t('analytics:charts.expenseMovingAvg'),\n          data: expenseMA,\n          borderColor: 'rgb(239, 68, 68)',\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\n          fill: false,\n          tension: 0.4,\n          borderWidth: 3,\n          pointRadius: 0,\n        },\n        {\n          label: t('analytics:advanced.income'),\n          data: incomeTrend.map(item => item.amount),\n          borderColor: 'rgba(34, 197, 94, 0.5)',\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\n          fill: false,\n          tension: 0.1,\n          borderWidth: 1,\n          pointRadius: 2,\n        },\n        {\n          label: t('analytics:advanced.expenses'),\n          data: expenseTrend.map(item => item.amount),\n          borderColor: 'rgba(239, 68, 68, 0.5)',\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\n          fill: false,\n          tension: 0.1,\n          borderWidth: 1,\n          pointRadius: 2,\n        },\n      ],\n    };\n  }, [financialData, i18n.language, t]);\n\n  const generateComparisonChartData = useMemo(() => {\n    if (!financialData?.income?.byCategory || !financialData?.expenses?.byCategory) return null;\n\n    const incomeCategories = financialData.income.byCategory.slice(0, 5);\n    const expenseCategories = financialData.expenses.byCategory.slice(0, 5);\n\n    const allCategories = [\n      ...new Set([\n        ...incomeCategories.map(c => c.category),\n        ...expenseCategories.map(c => c.category),\n      ]),\n    ];\n\n    const incomeData = allCategories.map(category => {\n      const found = incomeCategories.find(c => c.category === category);\n      return found ? found.amount : 0;\n    });\n\n    const expenseData = allCategories.map(category => {\n      const found = expenseCategories.find(c => c.category === category);\n      return found ? found.amount : 0;\n    });\n\n    return {\n      labels: allCategories,\n      datasets: [\n        {\n          label: t('analytics:advanced.income'),\n          data: incomeData,\n          backgroundColor: 'rgba(34, 197, 94, 0.8)',\n          borderColor: 'rgb(34, 197, 94)',\n          borderWidth: 1,\n        },\n        {\n          label: t('analytics:advanced.expenses'),\n          data: expenseData,\n          backgroundColor: 'rgba(239, 68, 68, 0.8)',\n          borderColor: 'rgb(239, 68, 68)',\n          borderWidth: 1,\n        },\n      ],\n    };\n  }, [financialData, t]);\n\n  const generateDistributionChartData = useMemo(() => {\n    if (!financialData?.expenses?.byCategory) return null;\n\n    const categories = financialData.expenses.byCategory.slice(0, 6);\n\n    return {\n      labels: categories.map(cat => cat.category),\n      datasets: [\n        {\n          data: categories.map(cat => cat.amount),\n          backgroundColor: [\n            'rgba(59, 130, 246, 0.8)',\n            'rgba(34, 197, 94, 0.8)',\n            'rgba(251, 191, 36, 0.8)',\n            'rgba(239, 68, 68, 0.8)',\n            'rgba(139, 92, 246, 0.8)',\n            'rgba(236, 72, 153, 0.8)',\n          ],\n          borderColor: [\n            'rgb(59, 130, 246)',\n            'rgb(34, 197, 94)',\n            'rgb(251, 191, 36)',\n            'rgb(239, 68, 68)',\n            'rgb(139, 92, 246)',\n            'rgb(236, 72, 153)',\n          ],\n          borderWidth: 2,\n          hoverOffset: 10,\n        },\n      ],\n    };\n  }, [financialData]);\n\n  // Chart options\n  const getChartOptions = useCallback(\n    type => {\n      const baseOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        interaction: {\n          mode: 'index',\n          intersect: false,\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              usePointStyle: true,\n              padding: 20,\n            },\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n            titleColor: 'white',\n            bodyColor: 'white',\n            borderColor: 'rgba(255, 255, 255, 0.1)',\n            borderWidth: 1,\n            cornerRadius: 8,\n            displayColors: true,\n            callbacks: {\n              label: context => {\n                if (type === 'distribution') {\n                  const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                  const percentage = ((context.parsed / total) * 100).toFixed(1);\n                  return `${context.label}: ${formatCurrency(context.parsed)} (${percentage}%)`;\n                }\n                return `${context.dataset.label}: ${formatCurrency(context.parsed.y || context.parsed)}`;\n              },\n            },\n          },\n          zoom:\n            type !== 'distribution'\n              ? {\n                  pan: {\n                    enabled: true,\n                    mode: 'x',\n                  },\n                  zoom: {\n                    wheel: {\n                      enabled: true,\n                    },\n                    pinch: {\n                      enabled: true,\n                    },\n                    mode: 'x',\n                    onZoom: ({ chart }) => {\n                      setZoomLevel(chart.getZoomLevel());\n                    },\n                  },\n                }\n              : undefined,\n        },\n      };\n\n      if (type === 'distribution') {\n        return {\n          ...baseOptions,\n          plugins: {\n            ...baseOptions.plugins,\n            legend: {\n              position: 'bottom',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                generateLabels: chart => {\n                  const data = chart.data;\n                  if (data.labels.length && data.datasets.length) {\n                    return data.labels.map((label, i) => {\n                      const value = data.datasets[0].data[i];\n                      const total = data.datasets[0].data.reduce((a, b) => a + b, 0);\n                      const percentage = ((value / total) * 100).toFixed(1);\n                      return {\n                        text: `${label} (${percentage}%)`,\n                        fillStyle: data.datasets[0].backgroundColor[i],\n                        strokeStyle: data.datasets[0].borderColor[i],\n                        lineWidth: data.datasets[0].borderWidth,\n                        hidden: false,\n                        index: i,\n                      };\n                    });\n                  }\n                  return [];\n                },\n              },\n            },\n          },\n        };\n      }\n\n      if (type === 'comparison') {\n        return {\n          ...baseOptions,\n          scales: {\n            x: {\n              grid: {\n                display: false,\n              },\n            },\n            y: {\n              beginAtZero: true,\n              ticks: {\n                callback: value => formatCurrency(value),\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.1)',\n              },\n            },\n          },\n        };\n      }\n\n      return {\n        ...baseOptions,\n        scales: {\n          x: {\n            grid: {\n              display: false,\n            },\n          },\n          y: {\n            beginAtZero: true,\n            ticks: {\n              callback: value => formatCurrency(value),\n            },\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n            },\n          },\n        },\n      };\n    },\n    [formatCurrency],\n  );\n\n  // Event handlers\n  const handleChartTypeChange = chartType => {\n    setSelectedChart(chartType);\n  };\n\n  const handleFilterChange = filterKey => {\n    setChartFilters(prev => ({\n      ...prev,\n      [filterKey]: !prev[filterKey],\n    }));\n  };\n\n  const handleResetZoom = () => {\n    setZoomLevel(1);\n    // Chart reset zoom will be handled by chart ref\n  };\n\n  const handleExportChart = () => {\n    // Export functionality\n    Logger.info('Exporting chart:', selectedChart);\n  };\n\n  // Render chart based on selected type\n  const renderChart = () => {\n    if (loading) {\n      return (\n        <div className='flex items-center justify-center h-full'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600'></div>\n        </div>\n      );\n    }\n\n    switch (selectedChart) {\n      case 'overview':\n        return generateOverviewChartData ? (\n          <Line data={generateOverviewChartData} options={getChartOptions('overview')} />\n        ) : null;\n\n      case 'trends':\n        return generateTrendsChartData ? (\n          <Line data={generateTrendsChartData} options={getChartOptions('trends')} />\n        ) : null;\n\n      case 'comparison':\n        return generateComparisonChartData ? (\n          <Bar data={generateComparisonChartData} options={getChartOptions('comparison')} />\n        ) : null;\n\n      case 'distribution':\n        return generateDistributionChartData ? (\n          <Doughnut\n            data={generateDistributionChartData}\n            options={getChartOptions('distribution')}\n          />\n        ) : null;\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 ${className}`}>\n      {/* Header */}\n      <div className='flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6'>\n        <div>\n          <h3 className='text-xl font-semibold text-gray-900 dark:text-white'>\n            {t('analytics:charts.interactiveAnalytics')}\n          </h3>\n          <p className='text-gray-600 dark:text-gray-400 mt-1'>\n            {t('analytics:charts.interactiveDesc')}\n          </p>\n        </div>\n\n        <div className='flex items-center gap-2 mt-4 lg:mt-0'>\n          {zoomLevel > 1 && (\n            <button\n              onClick={handleResetZoom}\n              className='flex items-center gap-1 px-3 py-2 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600'\n            >\n              <MagnifyingGlassIcon className='w-4 h-4' />\n              {t('analytics:charts.resetZoom')}\n            </button>\n          )}\n\n          <button\n            onClick={handleExportChart}\n            className='flex items-center gap-1 px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700'\n          >\n            <ArrowDownTrayIcon className='w-4 h-4' />\n            {t('analytics:advanced.exportData')}\n          </button>\n        </div>\n      </div>\n\n      {/* Chart Type Selector */}\n      <div className='mb-6'>\n        <div className='grid grid-cols-2 lg:grid-cols-4 gap-3'>\n          {chartTypes.map(type => {\n            const Icon = type.icon;\n            return (\n              <button\n                key={type.id}\n                onClick={() => handleChartTypeChange(type.id)}\n                className={`p-3 rounded-lg border-2 transition-all ${\n                  selectedChart === type.id\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300'\n                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                }`}\n              >\n                <Icon className='w-5 h-5 mx-auto mb-2' />\n                <div className='text-sm font-medium'>{type.name}</div>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Filters */}\n      {selectedChart === 'overview' && (\n        <div className='mb-6'>\n          <h4 className='text-sm font-medium text-gray-700 dark:text-gray-300 mb-3'>\n            {t('analytics:charts.filters')}\n          </h4>\n          <div className='flex flex-wrap gap-3'>\n            {Object.entries(chartFilters).map(([key, value]) => (\n              <label key={key} className='flex items-center gap-2'>\n                <input\n                  type='checkbox'\n                  checked={value}\n                  onChange={() => handleFilterChange(key)}\n                  className='rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                />\n                <span className='text-sm text-gray-700 dark:text-gray-300'>\n                  {t(`analytics:charts.${key}`)}\n                </span>\n              </label>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Chart Container */}\n      <div className='h-96 lg:h-[500px]'>{renderChart()}</div>\n\n      {/* Chart Info */}\n      <div className='mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg'>\n        <div className='flex items-start gap-3'>\n          <CursorArrowRaysIcon className='w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0' />\n          <div>\n            <h5 className='font-medium text-gray-900 dark:text-white mb-1'>\n              {t('analytics:charts.interactionTips')}\n            </h5>\n            <ul className='text-sm text-gray-600 dark:text-gray-400 space-y-1'>\n              <li>ÔÇó {t('analytics:charts.hoverTooltip')}</li>\n              <li>ÔÇó {t('analytics:charts.scrollZoom')}</li>\n              <li>ÔÇó {t('analytics:charts.dragPan')}</li>\n              <li>ÔÇó {t('analytics:charts.clickLegend')}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveFinancialCharts;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\analytics\\ReportsDashboard.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PrinterIcon' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":121,"endColumn":16,"suggestions":[{"fix":{"range":[3641,3708],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleScheduleReport' is assigned a value but never used.","line":125,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  DocumentArrowDownIcon,\n  CalendarIcon,\n  ClockIcon,\n  ChartBarIcon,\n  DocumentTextIcon,\n  CogIcon,\n  ShareIcon,\n  PrinterIcon,\n} from '@heroicons/react/24/outline';\n\nconst ReportsDashboard = ({ analytics }) => {\n  const { t } = useTranslation();\n  const [selectedReportType, setSelectedReportType] = useState('financial');\n  const [reportPeriod, setReportPeriod] = useState('monthly');\n  const [customDateRange, setCustomDateRange] = useState({ start: '', end: '' });\n  const [scheduledReports, setScheduledReports] = useState([\n    {\n      id: 1,\n      name: 'Monthly Financial Summary',\n      type: 'financial',\n      frequency: 'monthly',\n      nextRun: '2024-02-01',\n      recipients: ['admin@company.com', 'finance@company.com'],\n      active: true,\n    },\n    {\n      id: 2,\n      name: 'Weekly Client Report',\n      type: 'client',\n      frequency: 'weekly',\n      nextRun: '2024-01-29',\n      recipients: ['manager@company.com'],\n      active: true,\n    },\n  ]);\n\n  const reportTypes = [\n    {\n      id: 'financial',\n      name: 'Financial Reports',\n      description: 'Revenue, expenses, profit margins, and financial forecasts',\n      icon: ChartBarIcon,\n      templates: [\n        'Monthly P&L Statement',\n        'Cash Flow Analysis',\n        'Revenue Breakdown',\n        'Expense Analysis',\n        'Financial Forecast',\n      ],\n    },\n    {\n      id: 'client',\n      name: 'Client Reports',\n      description: 'Client analytics, satisfaction scores, and relationship metrics',\n      icon: DocumentTextIcon,\n      templates: [\n        'Client Portfolio Overview',\n        'Client Satisfaction Report',\n        'Client Retention Analysis',\n        'New Client Acquisition',\n        'Client Revenue Contribution',\n      ],\n    },\n    {\n      id: 'operational',\n      name: 'Operational Reports',\n      description: 'Project performance, team productivity, and operational metrics',\n      icon: CogIcon,\n      templates: [\n        'Project Performance Dashboard',\n        'Team Productivity Report',\n        'Resource Utilization',\n        'Operational Efficiency',\n        'KPI Summary',\n      ],\n    },\n    {\n      id: 'custom',\n      name: 'Custom Reports',\n      description: 'Build your own reports with custom metrics and visualizations',\n      icon: DocumentArrowDownIcon,\n      templates: [\n        'Custom Dashboard',\n        'Ad-hoc Analysis',\n        'Comparative Study',\n        'Trend Analysis',\n        'Executive Summary',\n      ],\n    },\n  ];\n\n  const exportFormats = [\n    { id: 'pdf', name: 'PDF', icon: '­ƒôä', description: 'Professional formatted report' },\n    { id: 'excel', name: 'Excel', icon: '­ƒôè', description: 'Spreadsheet with raw data' },\n    { id: 'csv', name: 'CSV', description: 'Comma-separated values' },\n    { id: 'powerpoint', name: 'PowerPoint', icon: '­ƒôê', description: 'Presentation slides' },\n  ];\n\n  const quickStats = useMemo(() => {\n    if (!analytics?.data) return {};\n\n    const { revenueAnalytics, clientAnalytics, invoiceAnalytics } = analytics.data;\n\n    return {\n      totalRevenue: revenueAnalytics?.totalRevenue || 0,\n      totalClients: clientAnalytics?.totalClients || 0,\n      pendingInvoices: invoiceAnalytics?.pending || 0,\n      completedProjects: 45, // Mock data\n      avgProjectValue: revenueAnalytics?.totalRevenue\n        ? Math.round(revenueAnalytics.totalRevenue / (clientAnalytics?.totalClients || 1))\n        : 0,\n      clientSatisfaction: 4.7, // Mock data\n    };\n  }, [analytics]);\n\n  const handleExport = format => {\n    // Mock export functionality\n    console.log(`Exporting ${selectedReportType} report as ${format}`);\n    // In a real implementation, this would trigger the actual export\n  };\n\n  const handleScheduleReport = reportConfig => {\n    const newReport = {\n      id: Date.now(),\n      ...reportConfig,\n      active: true,\n    };\n    setScheduledReports([...scheduledReports, newReport]);\n  };\n\n  const toggleScheduledReport = reportId => {\n    setScheduledReports(reports =>\n      reports.map(report =>\n        report.id === reportId ? { ...report, active: !report.active } : report,\n      ),\n    );\n  };\n\n  const renderQuickStats = () => (\n    <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6'>\n      <div className='bg-blue-50 p-4 rounded-lg'>\n        <p className='text-sm text-blue-600 font-medium'>Total Revenue</p>\n        <p className='text-2xl font-bold text-blue-900'>\n          Ôé¼{quickStats.totalRevenue?.toLocaleString()}\n        </p>\n      </div>\n      <div className='bg-green-50 p-4 rounded-lg'>\n        <p className='text-sm text-green-600 font-medium'>Active Clients</p>\n        <p className='text-2xl font-bold text-green-900'>{quickStats.totalClients}</p>\n      </div>\n      <div className='bg-yellow-50 p-4 rounded-lg'>\n        <p className='text-sm text-yellow-600 font-medium'>Pending Invoices</p>\n        <p className='text-2xl font-bold text-yellow-900'>{quickStats.pendingInvoices}</p>\n      </div>\n      <div className='bg-purple-50 p-4 rounded-lg'>\n        <p className='text-sm text-purple-600 font-medium'>Completed Projects</p>\n        <p className='text-2xl font-bold text-purple-900'>{quickStats.completedProjects}</p>\n      </div>\n      <div className='bg-indigo-50 p-4 rounded-lg'>\n        <p className='text-sm text-indigo-600 font-medium'>Avg Project Value</p>\n        <p className='text-2xl font-bold text-indigo-900'>\n          Ôé¼{quickStats.avgProjectValue?.toLocaleString()}\n        </p>\n      </div>\n      <div className='bg-pink-50 p-4 rounded-lg'>\n        <p className='text-sm text-pink-600 font-medium'>Client Satisfaction</p>\n        <p className='text-2xl font-bold text-pink-900'>{quickStats.clientSatisfaction}/5</p>\n      </div>\n    </div>\n  );\n\n  const renderReportBuilder = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6'>\n      <h3 className='text-lg font-semibold text-black mb-4'>Custom Report Builder</h3>\n\n      {/* Report Type Selection */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6'>\n        {reportTypes.map(type => {\n          const IconComponent = type.icon;\n          return (\n            <div\n              key={type.id}\n              onClick={() => setSelectedReportType(type.id)}\n              className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                selectedReportType === type.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n            >\n              <IconComponent className='w-8 h-8 text-blue-600 mb-2' />\n              <h4 className='font-medium text-black mb-1'>{type.name}</h4>\n              <p className='text-sm text-gray-600'>{type.description}</p>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Report Templates */}\n      {selectedReportType && (\n        <div className='mb-6'>\n          <h4 className='font-medium text-black mb-3'>Available Templates</h4>\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3'>\n            {reportTypes\n              .find(t => t.id === selectedReportType)\n              ?.templates.map(template => (\n                <button\n                  key={template}\n                  className='p-3 text-left border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors'\n                >\n                  <p className='font-medium text-black'>{template}</p>\n                </button>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Period Selection */}\n      <div className='mb-6'>\n        <h4 className='font-medium text-black mb-3'>Report Period</h4>\n        <div className='flex flex-wrap gap-2 mb-4'>\n          {['daily', 'weekly', 'monthly', 'quarterly', 'yearly', 'custom'].map(period => (\n            <button\n              key={period}\n              onClick={() => setReportPeriod(period)}\n              className={`px-4 py-2 rounded-lg capitalize transition-colors ${\n                reportPeriod === period\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {period}\n            </button>\n          ))}\n        </div>\n\n        {reportPeriod === 'custom' && (\n          <div className='flex gap-4'>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>Start Date</label>\n              <input\n                type='date'\n                value={customDateRange.start}\n                onChange={e => setCustomDateRange(prev => ({ ...prev, start: e.target.value }))}\n                className='border border-gray-300 rounded-lg px-3 py-2'\n              />\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>End Date</label>\n              <input\n                type='date'\n                value={customDateRange.end}\n                onChange={e => setCustomDateRange(prev => ({ ...prev, end: e.target.value }))}\n                className='border border-gray-300 rounded-lg px-3 py-2'\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Export Options */}\n      <div className='mb-6'>\n        <h4 className='font-medium text-black mb-3'>Export Format</h4>\n        <div className='grid grid-cols-2 md:grid-cols-4 gap-3'>\n          {exportFormats.map(format => (\n            <button\n              key={format.id}\n              onClick={() => handleExport(format.id)}\n              className='p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-left'\n            >\n              <div className='flex items-center space-x-2 mb-1'>\n                <span className='text-lg'>{format.icon}</span>\n                <span className='font-medium text-black'>{format.name}</span>\n              </div>\n              <p className='text-xs text-gray-600'>{format.description}</p>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Generate Report Button */}\n      <div className='flex justify-end'>\n        <button className='bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2'>\n          <DocumentArrowDownIcon className='w-4 h-4' />\n          <span>Generate Report</span>\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderScheduledReports = () => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <div className='flex justify-between items-center mb-4'>\n        <h3 className='text-lg font-semibold text-black'>Scheduled Reports</h3>\n        <button className='bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors text-sm'>\n          + Schedule New\n        </button>\n      </div>\n\n      <div className='space-y-4'>\n        {scheduledReports.map(report => (\n          <div\n            key={report.id}\n            className='flex items-center justify-between p-4 border border-gray-200 rounded-lg'\n          >\n            <div className='flex-1'>\n              <div className='flex items-center space-x-3'>\n                <div\n                  className={`w-3 h-3 rounded-full ${\n                    report.active ? 'bg-green-500' : 'bg-gray-400'\n                  }`}\n                />\n                <h4 className='font-medium text-black'>{report.name}</h4>\n                <span className='px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded capitalize'>\n                  {report.type}\n                </span>\n              </div>\n              <div className='mt-2 flex items-center space-x-4 text-sm text-gray-600'>\n                <div className='flex items-center space-x-1'>\n                  <ClockIcon className='w-4 h-4' />\n                  <span>Every {report.frequency}</span>\n                </div>\n                <div className='flex items-center space-x-1'>\n                  <CalendarIcon className='w-4 h-4' />\n                  <span>Next: {report.nextRun}</span>\n                </div>\n                <div className='flex items-center space-x-1'>\n                  <ShareIcon className='w-4 h-4' />\n                  <span>{report.recipients.length} recipients</span>\n                </div>\n              </div>\n            </div>\n            <div className='flex items-center space-x-2'>\n              <button\n                onClick={() => toggleScheduledReport(report.id)}\n                className={`px-3 py-1 rounded text-sm transition-colors ${\n                  report.active\n                    ? 'bg-red-100 text-red-700 hover:bg-red-200'\n                    : 'bg-green-100 text-green-700 hover:bg-green-200'\n                }`}\n              >\n                {report.active ? 'Pause' : 'Resume'}\n              </button>\n              <button className='p-2 text-gray-400 hover:text-gray-600 transition-colors'>\n                <CogIcon className='w-4 h-4' />\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className='space-y-6'>\n      {renderQuickStats()}\n      {renderReportBuilder()}\n      {renderScheduledReports()}\n    </div>\n  );\n};\n\nexport default ReportsDashboard;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\auth\\OrganizationProtectedRoute.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_unauthorizedComponent' is defined but never used.","line":37,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Navigate, useLocation } from 'react-router-dom';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { ReactNode, ReactElement } from 'react';\nimport { useOrganizationContext } from '@context/OrganizationContext';\nimport Logger from '@utils/Logger';\n\ninterface OrganizationProtectedRouteProps {\n  children: ReactNode;\n  requiredRole?: 'admin' | 'basic_member' | string;\n  requiredPermissions?: string[];\n  organizationRequired?: boolean;\n  fallbackUrl?: string;\n  adminOnly?: boolean;\n  unauthorizedComponent?: () => ReactElement;\n}\n\n/**\n * OrganizationProtectedRoute Component\n *\n * Extends ProtectedRoute with organization-specific access control.\n * Enforces organization membership, roles, and permissions.\n *\n * @param children - Components to render if access is granted\n * @param requiredRole - Minimum role required (admin, basic_member, etc.)\n * @param requiredPermissions - Array of required permissions\n * @param organizationRequired - Whether organization membership is required\n * @param fallbackUrl - URL to redirect to if access is denied\n * @param adminOnly - Shorthand for admin-only access\n */\nexport default function OrganizationProtectedRoute({\n  children,\n  requiredRole,\n  requiredPermissions = [],\n  organizationRequired = true,\n  fallbackUrl = '/dashboard',\n  adminOnly = false,\n  unauthorizedComponent: _unauthorizedComponent,\n}: OrganizationProtectedRouteProps) {\n  const { isLoaded, isSignedIn } = useAuth();\n  const { user } = useUser();\n  const location = useLocation();\n  const {\n    organization,\n    isLoaded: orgLoaded,\n    isInitialized,\n    hasRole,\n    isAdmin,\n    isMember,\n    getUserRole,\n    needsOrganizationSelection,\n    needsOrganizationCreation,\n  } = useOrganizationContext();\n\n  // Show loading spinner while Clerk and organization context are initializing\n  if (!isLoaded || !orgLoaded || !isInitialized) {\n    return (\n      <div className='flex justify-center items-center h-screen'>\n        <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600'></div>\n        <p className='ml-3 text-blue-600'>Loading...</p>\n      </div>\n    );\n  }\n\n  // Basic authentication check\n  if (!isSignedIn || !user) {\n    Logger.warn('OrganizationProtectedRoute: User not authenticated, redirecting to login');\n    return (\n      <Navigate to='/login' state={{ returnTo: location.pathname + location.search }} replace />\n    );\n  }\n\n  // Check onboarding completion\n  const hasCompletedOnboarding = user.unsafeMetadata?.onboardingComplete === true;\n  const isOnOnboardingPage = location.pathname === '/onboarding';\n\n  if (!hasCompletedOnboarding && !isOnOnboardingPage) {\n    Logger.info('OrganizationProtectedRoute: User needs to complete onboarding');\n    return <Navigate to='/onboarding' replace />;\n  }\n\n  // Organization checks\n  if (organizationRequired) {\n    // Handle case where user needs to create an organization\n    if (needsOrganizationCreation) {\n      Logger.info('OrganizationProtectedRoute: User needs to create organization');\n      return <Navigate to='/organization' state={{ action: 'create' }} replace />;\n    }\n\n    // Handle case where user needs to select an organization\n    if (needsOrganizationSelection) {\n      Logger.info('OrganizationProtectedRoute: User needs to select organization');\n      return <Navigate to='/organization' state={{ action: 'select' }} replace />;\n    }\n\n    // Check if user belongs to current organization\n    if (!organization || !isMember()) {\n      Logger.warn('OrganizationProtectedRoute: User not a member of required organization');\n      return (\n        <Navigate\n          to={fallbackUrl}\n          state={{\n            error: 'You do not have access to this organization.',\n            returnTo: location.pathname + location.search,\n          }}\n          replace\n        />\n      );\n    }\n  }\n\n  // Role-based access control\n  if (adminOnly && !isAdmin()) {\n    Logger.warn('OrganizationProtectedRoute: Admin access required but user is not admin');\n    return (\n      <Navigate\n        to={fallbackUrl}\n        state={{\n          error: 'Administrator access required for this page.',\n          returnTo: location.pathname + location.search,\n        }}\n        replace\n      />\n    );\n  }\n\n  if (requiredRole && !hasRole(requiredRole)) {\n    const userRole = getUserRole();\n    Logger.warn('OrganizationProtectedRoute: Insufficient role', {\n      required: requiredRole,\n      current: userRole,\n    });\n    return (\n      <Navigate\n        to={fallbackUrl}\n        state={{\n          error: `This page requires ${requiredRole} access. Your current role: ${userRole || 'none'}.`,\n          returnTo: location.pathname + location.search,\n        }}\n        replace\n      />\n    );\n  }\n\n  // Permission-based access control\n  if (requiredPermissions.length > 0) {\n    // This would integrate with your custom permission system\n    // For now, we'll use a simple role-to-permission mapping\n    const userPermissions = getUserPermissions(getUserRole());\n    const hasAllPermissions = requiredPermissions.every(permission =>\n      userPermissions.includes(permission),\n    );\n\n    if (!hasAllPermissions) {\n      const missingPermissions = requiredPermissions.filter(\n        permission => !userPermissions.includes(permission),\n      );\n      Logger.warn('OrganizationProtectedRoute: Missing required permissions', {\n        required: requiredPermissions,\n        missing: missingPermissions,\n        userRole: getUserRole(),\n      });\n      return (\n        <Navigate\n          to={fallbackUrl}\n          state={{\n            error: `Missing required permissions: ${missingPermissions.join(', ')}`,\n            returnTo: location.pathname + location.search,\n          }}\n          replace\n        />\n      );\n    }\n  }\n\n  // All checks passed, render protected content\n  Logger.debug('OrganizationProtectedRoute: Access granted', {\n    userId: user.id,\n    organizationId: organization?.id,\n    userRole: getUserRole(),\n    path: location.pathname,\n  });\n\n  return <>{children}</>;\n}\n\n/**\n * Helper function to map roles to permissions\n * This can be extended to integrate with a more sophisticated permission system\n */\nfunction getUserPermissions(role: string | null): string[] {\n  const rolePermissions: Record<string, string[]> = {\n    admin: [\n      'read',\n      'write',\n      'delete',\n      'manage_users',\n      'manage_organization',\n      'view_analytics',\n      'export_data',\n      'manage_billing',\n      'access_reports',\n      'manage_settings',\n    ],\n    basic_member: ['read', 'write', 'view_analytics', 'access_reports'],\n  };\n\n  return rolePermissions[role || ''] || [];\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\auth\\ProtectedRoute.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":20,"endColumn":16,"suggestions":[{"fix":{"range":[668,747],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useAuth\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":25,"column":36,"nodeType":"Identifier","endLine":25,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@clerk/clerk-react';\nimport { ReactNode } from 'react';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n}\n\n// Check if we're in development mode without Clerk\nconst isDevelopment = import.meta.env.DEV;\nconst isLocalhost =\n  window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\nconst shouldBypassClerk = isDevelopment && isLocalhost;\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const location = useLocation();\n\n  // If we're in development mode, bypass authentication completely\n  if (shouldBypassClerk) {\n    console.log('­ƒÜº ProtectedRoute: Bypassing authentication in development mode');\n    return <>{children}</>;\n  }\n\n  // Production mode with Clerk\n  const { isSignedIn, isLoaded } = useAuth();\n\n  // Wait for Clerk to load\n  if (!isLoaded) {\n    return (\n      <div className='flex items-center justify-center min-h-screen'>\n        <div className='animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500'></div>\n      </div>\n    );\n  }\n\n  // If not signed in, redirect to sign-in page\n  if (!isSignedIn) {\n    return <Navigate to='/sign-in' state={{ from: location }} replace />;\n  }\n\n  // If signed in, render the protected content\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\auth\\UnauthorizedAccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\auth\\withAuth.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[355,358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[355,358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[376,379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[376,379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ComponentType } from 'react';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useOrganizationContext } from '@context/OrganizationContext';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport Logger from '@utils/Logger';\n\ninterface AuthProps {\n  isAuthenticated: boolean;\n  user: any;\n  organization: any;\n  userRole: string | null;\n  isAdmin: boolean;\n  isMember: boolean;\n  hasRole: (role: string) => boolean;\n  hasPermission: (permission: string) => boolean;\n  hasAllPermissions: (permissions: string[]) => boolean;\n  isLoading: boolean;\n}\n\ninterface WithAuthOptions {\n  requiredRole?: 'admin' | 'basic_member' | string;\n  requiredPermissions?: string[];\n  organizationRequired?: boolean;\n  adminOnly?: boolean;\n  redirectTo?: string;\n  loadingComponent?: ComponentType;\n  unauthorizedComponent?: ComponentType<{ reason: string }>;\n}\n\n/**\n * Higher-Order Component for Authentication and Authorization\n *\n * Wraps components with authentication logic and provides auth-related props.\n * Supports role-based and permission-based access control.\n *\n * @param WrappedComponent - Component to wrap with auth logic\n * @param options - Authentication and authorization options\n * @returns Enhanced component with authentication\n */\nexport function withAuth<P extends object>(\n  WrappedComponent: ComponentType<P & AuthProps>,\n  options: WithAuthOptions = {},\n) {\n  const {\n    requiredRole,\n    requiredPermissions = [],\n    organizationRequired = false,\n    adminOnly = false,\n    redirectTo = '/login',\n    loadingComponent: LoadingComponent,\n    unauthorizedComponent: UnauthorizedComponent,\n  } = options;\n\n  const WithAuthComponent = (props: P) => {\n    const { isLoaded, isSignedIn } = useAuth();\n    const { user } = useUser();\n    const location = useLocation();\n    const {\n      organization,\n      isLoaded: orgLoaded,\n      isInitialized,\n      hasRole,\n      isAdmin,\n      isMember,\n      getUserRole,\n      needsOrganizationSelection,\n      needsOrganizationCreation,\n    } = useOrganizationContext();\n\n    const isLoading = !isLoaded || !orgLoaded || !isInitialized;\n\n    // Loading state\n    if (isLoading) {\n      if (LoadingComponent) {\n        return <LoadingComponent />;\n      }\n      return (\n        <div className='flex justify-center items-center h-screen'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600'></div>\n          <p className='ml-3 text-blue-600'>Loading...</p>\n        </div>\n      );\n    }\n\n    // Authentication check\n    if (!isSignedIn || !user) {\n      Logger.warn('withAuth: User not authenticated, redirecting');\n      return (\n        <Navigate\n          to={redirectTo}\n          state={{ returnTo: location.pathname + location.search }}\n          replace\n        />\n      );\n    }\n\n    // Onboarding check\n    const hasCompletedOnboarding = user.unsafeMetadata?.onboardingComplete === true;\n    const isOnOnboardingPage = location.pathname === '/onboarding';\n\n    if (!hasCompletedOnboarding && !isOnOnboardingPage) {\n      return <Navigate to='/onboarding' replace />;\n    }\n\n    // Organization requirements\n    if (organizationRequired) {\n      if (needsOrganizationCreation) {\n        return <Navigate to='/organization' state={{ action: 'create' }} replace />;\n      }\n\n      if (needsOrganizationSelection) {\n        return <Navigate to='/organization' state={{ action: 'select' }} replace />;\n      }\n\n      if (!organization || !isMember()) {\n        if (UnauthorizedComponent) {\n          return <UnauthorizedComponent reason='Organization membership required' />;\n        }\n        return (\n          <Navigate\n            to='/dashboard'\n            state={{\n              error: 'You do not have access to this organization.',\n              returnTo: location.pathname + location.search,\n            }}\n            replace\n          />\n        );\n      }\n    }\n\n    // Role-based access control\n    if (adminOnly && !isAdmin()) {\n      const reason = 'Administrator access required';\n      if (UnauthorizedComponent) {\n        return <UnauthorizedComponent reason={reason} />;\n      }\n      return (\n        <Navigate\n          to='/dashboard'\n          state={{\n            error: reason,\n            returnTo: location.pathname + location.search,\n          }}\n          replace\n        />\n      );\n    }\n\n    if (requiredRole && !hasRole(requiredRole)) {\n      const userRole = getUserRole();\n      const reason = `This page requires ${requiredRole} access. Your current role: ${userRole || 'none'}.`;\n      if (UnauthorizedComponent) {\n        return <UnauthorizedComponent reason={reason} />;\n      }\n      return (\n        <Navigate\n          to='/dashboard'\n          state={{\n            error: reason,\n            returnTo: location.pathname + location.search,\n          }}\n          replace\n        />\n      );\n    }\n\n    // Permission-based access control\n    const userPermissions = getUserPermissions(getUserRole());\n\n    const hasPermission = (permission: string): boolean => {\n      return userPermissions.includes(permission);\n    };\n\n    const hasAllPermissions = (permissions: string[]): boolean => {\n      return permissions.every(permission => userPermissions.includes(permission));\n    };\n\n    if (requiredPermissions.length > 0 && !hasAllPermissions(requiredPermissions)) {\n      const missingPermissions = requiredPermissions.filter(\n        permission => !hasPermission(permission),\n      );\n      const reason = `Missing required permissions: ${missingPermissions.join(', ')}`;\n\n      if (UnauthorizedComponent) {\n        return <UnauthorizedComponent reason={reason} />;\n      }\n      return (\n        <Navigate\n          to='/dashboard'\n          state={{\n            error: reason,\n            returnTo: location.pathname + location.search,\n          }}\n          replace\n        />\n      );\n    }\n\n    // All checks passed - create auth props\n    const authProps: AuthProps = {\n      isAuthenticated: isSignedIn,\n      user,\n      organization,\n      userRole: getUserRole(),\n      isAdmin: isAdmin(),\n      isMember: isMember(),\n      hasRole,\n      hasPermission,\n      hasAllPermissions,\n      isLoading: false,\n    };\n\n    Logger.debug('withAuth: Access granted', {\n      userId: user.id,\n      organizationId: organization?.id,\n      userRole: getUserRole(),\n      path: location.pathname,\n    });\n\n    return <WrappedComponent {...props} {...authProps} />;\n  };\n\n  WithAuthComponent.displayName = `withAuth(${WrappedComponent.displayName || WrappedComponent.name})`;\n\n  return WithAuthComponent;\n}\n\n/**\n * Helper function to get user permissions based on role\n */\nfunction getUserPermissions(role: string | null): string[] {\n  const rolePermissions: Record<string, string[]> = {\n    admin: [\n      'read',\n      'write',\n      'delete',\n      'manage_users',\n      'manage_organization',\n      'view_analytics',\n      'export_data',\n      'manage_billing',\n      'access_reports',\n      'manage_settings',\n      'manage_quotes',\n      'manage_invoices',\n      'manage_clients',\n      'manage_inventory',\n      'access_advanced_reports',\n    ],\n    basic_member: [\n      'read',\n      'write',\n      'view_analytics',\n      'access_reports',\n      'manage_quotes',\n      'manage_invoices',\n      'manage_clients',\n    ],\n  };\n\n  return rolePermissions[role || ''] || [];\n}\n\n/**\n * Predefined auth decorators for common use cases\n */\n\n// Admin-only decorator\nexport const withAdminAuth = <P extends object>(Component: ComponentType<P & AuthProps>) =>\n  withAuth(Component, { adminOnly: true, organizationRequired: true });\n\n// Organization member decorator\nexport const withOrgAuth = <P extends object>(Component: ComponentType<P & AuthProps>) =>\n  withAuth(Component, { organizationRequired: true });\n\n// Role-specific decorators\nexport const withRole =\n  <P extends object>(role: string) =>\n  (Component: ComponentType<P & AuthProps>) =>\n    withAuth(Component, { requiredRole: role, organizationRequired: true });\n\n// Permission-specific decorator\nexport const withPermissions =\n  <P extends object>(permissions: string[]) =>\n  (Component: ComponentType<P & AuthProps>) =>\n    withAuth(Component, { requiredPermissions: permissions });\n\n/**\n * Example usage:\n *\n * // Basic usage\n * const ProtectedComponent = withAuth(MyComponent);\n *\n * // Admin-only component\n * const AdminComponent = withAdminAuth(MyAdminComponent);\n *\n * // Role-specific component\n * const ManagerComponent = withRole('manager')(MyManagerComponent);\n *\n * // Permission-specific component\n * const ReportsComponent = withPermissions(['view_analytics', 'access_reports'])(MyReportsComponent);\n *\n * // Custom options\n * const CustomProtectedComponent = withAuth(MyComponent, {\n *   requiredRole: 'admin',\n *   requiredPermissions: ['manage_users'],\n *   organizationRequired: true,\n *   redirectTo: '/unauthorized',\n *   loadingComponent: CustomLoader,\n *   unauthorizedComponent: CustomUnauthorized\n * });\n */\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\calendar\\Calendar.jsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":56,"column":27,"nodeType":"Identifier","endLine":56,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Plus,\n  Search,\n  Clock,\n  MapPin,\n  Users,\n  Edit,\n  Trash2,\n  Share,\n  X,\n  Grid3X3,\n  List,\n  Columns,\n  Calendar as CalendarViewIcon,\n  Phone,\n  Video,\n  FileText,\n  Star,\n} from 'lucide-react';\n\nconst Calendar = () => {\n  const { t, ready } = useTranslation('calendar');\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate] = useState(19); // Today is the 19th as shown in design\n  const [viewMode, setViewMode] = useState('month'); // Use static default instead of translation\n\n  // Safe translation function that handles loading state\n  const safeT = (key, fallback = key) => {\n    if (!ready) return fallback;\n    return t(key);\n  };\n\n  // Show loading state if translations are not ready\n  if (!ready) {\n    return (\n      <div className='flex h-screen bg-gray-50 items-center justify-center'>\n        <div className='text-center'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\n          <p className='text-gray-600'>Loading calendar...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const selectedEventData = safeT('sampleData.selectedEvent', { returnObjects: true }) || {};\n  const eventsData = safeT('sampleData.events', { returnObjects: true }) || {};\n  const upcomingEventsData = safeT('sampleData.upcomingEvents', { returnObjects: true }) || [];\n  const filtersData = safeT('sampleData.filters', { returnObjects: true }) || {};\n  const calendarsData = safeT('sampleData.calendars', { returnObjects: true }) || {};\n  const eventCategoriesData = safeT('sampleData.eventCategories', { returnObjects: true }) || {};\n\n  const [selectedEvent] = useState({\n    title: selectedEventData.title || 'Sample Event',\n    type: selectedEventData.type || 'meeting',\n    date: selectedEventData.date || 'Today',\n    time: selectedEventData.time || '10:00 AM',\n    location: selectedEventData.location || 'Conference Room',\n    organizer: selectedEventData.organizer || 'John Doe',\n    participants: selectedEventData.participants || ['Jane Smith', 'Bob Johnson'],\n    description: selectedEventData.description || 'Sample event description',\n  });\n\n  // Sample events data\n  const events = {\n    15: [\n      {\n        id: 1,\n        title: eventsData.clientMeeting || 'Client Meeting',\n        time: '10:00 AM',\n        type: 'meeting',\n        color: 'bg-blue-500',\n      },\n      {\n        id: 2,\n        title: eventsData.projectPresentation || 'Project Presentation',\n        time: '2:00 PM',\n        type: 'presentation',\n        color: 'bg-purple-500',\n      },\n      {\n        id: 3,\n        title: eventsData.invoiceDue || 'Invoice Due',\n        time: '',\n        type: 'invoice',\n        color: 'bg-red-500',\n      },\n    ],\n    16: [\n      {\n        id: 4,\n        title: eventsData.teamMeeting || 'Team Meeting',\n        time: '9:00 AM',\n        type: 'meeting',\n        color: 'bg-blue-500',\n      },\n    ],\n    17: [\n      {\n        id: 5,\n        title: eventsData.clientCall || 'Client Call',\n        time: '3:30 PM',\n        type: 'call',\n        color: 'bg-green-500',\n      },\n    ],\n    20: [\n      {\n        id: 6,\n        title: eventsData.quarterlyReview || 'Quarterly Review',\n        time: '1:00 PM',\n        type: 'review',\n        color: 'bg-yellow-500',\n      },\n    ],\n  };\n\n  const upcomingEvents = upcomingEventsData.map((event, index) => ({\n    id: index + 1,\n    ...event,\n    color: ['border-blue-500', 'border-purple-500', 'border-red-500', 'border-blue-500'][index % 4],\n  }));\n\n  const filters = Object.keys(filtersData).map((key, index) => ({\n    name: filtersData[key],\n    icon: [Video, FileText, FileText, Phone, Star][index],\n    color: [\n      'text-blue-500',\n      'text-purple-500',\n      'text-red-500',\n      'text-green-500',\n      'text-yellow-500',\n    ][index],\n    checked: true,\n  }));\n\n  const calendars = Object.keys(calendarsData).map(key => ({\n    name: calendarsData[key],\n    checked: true,\n  }));\n\n  const eventTypes = Object.keys(eventCategoriesData).map(key => ({\n    name: eventCategoriesData[key],\n    checked: true,\n  }));\n\n  // Generate calendar days\n  const getDaysInMonth = date => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n\n    // Previous month days\n    const prevMonth = new Date(year, month - 1, 0);\n    for (let i = startingDayOfWeek - 1; i >= 0; i--) {\n      days.push({\n        day: prevMonth.getDate() - i,\n        isCurrentMonth: false,\n        isNextMonth: false,\n      });\n    }\n\n    // Current month days\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push({\n        day,\n        isCurrentMonth: true,\n        isNextMonth: false,\n      });\n    }\n\n    // Next month days\n    const remainingDays = 42 - days.length;\n    for (let day = 1; day <= remainingDays; day++) {\n      days.push({\n        day,\n        isCurrentMonth: false,\n        isNextMonth: true,\n      });\n    }\n\n    return days;\n  };\n\n  const monthsObj = safeT('months', { returnObjects: true }) || {};\n  const monthNames = [\n    monthsObj.january || 'January',\n    monthsObj.february || 'February',\n    monthsObj.march || 'March',\n    monthsObj.april || 'April',\n    monthsObj.may || 'May',\n    monthsObj.june || 'June',\n    monthsObj.july || 'July',\n    monthsObj.august || 'August',\n    monthsObj.september || 'September',\n    monthsObj.october || 'October',\n    monthsObj.november || 'November',\n    monthsObj.december || 'December',\n  ];\n\n  const daysShortObj = safeT('daysShort', { returnObjects: true }) || {};\n  const weekDays = [\n    daysShortObj.sunday || 'Sun',\n    daysShortObj.monday || 'Mon',\n    daysShortObj.tuesday || 'Tue',\n    daysShortObj.wednesday || 'Wed',\n    daysShortObj.thursday || 'Thu',\n    daysShortObj.friday || 'Fri',\n    daysShortObj.saturday || 'Sat',\n  ];\n  const days = getDaysInMonth(currentDate);\n\n  const navigateMonth = direction => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      newDate.setMonth(prev.getMonth() + direction);\n      return newDate;\n    });\n  };\n\n  return (\n    <div className='flex h-screen bg-gray-50'>\n      {/* Left Sidebar */}\n      <div className='w-64 bg-white border-r border-gray-200 flex flex-col'>\n        {/* Mini Calendar */}\n        <div className='p-6 border-b border-gray-200'>\n          <div className='flex items-center justify-between mb-3'>\n            <h3 className='text-base font-medium text-black'>\n              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n            </h3>\n            <div className='flex items-center space-x-1'>\n              <button className='p-1 hover:bg-gray-100 rounded'>\n                <ChevronLeft className='w-4 h-4 text-gray-500' />\n              </button>\n              <button className='p-1 hover:bg-gray-100 rounded'>\n                <ChevronRight className='w-4 h-4 text-gray-500' />\n              </button>\n            </div>\n          </div>\n\n          {/* Mini calendar grid */}\n          <div className='grid grid-cols-7 gap-1 text-xs mb-2'>\n            {Object.values(\n              safeT('daysMin', { returnObjects: true }) || ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            ).map((day, index) => (\n              <div key={index} className='text-center text-gray-500 py-1'>\n                {day}\n              </div>\n            ))}\n          </div>\n\n          <div className='grid grid-cols-7 gap-1 text-sm'>\n            {/* Sample mini calendar days */}\n            {[...Array(31)].map((_, index) => {\n              const day = index + 1;\n              const isToday = day === 15;\n              return (\n                <div\n                  key={index}\n                  className={`text-center py-1 cursor-pointer hover:bg-gray-100 rounded ${\n                    isToday\n                      ? 'bg-blue-600 text-white rounded-full w-7 h-7 flex items-center justify-center mx-auto'\n                      : ''\n                  }`}\n                >\n                  {day}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Filters and Calendars */}\n        <div className='flex-1 p-6 space-y-6 overflow-y-auto'>\n          <div>\n            <h4 className='text-sm font-medium text-gray-500 mb-3'>\n              {safeT('filters', 'Filters')}\n            </h4>\n            <div className='space-y-2'>\n              {filters.map((filter, index) => (\n                <label key={index} className='flex items-center space-x-2 cursor-pointer'>\n                  <input\n                    type='checkbox'\n                    className='h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                    defaultChecked={filter.checked}\n                  />\n                  <filter.icon className={`w-4 h-4 ${filter.color}`} />\n                  <span className='text-sm text-black'>{filter.name}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n          <div>\n            <h4 className='text-sm font-medium text-gray-500 mb-3'>\n              {safeT('myCalendars', 'My Calendars')}\n            </h4>\n            <div className='space-y-2'>\n              {calendars.map((cal, index) => (\n                <label key={index} className='flex items-center space-x-2 cursor-pointer'>\n                  <input\n                    type='checkbox'\n                    className='h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                    defaultChecked={cal.checked}\n                  />\n                  <span className='text-sm text-black'>{cal.name}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n          <div>\n            <h4 className='text-sm font-medium text-gray-500 mb-3'>\n              {safeT('eventTypes', 'Event Types')}\n            </h4>\n            <div className='space-y-2'>\n              {eventTypes.map((type, index) => (\n                <label key={index} className='flex items-center space-x-2 cursor-pointer'>\n                  <input\n                    type='checkbox'\n                    className='h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                    defaultChecked={type.checked}\n                  />\n                  <span className='text-sm text-black'>{type.name}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className='flex-1 flex flex-col'>\n        {/* Header */}\n        <div className='flex items-center justify-between p-6 border-b border-gray-200 bg-white'>\n          <div className='flex items-center space-x-4'>\n            <h2 className='text-xl font-semibold text-black'>{`${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`}</h2>\n            <button\n              onClick={() => setCurrentDate(new Date())}\n              className='px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50'\n            >\n              {safeT('today', 'Today')}\n            </button>\n            <div className='flex items-center'>\n              <button\n                onClick={() => navigateMonth(-1)}\n                className='p-2 text-gray-500 rounded-md hover:bg-gray-100'\n              >\n                <ChevronLeft className='w-5 h-5' />\n              </button>\n              <button\n                onClick={() => navigateMonth(1)}\n                className='p-2 text-gray-500 rounded-md hover:bg-gray-100'\n              >\n                <ChevronRight className='w-5 h-5' />\n              </button>\n            </div>\n          </div>\n          <div className='flex items-center space-x-4'>\n            <div className='relative'>\n              <Search className='absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400' />\n              <input\n                type='text'\n                placeholder={safeT('searchPlaceholder', 'Search events...')}\n                className='pl-10 pr-4 py-2 w-64 text-sm border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'\n              />\n            </div>\n            <div className='flex items-center bg-gray-100 rounded-md p-1'>\n              {[\n                { name: safeT('views.month', 'Month'), icon: Grid3X3 },\n                { name: safeT('views.week', 'Week'), icon: Columns },\n                { name: safeT('views.day', 'Day'), icon: CalendarViewIcon },\n                { name: safeT('views.list', 'List'), icon: List },\n              ].map(view => (\n                <button\n                  key={view.name}\n                  onClick={() => setViewMode(view.name)}\n                  className={`flex items-center space-x-2 px-3 py-1 text-sm rounded-md ${\n                    viewMode === view.name ? 'bg-white text-black shadow-sm' : 'text-gray-600'\n                  }`}\n                >\n                  <view.icon className='w-4 h-4' />\n                  <span>{view.name}</span>\n                </button>\n              ))}\n            </div>\n            <button className='flex items-center space-x-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700'>\n              <Plus className='w-4 h-4' />\n              <span>{safeT('newEvent', 'New Event')}</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Calendar Grid */}\n        <div className='flex-1 grid grid-cols-7'>\n          {weekDays.map(day => (\n            <div\n              key={day}\n              className='text-center py-3 text-sm font-medium text-gray-500 border-b border-l border-gray-200'\n            >\n              {day}\n            </div>\n          ))}\n\n          {days.map((dayObj, index) => (\n            <div\n              key={index}\n              className={`relative p-2 border-b border-l border-gray-200 ${\n                !dayObj.isCurrentMonth ? 'bg-gray-50' : 'bg-white'\n              } ${index % 7 === 0 ? 'border-l-0' : ''}`}\n              style={{ minHeight: '120px' }}\n            >\n              <span\n                className={`text-sm ${\n                  selectedDate === dayObj.day && dayObj.isCurrentMonth\n                    ? 'bg-blue-600 text-white rounded-full w-7 h-7 flex items-center justify-center'\n                    : 'text-gray-900'\n                } ${!dayObj.isCurrentMonth ? 'text-gray-400' : ''}`}\n              >\n                {dayObj.day}\n              </span>\n              <div className='mt-2 space-y-1'>\n                {events[dayObj.day] &&\n                  dayObj.isCurrentMonth &&\n                  events[dayObj.day].map(event => (\n                    <div\n                      key={event.id}\n                      className={`p-1.5 text-xs text-white rounded cursor-pointer ${event.color}`}\n                    >\n                      <p className='font-medium'>{event.title}</p>\n                      {event.time && <p className='text-white/80'>{event.time}</p>}\n                    </div>\n                  ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Right Sidebar */}\n      <div className='w-80 bg-white border-l border-gray-200 flex flex-col'>\n        {/* Upcoming Events */}\n        <div className='p-6 border-b border-gray-200'>\n          <div className='flex items-center justify-between mb-4'>\n            <h3 className='text-base font-medium text-black'>{safeT('upcoming', 'Upcoming')}</h3>\n            <a href='#' className='text-sm font-medium text-blue-600 hover:underline'>\n              {safeT('viewAll', 'View All')}\n            </a>\n          </div>\n          <div className='space-y-4'>\n            {upcomingEvents.map(event => (\n              <div key={event.id} className={`pl-3 border-l-2 ${event.color}`}>\n                <p className='text-sm font-medium text-black'>{event.title}</p>\n                <p className='text-xs text-gray-500'>{event.company}</p>\n                <p className='text-xs text-gray-500'>\n                  {event.time} &middot; {event.location} &middot; {event.duration}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Selected Event Details */}\n        {selectedEvent && (\n          <div className='flex-1 p-6 space-y-6 overflow-y-auto'>\n            <div className='flex items-center justify-between'>\n              <h3 className='text-lg font-semibold text-black'>\n                {safeT('eventDetails', 'Event Details')}\n              </h3>\n              <div className='flex items-center space-x-2'>\n                <button className='p-2 hover:bg-gray-100 rounded-full'>\n                  <Share className='w-4 h-4 text-gray-500' />\n                </button>\n                <button className='p-2 hover:bg-gray-100 rounded-full'>\n                  <Edit className='w-4 h-4 text-gray-500' />\n                </button>\n                <button className='p-2 hover:bg-gray-100 rounded-full'>\n                  <Trash2 className='w-4 h-4 text-gray-500' />\n                </button>\n                <button className='p-2 hover:bg-gray-100 rounded-full'>\n                  <X className='w-4 h-4 text-gray-500' />\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <p className='text-2xl font-bold text-black'>{selectedEvent.title}</p>\n              <p className='text-sm text-gray-500'>{selectedEvent.type}</p>\n            </div>\n\n            <div className='space-y-4'>\n              <div className='flex items-start space-x-3'>\n                <Clock className='w-5 h-5 text-gray-400 mt-0.5' />\n                <div>\n                  <p className='text-sm text-black'>{selectedEvent.date}</p>\n                  <p className='text-sm text-gray-500'>{selectedEvent.time}</p>\n                </div>\n              </div>\n              <div className='flex items-start space-x-3'>\n                <MapPin className='w-5 h-5 text-gray-400 mt-0.5' />\n                <p className='text-sm text-black'>{selectedEvent.location}</p>\n              </div>\n              <div className='flex items-start space-x-3'>\n                <Users className='w-5 h-5 text-gray-400 mt-0.5' />\n                <div>\n                  <p className='text-sm text-black'>\n                    {safeT('organizer', 'Organizer')}: {selectedEvent.organizer}\n                  </p>\n                  <p className='text-sm text-gray-500'>\n                    {safeT('attendees', 'Attendees')}: {selectedEvent.participants.join(', ')}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className='text-sm font-medium text-black mb-2'>\n                {safeT('description', 'Description')}\n              </h4>\n              <p className='text-sm text-gray-600'>{selectedEvent.description}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Add Event Form (Example) */}\n        <div className='p-6 border-t border-gray-200'>\n          <h3 className='text-base font-medium text-black mb-4'>\n            {safeT('newEvent', 'New Event')}\n          </h3>\n          <div className='space-y-4'>\n            <input\n              type='text'\n              placeholder={safeT('eventTitlePlaceholder', 'Event title...')}\n              className='w-full px-3 py-2 text-sm border border-gray-300 rounded-md'\n            />\n            <input\n              type='text'\n              placeholder={safeT('eventType', 'Event type')}\n              className='w-full px-3 py-2 text-sm border border-gray-300 rounded-md'\n            />\n            <div className='flex items-center space-x-2'>\n              <input\n                type='date'\n                className='w-full px-3 py-2 text-sm border border-gray-300 rounded-md'\n              />\n              <input\n                type='time'\n                className='w-full px-3 py-2 text-sm border border-gray-300 rounded-md'\n              />\n            </div>\n            <label className='flex items-center space-x-2'>\n              <input type='checkbox' className='h-4 w-4 rounded border-gray-300' />\n              <span className='text-sm'>{safeT('allDayEvent', 'All day event')}</span>\n            </label>\n            <input\n              type='text'\n              placeholder={safeT('locationPlaceholder', 'Location...')}\n              className='w-full px-3 py-2 text-sm border border-gray-300 rounded-md'\n            />\n            <button className='w-full flex items-center justify-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-50 border border-gray-300 rounded-md hover:bg-gray-100'>\n              <Users className='w-4 h-4' />\n              <span>{safeT('addParticipants', 'Add Participants')}</span>\n            </button>\n            <textarea\n              placeholder={safeT('descriptionPlaceholder', 'Description...')}\n              rows='3'\n              className='w-full px-3 py-2 text-sm border border-gray-300 rounded-md'\n            ></textarea>\n            <button className='w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700'>\n              {safeT('save', 'Save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\calendar\\EventModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientCard.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Fragment' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Transition' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeIcon' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowTopRightOnSquareIcon' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Fragment } from 'react';\nimport { Menu, Transition } from '@headlessui/react';\nimport {\n  EyeIcon,\n  PencilIcon,\n  TrashIcon,\n  PhoneIcon,\n  EnvelopeIcon,\n  DocumentTextIcon,\n  CalculatorIcon,\n  MapPinIcon,\n  EllipsisVerticalIcon,\n  ArrowTopRightOnSquareIcon,\n} from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport default function ClientCard({ client, onEdit, onDelete, onCreateInvoice, onCreateQuote }) {\n  const { t, i18n } = useTranslation(['clients', 'common']);\n\n  // Funzione per ottenere il nome da visualizzare\n  const getDisplayName = client => {\n    return client.full_name || client.name || t('card.fallbackName');\n  };\n\n  // Funzione per generare le iniziali dell'avatar\n  const getInitials = name => {\n    if (!name) return '?';\n    return name\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase())\n      .slice(0, 2)\n      .join('');\n  };\n\n  const displayName = getDisplayName(client);\n  const initials = getInitials(displayName);\n\n  return (\n    <div className='bg-white dark:bg-gray-800 overflow-hidden shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200'>\n      <div className='p-6'>\n        <div className='flex items-center justify-between'>\n          <div className='flex items-center'>\n            <div className='flex-shrink-0'>\n              <div className='h-12 w-12 rounded-full bg-blue-500 flex items-center justify-center'>\n                <span className='text-base font-medium text-white'>{initials}</span>\n              </div>\n            </div>\n            <div className='ml-4'>\n              <h3 className='text-lg font-medium text-gray-900 dark:text-white truncate'>\n                {displayName}\n              </h3>\n              <p className='text-sm text-gray-500 dark:text-gray-400 truncate'>{client.email}</p>\n            </div>\n          </div>\n\n          {/* Actions Menu */}\n          <Menu as='div' className='relative inline-block text-left'>\n            <div>\n              <Menu.Button className='inline-flex justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-2 py-2 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'>\n                <EllipsisVerticalIcon className='h-5 w-5' />\n              </Menu.Button>\n            </div>\n\n            <Menu.Items className='origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none z-10'>\n              <div className='py-1'>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onEdit(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white'\n                          : 'text-gray-700 dark:text-gray-200',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <PencilIcon className='mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500' />\n                      {t('actions.edit')}\n                    </button>\n                  )}\n                </Menu.Item>\n\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onCreateInvoice && onCreateInvoice(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white'\n                          : 'text-gray-700 dark:text-gray-200',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <DocumentTextIcon className='mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500' />\n                      {t('actions.createInvoice')}\n                    </button>\n                  )}\n                </Menu.Item>\n\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onCreateQuote && onCreateQuote(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white'\n                          : 'text-gray-700 dark:text-gray-200',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <CalculatorIcon className='mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500' />\n                      {t('actions.createQuote')}\n                    </button>\n                  )}\n                </Menu.Item>\n\n                <div className='border-t border-gray-100 dark:border-gray-600'></div>\n\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onDelete(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-red-50 dark:bg-red-900/20 text-red-900 dark:text-red-400'\n                          : 'text-red-700 dark:text-red-400',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <TrashIcon className='mr-3 h-5 w-5 text-red-400 group-hover:text-red-500' />\n                      {t('actions.delete')}\n                    </button>\n                  )}\n                </Menu.Item>\n              </div>\n            </Menu.Items>\n          </Menu>\n        </div>\n\n        {/* Client Info */}\n        <div className='mt-4 space-y-2'>\n          <div className='flex items-center text-sm text-gray-600 dark:text-gray-400'>\n            <PhoneIcon className='h-4 w-4 mr-2' />\n            <span>{client.phone || t('card.noPhone')}</span>\n          </div>\n          <div className='flex items-center text-sm text-gray-600 dark:text-gray-400'>\n            <MapPinIcon className='h-4 w-4 mr-2' />\n            <span>{client.city || t('card.noCity')}</span>\n          </div>\n          {client.vat_number && (\n            <div className='text-sm text-gray-600 dark:text-gray-400'>\n              <span className='font-medium'>{t('card.vatNumber')}</span> {client.vat_number}\n            </div>\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        <div className='mt-4 flex space-x-2'>\n          {client.phone && (\n            <a\n              href={`tel:${client.phone}`}\n              className='flex items-center justify-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200'\n              title={t('actions.call')}\n            >\n              <PhoneIcon className='h-4 w-4 mr-1' />\n              {t('actions.call')}\n            </a>\n          )}\n          {client.email && (\n            <a\n              href={`mailto:${client.email}`}\n              className='flex items-center justify-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200'\n              title={t('history.email')}\n            >\n              <EnvelopeIcon className='h-4 w-4 mr-1' />\n              {t('history.email')}\n            </a>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className='mt-4 pt-4 border-t border-gray-200 dark:border-gray-700'>\n          <div className='text-xs text-gray-500 dark:text-gray-400'>\n            {t('card.createdAt')}{' '}\n            {client.created_at\n              ? new Date(client.created_at).toLocaleDateString(i18n.language)\n              : t('card.notAvailable')}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientFilters.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientHistoryView.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadClientHistory' function makes the dependencies of useEffect Hook (at line 32) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'loadClientHistory' in its own useCallback() Hook.","line":34,"column":9,"nodeType":"VariableDeclarator","endLine":50,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ArrowLeftIcon,\n  DocumentTextIcon,\n  ReceiptPercentIcon,\n  CalendarDaysIcon,\n  BanknotesIcon,\n  PhoneIcon,\n  EnvelopeIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/outline';\nimport clientService from '@lib/clientService';\nimport { notify } from '@lib/uiUtils';\n\nexport default function ClientHistoryView() {\n  const { clientId } = useParams();\n  const { t } = useTranslation('clients');\n  const [loading, setLoading] = useState(true);\n  const [historyData, setHistoryData] = useState(null);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('timeline');\n\n  useEffect(() => {\n    if (clientId) {\n      loadClientHistory();\n    }\n  }, [clientId, loadClientHistory]);\n\n  const loadClientHistory = async () => {\n    setLoading(true);\n    try {\n      const result = await clientService.getClientHistory(clientId);\n      if (result.error) {\n        setError(result.error.message);\n        notify.error(t('history.loadingError'));\n      } else {\n        setHistoryData(result.data);\n      }\n    } catch (err) {\n      setError(err.message);\n      notify.error(t('history.loadingError'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className='min-h-screen bg-gray-50 dark:bg-gray-900'>\n        <div className='flex items-center justify-center py-12'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600'></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !historyData) {\n    return (\n      <div className='min-h-screen bg-gray-50 dark:bg-gray-900 py-6 px-4 sm:px-6 lg:px-8'>\n        <div className='max-w-3xl mx-auto'>\n          <div className='bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4'>\n            <div className='flex'>\n              <XCircleIcon className='h-5 w-5 text-red-400' aria-hidden='true' />\n              <div className='ml-3'>\n                <h3 className='text-sm font-medium text-red-800 dark:text-red-400'>\n                  {t('history.loadingError')}\n                </h3>\n                <div className='mt-2 text-sm text-red-700 dark:text-red-300'>\n                  {error || t('history.loadingErrorMsg')}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='mt-4'>\n            <Link\n              to='/clients'\n              className='inline-flex items-center text-sm text-primary-600 dark:text-primary-400 hover:text-primary-500'\n            >\n              <ArrowLeftIcon className='h-4 w-4 mr-1' />\n              {t('history.back')}\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { client, invoices, quotes, appointments, totalRevenue } = historyData;\n\n  const timelineEntries = [\n    ...invoices.map(invoice => ({\n      id: `invoice-${invoice.id}`,\n      type: 'invoice',\n      title: t('history.invoiceTitle', { number: invoice.invoice_number }),\n      date: new Date(invoice.created_at),\n      status: invoice.status,\n      amount: invoice.total_amount,\n      data: invoice,\n    })),\n    ...quotes.map(quote => ({\n      id: `quote-${quote.id}`,\n      type: 'quote',\n      title: t('history.quoteTitle', { number: quote.quote_number }),\n      date: new Date(quote.created_at),\n      status: quote.status,\n      amount: quote.total_amount,\n      data: quote,\n    })),\n    ...appointments.map(appointment => ({\n      id: `appointment-${appointment.id}`,\n      type: 'appointment',\n      title: appointment.title,\n      date: new Date(appointment.start_time),\n      status: appointment.status,\n      data: appointment,\n    })),\n  ].sort((a, b) => b.date - a.date);\n\n  const getStatusInfo = (type, status) => {\n    const statusConfigs = {\n      invoice: {\n        draft: { color: 'gray', icon: ClockIcon, label: t('history.status.draft') },\n        sent: { color: 'blue', icon: ExclamationCircleIcon, label: t('history.status.sent') },\n        paid: { color: 'green', icon: CheckCircleIcon, label: t('history.status.paid') },\n        overdue: { color: 'red', icon: XCircleIcon, label: t('history.status.overdue') },\n        cancelled: { color: 'red', icon: XCircleIcon, label: t('history.status.cancelled') },\n      },\n      quote: {\n        draft: { color: 'gray', icon: ClockIcon, label: t('history.status.draft') },\n        sent: { color: 'blue', icon: ExclamationCircleIcon, label: t('history.status.sent') },\n        accepted: { color: 'green', icon: CheckCircleIcon, label: t('history.status.accepted') },\n        rejected: { color: 'red', icon: XCircleIcon, label: t('history.status.rejected') },\n        expired: {\n          color: 'yellow',\n          icon: ExclamationCircleIcon,\n          label: t('history.status.expired'),\n        },\n      },\n      appointment: {\n        scheduled: { color: 'blue', icon: ClockIcon, label: t('history.status.scheduled') },\n        completed: { color: 'green', icon: CheckCircleIcon, label: t('history.status.completed') },\n        cancelled: { color: 'red', icon: XCircleIcon, label: t('history.status.cancelled') },\n      },\n    };\n\n    return statusConfigs[type]?.[status] || { color: 'gray', icon: ClockIcon, label: status };\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount || 0);\n  };\n\n  const tabs = [\n    { id: 'timeline', name: t('history.timeline'), count: timelineEntries.length },\n    { id: 'invoices', name: t('history.invoices'), count: invoices.length },\n    { id: 'quotes', name: t('history.quotes'), count: quotes.length },\n    { id: 'appointments', name: t('history.appointments'), count: appointments.length },\n  ];\n\n  return (\n    <div className='min-h-screen bg-gray-50 dark:bg-gray-900'>\n      <div className='bg-white dark:bg-gray-800 shadow'>\n        <div className='px-4 py-6 sm:px-6 lg:px-8'>\n          <div className='flex items-center justify-between'>\n            <div className='flex items-center space-x-4'>\n              <Link\n                to='/clients'\n                className='flex items-center text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'\n              >\n                <ArrowLeftIcon className='h-4 w-4 mr-1' />\n                {t('breadcrumb')}\n              </Link>\n              <div className='text-sm text-gray-400'>/</div>\n              <h1 className='text-2xl font-bold text-gray-900 dark:text-gray-100'>\n                {client.displayName}\n              </h1>\n            </div>\n\n            <div className='flex items-center space-x-4'>\n              {client.phone && (\n                <a\n                  href={`tel:${client.phone}`}\n                  className='inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500'\n                >\n                  <PhoneIcon className='h-4 w-4 mr-2' />\n                  {t('history.call')}\n                </a>\n              )}\n              {client.email && (\n                <a\n                  href={`mailto:${client.email}`}\n                  className='inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500'\n                >\n                  <EnvelopeIcon className='h-4 w-4 mr-2' />\n                  {t('history.email')}\n                </a>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className='px-4 py-6 sm:px-6 lg:px-8'>\n        <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4'>\n          <div className='bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg'>\n            <div className='p-5'>\n              <div className='flex items-center'>\n                <div className='flex-shrink-0'>\n                  <ReceiptPercentIcon className='h-6 w-6 text-green-600' />\n                </div>\n                <div className='ml-5 w-0 flex-1'>\n                  <dl>\n                    <dt className='text-sm font-medium text-gray-500 dark:text-gray-400 truncate'>\n                      {t('history.totalRevenue')}\n                    </dt>\n                    <dd className='text-lg font-medium text-gray-900 dark:text-gray-100'>\n                      {formatCurrency(totalRevenue)}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg'>\n            <div className='p-5'>\n              <div className='flex items-center'>\n                <div className='flex-shrink-0'>\n                  <DocumentTextIcon className='h-6 w-6 text-blue-600' />\n                </div>\n                <div className='ml-5 w-0 flex-1'>\n                  <dl>\n                    <dt className='text-sm font-medium text-gray-500 dark:text-gray-400 truncate'>\n                      {t('history.invoices')}\n                    </dt>\n                    <dd className='text-lg font-medium text-gray-900 dark:text-gray-100'>\n                      {invoices.length}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg'>\n            <div className='p-5'>\n              <div className='flex items-center'>\n                <div className='flex-shrink-0'>\n                  <BanknotesIcon className='h-6 w-6 text-purple-600' />\n                </div>\n                <div className='ml-5 w-0 flex-1'>\n                  <dl>\n                    <dt className='text-sm font-medium text-gray-500 dark:text-gray-400 truncate'>\n                      {t('history.quotes')}\n                    </dt>\n                    <dd className='text-lg font-medium text-gray-900 dark:text-gray-100'>\n                      {quotes.length}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg'>\n            <div className='p-5'>\n              <div className='flex items-center'>\n                <div className='flex-shrink-0'>\n                  <CalendarDaysIcon className='h-6 w-6 text-yellow-500' />\n                </div>\n                <div className='ml-5 w-0 flex-1'>\n                  <dl>\n                    <dt className='text-sm font-medium text-gray-500 dark:text-gray-400 truncate'>\n                      {t('history.appointments')}\n                    </dt>\n                    <dd className='text-lg font-medium text-gray-900 dark:text-gray-100'>\n                      {appointments.length}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className='px-4 sm:px-6 lg:px-8'>\n        <div className='sm:hidden'>\n          <label htmlFor='tabs' className='sr-only'>\n            Select a tab\n          </label>\n          <select\n            id='tabs'\n            name='tabs'\n            className='block w-full focus:ring-primary-500 focus:border-primary-500 border-gray-300 rounded-md'\n            defaultValue={tabs.find(tab => tab.id === activeTab).name}\n            onChange={e => setActiveTab(tabs.find(tab => tab.name === e.target.value).id)}\n          >\n            {tabs.map(tab => (\n              <option key={tab.name}>{tab.name}</option>\n            ))}\n          </select>\n        </div>\n        <div className='hidden sm:block'>\n          <div className='border-b border-gray-200 dark:border-gray-700'>\n            <nav className='-mb-px flex space-x-8' aria-label='Tabs'>\n              {tabs.map(tab => (\n                <button\n                  key={tab.name}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`${\n                    tab.id === activeTab\n                      ? 'border-primary-500 text-primary-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:border-gray-600'\n                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n                  aria-current={tab.id === activeTab ? 'page' : undefined}\n                >\n                  {tab.name}\n                  {tab.count ? (\n                    <span\n                      className={`${\n                        tab.id === activeTab\n                          ? 'bg-primary-100 text-primary-600'\n                          : 'bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-gray-300'\n                      } hidden ml-3 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block`}\n                    >\n                      {tab.count}\n                    </span>\n                  ) : null}\n                </button>\n              ))}\n            </nav>\n          </div>\n        </div>\n      </div>\n\n      <div className='px-4 py-6 sm:px-6 lg:px-8'>\n        {activeTab === 'timeline' && (\n          <div className='flow-root'>\n            <ul className='-mb-8'>\n              {timelineEntries.map((entry, entryIdx) => {\n                const { color, icon: Icon, label } = getStatusInfo(entry.type, entry.status);\n                const isLast = entryIdx === timelineEntries.length - 1;\n\n                return (\n                  <li key={entry.id}>\n                    <div className='relative pb-8'>\n                      {!isLast ? (\n                        <span\n                          className='absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700'\n                          aria-hidden='true'\n                        />\n                      ) : null}\n                      <div className='relative flex items-start space-x-3'>\n                        <div>\n                          <div\n                            className={`h-8 w-8 rounded-full bg-${color}-500 flex items-center justify-center ring-8 ring-white dark:ring-gray-800`}\n                          >\n                            {entry.type === 'invoice' && (\n                              <DocumentTextIcon className='h-5 w-5 text-white' />\n                            )}\n                            {entry.type === 'quote' && (\n                              <ReceiptPercentIcon className='h-5 w-5 text-white' />\n                            )}\n                            {entry.type === 'appointment' && (\n                              <CalendarDaysIcon className='h-5 w-5 text-white' />\n                            )}\n                          </div>\n                        </div>\n                        <div className='min-w-0 flex-1 pt-1.5'>\n                          <div className='text-sm text-gray-500 dark:text-gray-400'>\n                            <Link\n                              to={\n                                entry.type === 'invoice'\n                                  ? `/invoices/${entry.data.id}`\n                                  : entry.type === 'quote'\n                                    ? `/quotes/${entry.data.id}`\n                                    : '#'\n                              }\n                              className='font-medium text-gray-900 dark:text-gray-100'\n                            >\n                              {entry.title}\n                            </Link>\n                          </div>\n                          <p className='mt-0.5 text-sm text-gray-500 dark:text-gray-400'>\n                            {new Date(entry.date).toLocaleDateString('it-IT', {\n                              year: 'numeric',\n                              month: 'long',\n                              day: 'numeric',\n                            })}\n                          </p>\n                        </div>\n                        <div className='text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-400'>\n                          <span\n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${color}-100 text-${color}-800`}\n                          >\n                            <Icon className={`-ml-0.5 mr-1.5 h-4 w-4 text-${color}-500`} />\n                            {label}\n                          </span>\n                          {entry.amount && (\n                            <div className='mt-1 text-gray-900 dark:text-gray-100 font-medium'>\n                              {formatCurrency(entry.amount)}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        )}\n        {/* Render other tab content similarly */}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientImportExport.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientModal.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'Logger' is not defined.","line":90,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, Fragment } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport logger from '../../utils/Logger';\n\nconst ClientModal = ({ isOpen, onClose, onSave, client }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    address: '',\n    notes: '',\n  });\n  const [saving, setSaving] = useState(false);\n\n  // Placeholder translation function\n  const t = (key, params = {}) => {\n    const translations = {\n      'clients.modal.validation.required': 'Please fill in all required fields',\n      'clients.modal.editClient': 'Edit Client',\n      'clients.modal.newClient': 'New Client',\n      'clients.modal.clientName': 'Client Name',\n      'clients.modal.required': '*',\n      'clients.modal.placeholders.name': 'Enter client name',\n      'clients.modal.clientEmail': 'Email',\n      'clients.modal.placeholders.email': 'Enter email address',\n      'clients.modal.clientPhone': 'Phone',\n      'clients.modal.placeholders.phone': 'Enter phone number',\n      'clients.modal.clientAddress': 'Address',\n      'clients.modal.placeholders.address': 'Enter address',\n      'clients.modal.clientNotes': 'Notes',\n      'clients.modal.placeholders.notes': 'Enter notes',\n      'clients.modal.cancel': 'Cancel',\n      'clients.modal.save': 'Save',\n      'clients.modal.saving': 'Saving...',\n    };\n\n    let translation = translations[key] || key;\n\n    // Simple parameter replacement\n    Object.keys(params).forEach(param => {\n      translation = translation.replace(`{${param}}`, params[param]);\n    });\n\n    return translation;\n  };\n\n  // Initialize form with client data if in edit mode\n  useEffect(() => {\n    if (client) {\n      setFormData({\n        name: client.name || '',\n        email: client.email || '',\n        phone: client.phone || '',\n        address: client.address || '',\n        notes: client.notes || '',\n      });\n    } else {\n      // Reset form for new client\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        address: '',\n        notes: '',\n      });\n    }\n  }, [client, isOpen]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.email.trim() || !formData.phone.trim()) {\n      alert(t('clients.modal.validation.required'));\n      return;\n    }\n\n    setSaving(true);\n    try {\n      await onSave(formData);\n    } catch (error) {\n      Logger.error('Error saving client:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-20' onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-black bg-opacity-25' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 overflow-y-auto'>\n          <div className='flex min-h-full items-center justify-center p-4 text-center'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 scale-95'\n              enterTo='opacity-100 scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 scale-100'\n              leaveTo='opacity-0 scale-95'\n            >\n              <Dialog.Panel className='w-full max-w-md transform overflow-hidden rounded-lg bg-white p-6 text-left align-middle shadow-xl transition-all'>\n                <div className='flex justify-between items-center mb-4'>\n                  <Dialog.Title as='h3' className='text-lg font-medium text-gray-900'>\n                    {client ? t('clients.modal.editClient') : t('clients.modal.newClient')}\n                  </Dialog.Title>\n                  <button\n                    type='button'\n                    className='text-gray-400 hover:text-gray-500'\n                    onClick={onClose}\n                    disabled={saving}\n                  >\n                    <XMarkIcon className='h-5 w-5' />\n                  </button>\n                </div>\n\n                <form onSubmit={handleSubmit}>\n                  <div className='mb-4'>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('clients.modal.clientName')}{' '}\n                      <span className='text-red-500'>{t('clients.modal.required')}</span>\n                    </label>\n                    <div className='relative flex items-center'>\n                      <input\n                        type='text'\n                        name='name'\n                        value={formData.name}\n                        onChange={handleChange}\n                        className='w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500'\n                        placeholder={t('clients.modal.placeholders.name')}\n                        required\n                        disabled={saving}\n                      />\n                    </div>\n                  </div>\n\n                  <div className='grid grid-cols-2 gap-4 mb-4'>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-1'>\n                        {t('clients.modal.clientEmail')}{' '}\n                        <span className='text-red-500'>{t('clients.modal.required')}</span>\n                      </label>\n                      <div className='relative flex items-center'>\n                        <input\n                          type='email'\n                          name='email'\n                          value={formData.email}\n                          onChange={handleChange}\n                          className='w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500'\n                          placeholder={t('clients.modal.placeholders.email')}\n                          required\n                          disabled={saving}\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-1'>\n                        {t('clients.modal.clientPhone')}{' '}\n                        <span className='text-red-500'>{t('clients.modal.required')}</span>\n                      </label>\n                      <div className='relative flex items-center'>\n                        <input\n                          type='tel'\n                          name='phone'\n                          value={formData.phone}\n                          onChange={handleChange}\n                          className='w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500'\n                          placeholder={t('clients.modal.placeholders.phone')}\n                          required\n                          disabled={saving}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className='mb-4'>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('clients.modal.clientAddress')}\n                    </label>\n                    <div className='relative flex items-center'>\n                      <input\n                        type='text'\n                        name='address'\n                        value={formData.address}\n                        onChange={handleChange}\n                        className='w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500'\n                        placeholder={t('clients.modal.placeholders.address')}\n                        disabled={saving}\n                      />\n                    </div>\n                  </div>\n\n                  <div className='mb-6'>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('clients.modal.clientNotes')}\n                    </label>\n                    <div className='relative flex items-center'>\n                      <textarea\n                        name='notes'\n                        value={formData.notes}\n                        onChange={handleChange}\n                        rows='3'\n                        className='w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500'\n                        placeholder={t('clients.modal.placeholders.notes')}\n                        disabled={saving}\n                      />\n                    </div>\n                  </div>\n\n                  <div className='flex justify-end space-x-3'>\n                    <button\n                      type='button'\n                      className='px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50'\n                      onClick={onClose}\n                      disabled={saving}\n                    >\n                      {t('clients.modal.cancel')}\n                    </button>\n                    <button\n                      type='submit'\n                      className='px-4 py-2 bg-blue-600 rounded-md text-sm font-medium text-white hover:bg-blue-500 disabled:bg-blue-300'\n                      disabled={saving}\n                    >\n                      {saving ? t('clients.modal.saving') : t('clients.modal.save')}\n                    </button>\n                  </div>\n                </form>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n};\n\nexport default ClientModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientPagination.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientSearchFilter.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Fragment' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Transition' is defined but never used.","line":3,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Menu, Transition } from '@headlessui/react';\nimport {\n  MagnifyingGlassIcon,\n  FunnelIcon,\n  ChevronDownIcon,\n  XMarkIcon,\n  ArrowUpIcon,\n  ArrowDownIcon,\n} from '@heroicons/react/24/outline';\nimport { debounce } from '@lib/uiUtils';\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nconst ClientSearchFilter = ({\n  searchTerm,\n  setSearchTerm,\n  filters,\n  setFilters,\n  sortBy,\n  setSortBy,\n  sortOrder,\n  setSortOrder,\n  onSearch = () => {},\n  loading = false,\n  filteredCount = 0,\n  totalClients = 0,\n}) => {\n  const { t } = useTranslation('clients');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  // Debounced search function\n  const debouncedSearch = debounce((query, currentFilters, currentSort) => {\n    onSearch({\n      query,\n      filters: currentFilters,\n      sort: currentSort,\n    });\n  }, 300);\n\n  // Handle search input change\n  const handleSearchChange = e => {\n    const query = e.target.value;\n    setSearchTerm(query);\n    debouncedSearch(query, filters, { field: sortBy, direction: sortOrder });\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (filterKey, value) => {\n    const newFilters = {\n      ...filters,\n      [filterKey]: value,\n    };\n    setFilters(newFilters);\n    debouncedSearch(searchTerm, newFilters, { field: sortBy, direction: sortOrder });\n  };\n\n  // Removed unused handleSortChange function\n\n  // Clear all filters\n  const clearFilters = () => {\n    setSearchTerm('');\n    setFilters({\n      city: '',\n      hasEmail: '',\n      hasPhone: '',\n      hasVatNumber: '',\n    });\n    setSortBy('full_name');\n    setSortOrder('asc');\n    onSearch({\n      query: '',\n      filters: {\n        city: '',\n        hasEmail: '',\n        hasPhone: '',\n        hasVatNumber: '',\n      },\n      sort: {\n        field: 'full_name',\n        direction: 'asc',\n      },\n    });\n  };\n\n  // Check if any filters are active\n  const hasActiveFilters = searchTerm || Object.values(filters).some(value => value !== '');\n\n  // Sort options\n  const sortOptions = [\n    { label: t('searchFilter.sortOptions.nameAsc'), field: 'full_name', direction: 'asc' },\n    { label: t('searchFilter.sortOptions.nameDesc'), field: 'full_name', direction: 'desc' },\n    { label: t('searchFilter.sortOptions.emailAsc'), field: 'email', direction: 'asc' },\n    { label: t('searchFilter.sortOptions.emailDesc'), field: 'email', direction: 'desc' },\n    { label: t('searchFilter.sortOptions.cityAsc'), field: 'city', direction: 'asc' },\n    { label: t('searchFilter.sortOptions.cityDesc'), field: 'city', direction: 'desc' },\n    { label: t('searchFilter.sortOptions.dateDesc'), field: 'created_at', direction: 'desc' },\n    { label: t('searchFilter.sortOptions.dateAsc'), field: 'created_at', direction: 'asc' },\n  ];\n\n  return (\n    <div className='bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700'>\n      <div className='px-4 py-4 sm:px-6 lg:px-8'>\n        {/* Search and quick actions row */}\n        <div className='flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4'>\n          {/* Search input */}\n          <div className='flex-1 max-w-lg'>\n            <div className='relative'>\n              <div className='absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none'>\n                <MagnifyingGlassIcon className='h-4 w-4 text-gray-400' aria-hidden='true' />\n              </div>\n              <input\n                type='text'\n                value={searchTerm}\n                onChange={handleSearchChange}\n                className='block w-full pl-20 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 dark:focus:placeholder-gray-500 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 sm:text-sm'\n                placeholder={t('searchFilter.placeholder')}\n                disabled={loading}\n              />\n              {searchTerm && (\n                <div className='absolute inset-y-0 right-0 pr-3 flex items-center'>\n                  <button\n                    type='button'\n                    onClick={() => {\n                      setSearchTerm('');\n                      debouncedSearch('', filters, { field: sortBy, direction: sortOrder });\n                    }}\n                    className='text-gray-400 hover:text-gray-500 dark:hover:text-gray-300'\n                  >\n                    <XMarkIcon className='h-5 w-5' />\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className='flex items-center gap-2'>\n            {/* Sort dropdown */}\n            <Menu as='div' className='relative inline-block text-left'>\n              <div>\n                <Menu.Button className='inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white dark:bg-gray-700 px-3 py-2 text-sm font-semibold text-gray-900 dark:text-gray-100 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600'>\n                  <span className='flex items-center gap-1'>\n                    {sortOrder === 'asc' ? (\n                      <ArrowUpIcon className='h-4 w-4' />\n                    ) : (\n                      <ArrowDownIcon className='h-4 w-4' />\n                    )}\n                    {t('searchFilter.sort')}\n                  </span>\n                  <ChevronDownIcon className='-mr-1 h-5 w-5 text-gray-400' aria-hidden='true' />\n                </Menu.Button>\n              </div>\n\n              <Menu.Items className='absolute right-0 z-10 mt-2 w-64 origin-top-right rounded-md bg-white dark:bg-gray-700 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none'>\n                <div className='py-1'>\n                  {sortOptions.map(option => (\n                    <Menu.Item key={`${option.field}-${option.direction}`}>\n                      {({ active }) => (\n                        <button\n                          onClick={() => {\n                            setSortBy(option.field);\n                            setSortOrder(option.direction);\n                            debouncedSearch(searchTerm, filters, {\n                              field: option.field,\n                              direction: option.direction,\n                            });\n                          }}\n                          className={classNames(\n                            active\n                              ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-gray-100'\n                              : 'text-gray-700 dark:text-gray-300',\n                            sortBy === option.field && sortOrder === option.direction\n                              ? 'bg-primary-50 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400'\n                              : '',\n                            'block w-full text-left px-4 py-2 text-sm',\n                          )}\n                        >\n                          {option.label}\n                        </button>\n                      )}\n                    </Menu.Item>\n                  ))}\n                </div>\n              </Menu.Items>\n            </Menu>\n\n            {/* Advanced filters toggle */}\n            <button\n              type='button'\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              className={classNames(\n                showAdvancedFilters || Object.values(filters).some(v => v !== '')\n                  ? 'bg-primary-50 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400 ring-primary-500'\n                  : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 ring-gray-300 dark:ring-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600',\n                'inline-flex items-center gap-x-1.5 rounded-md px-3 py-2 text-sm font-semibold shadow-sm ring-1 ring-inset',\n              )}\n            >\n              <FunnelIcon className='h-4 w-4' />\n              {t('searchFilter.filters')}\n              {Object.values(filters).some(v => v !== '') && (\n                <span className='ml-1 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-primary-100 bg-primary-600 rounded-full'>\n                  {Object.values(filters).filter(v => v !== '').length}\n                </span>\n              )}\n            </button>\n\n            {/* Clear filters button */}\n            {hasActiveFilters && (\n              <button\n                type='button'\n                onClick={clearFilters}\n                className='inline-flex items-center gap-x-1.5 rounded-md bg-white dark:bg-gray-700 px-3 py-2 text-sm font-semibold text-gray-700 dark:text-gray-300 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600'\n              >\n                <XMarkIcon className='h-4 w-4' />\n                {t('searchFilter.clear')}\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Advanced filters panel */}\n        {showAdvancedFilters && (\n          <div className='mt-4 p-4 bg-gray-50 dark:bg-gray-900/20 rounded-lg'>\n            <h3 className='text-lg font-medium text-gray-900 dark:text-gray-100 mb-4'>\n              {t('searchFilter.advancedFilters')}\n            </h3>\n            <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4'>\n              {/* City filter */}\n              <div>\n                <label\n                  htmlFor='city'\n                  className='block text-sm font-medium text-gray-700 dark:text-gray-300'\n                >\n                  {t('searchFilter.city')}\n                </label>\n                <input\n                  type='text'\n                  name='city'\n                  id='city'\n                  value={filters.city}\n                  onChange={e => handleFilterChange('city', e.target.value)}\n                  className='mt-1 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100'\n                  placeholder={t('searchFilter.cityPlaceholder')}\n                />\n              </div>\n\n              {/* Has email filter */}\n              <div>\n                <label\n                  htmlFor='hasEmail'\n                  className='block text-sm font-medium text-gray-700 dark:text-gray-300'\n                >\n                  {t('searchFilter.hasEmail')}\n                </label>\n                <select\n                  id='hasEmail'\n                  name='hasEmail'\n                  value={filters.hasEmail}\n                  onChange={e => handleFilterChange('hasEmail', e.target.value)}\n                  className='mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100'\n                >\n                  <option value=''>{t('searchFilter.all')}</option>\n                  <option value='true'>{t('searchFilter.yes')}</option>\n                  <option value='false'>{t('searchFilter.no')}</option>\n                </select>\n              </div>\n\n              {/* Has phone filter */}\n              <div>\n                <label\n                  htmlFor='hasPhone'\n                  className='block text-sm font-medium text-gray-700 dark:text-gray-300'\n                >\n                  {t('searchFilter.hasPhone')}\n                </label>\n                <select\n                  id='hasPhone'\n                  name='hasPhone'\n                  value={filters.hasPhone}\n                  onChange={e => handleFilterChange('hasPhone', e.target.value)}\n                  className='mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100'\n                >\n                  <option value=''>{t('searchFilter.all')}</option>\n                  <option value='true'>{t('searchFilter.yes')}</option>\n                  <option value='false'>{t('searchFilter.no')}</option>\n                </select>\n              </div>\n\n              {/* Has VAT number filter */}\n              <div>\n                <label\n                  htmlFor='hasVatNumber'\n                  className='block text-sm font-medium text-gray-700 dark:text-gray-300'\n                >\n                  {t('searchFilter.hasVatNumber')}\n                </label>\n                <select\n                  id='hasVatNumber'\n                  name='hasVatNumber'\n                  value={filters.hasVatNumber}\n                  onChange={e => handleFilterChange('hasVatNumber', e.target.value)}\n                  className='mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100'\n                >\n                  <option value=''>{t('searchFilter.all')}</option>\n                  <option value='true'>{t('searchFilter.yes')}</option>\n                  <option value='false'>{t('searchFilter.no')}</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Results summary */}\n        <div className='mt-4 text-sm text-gray-500 dark:text-gray-400'>\n          {t('searchFilter.showingOf', { filteredCount, totalClients })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClientSearchFilter;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientTable.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientTableRow.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Fragment' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Transition' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeIcon' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowTopRightOnSquareIcon' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Fragment } from 'react';\nimport { Menu, Transition } from '@headlessui/react';\nimport {\n  EyeIcon,\n  PencilIcon,\n  TrashIcon,\n  PhoneIcon,\n  EnvelopeIcon,\n  DocumentTextIcon,\n  CalculatorIcon,\n  MapPinIcon,\n  EllipsisVerticalIcon,\n  ArrowTopRightOnSquareIcon,\n} from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport default function ClientTableRow({\n  client,\n  onEdit,\n  onDelete,\n  onCreateInvoice,\n  onCreateQuote,\n}) {\n  const { t, i18n } = useTranslation('clients');\n\n  // Funzione per ottenere il nome da visualizzare\n  const getDisplayName = client => {\n    return client.full_name || client.name || t('card.fallbackName');\n  };\n\n  // Funzione per generare le iniziali dell'avatar\n  const getInitials = name => {\n    if (!name) return '?';\n    return name\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase())\n      .slice(0, 2)\n      .join('');\n  };\n\n  const displayName = getDisplayName(client);\n  const initials = getInitials(displayName);\n\n  return (\n    <tr className='bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200'>\n      <td className='px-6 py-4 whitespace-nowrap'>\n        <div className='flex items-center'>\n          <div className='flex-shrink-0 h-10 w-10'>\n            <div className='h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center'>\n              <span className='text-sm font-medium text-white'>{initials}</span>\n            </div>\n          </div>\n          <div className='ml-4'>\n            <div className='text-sm font-medium text-gray-900 dark:text-white'>{displayName}</div>\n            <div className='text-sm text-gray-500 dark:text-gray-400'>{client.email}</div>\n          </div>\n        </div>\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n        {client.phone || '-'}\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n        {client.city || '-'}\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n        {client.vat_number || '-'}\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400'>\n        {client.created_at ? new Date(client.created_at).toLocaleDateString(i18n.language) : '-'}\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium'>\n        <div className='flex items-center space-x-2'>\n          {/* Quick Actions */}\n          <div className='flex space-x-1'>\n            {client.phone && (\n              <a\n                href={`tel:${client.phone}`}\n                className='text-gray-400 hover:text-blue-500 dark:text-gray-500 dark:hover:text-blue-400 transition-colors duration-200'\n                title={t('actions.call')}\n              >\n                <PhoneIcon className='h-4 w-4' />\n              </a>\n            )}\n            {client.email && (\n              <a\n                href={`mailto:${client.email}`}\n                className='text-gray-400 hover:text-green-500 dark:text-gray-500 dark:hover:text-green-400 transition-colors duration-200'\n                title={t('history.email')}\n              >\n                <EnvelopeIcon className='h-4 w-4' />\n              </a>\n            )}\n            {client.city && (\n              <a\n                href={`https://www.google.com/maps/search/${encodeURIComponent(client.city)}`}\n                target='_blank'\n                rel='noopener noreferrer'\n                className='text-gray-400 hover:text-red-500 dark:text-gray-500 dark:hover:text-red-400 transition-colors duration-200'\n                title={t('actions.map')}\n              >\n                <MapPinIcon className='h-4 w-4' />\n              </a>\n            )}\n          </div>\n\n          {/* Actions Menu */}\n          <Menu as='div' className='relative inline-block text-left'>\n            <div>\n              <Menu.Button className='inline-flex justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-2 py-1 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'>\n                <EllipsisVerticalIcon className='h-4 w-4' />\n              </Menu.Button>\n            </div>\n\n            <Menu.Items className='origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none z-10'>\n              <div className='py-1'>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onEdit(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white'\n                          : 'text-gray-700 dark:text-gray-200',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <PencilIcon className='mr-3 h-4 w-4 text-gray-400 group-hover:text-gray-500' />\n                      {t('actions.edit')}\n                    </button>\n                  )}\n                </Menu.Item>\n\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onCreateInvoice && onCreateInvoice(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white'\n                          : 'text-gray-700 dark:text-gray-200',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <DocumentTextIcon className='mr-3 h-4 w-4 text-gray-400 group-hover:text-gray-500' />\n                      {t('actions.createInvoice')}\n                    </button>\n                  )}\n                </Menu.Item>\n\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onCreateQuote && onCreateQuote(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white'\n                          : 'text-gray-700 dark:text-gray-200',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <CalculatorIcon className='mr-3 h-4 w-4 text-gray-400 group-hover:text-gray-500' />\n                      {t('actions.createQuote')}\n                    </button>\n                  )}\n                </Menu.Item>\n\n                <div className='border-t border-gray-100 dark:border-gray-600'></div>\n\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={() => onDelete(client)}\n                      className={classNames(\n                        active\n                          ? 'bg-red-50 dark:bg-red-900/20 text-red-900 dark:text-red-400'\n                          : 'text-red-700 dark:text-red-400',\n                        'group flex items-center px-4 py-2 text-sm w-full text-left',\n                      )}\n                    >\n                      <TrashIcon className='mr-3 h-4 w-4 text-red-400 group-hover:text-red-500' />\n                      {t('actions.delete')}\n                    </button>\n                  )}\n                </Menu.Item>\n              </div>\n            </Menu.Items>\n          </Menu>\n        </div>\n      </td>\n    </tr>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\ClientTableRowOptimized.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\DeleteConfirmationModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\clients\\InvoiceModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\ColorBlindnessFilters.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\ComponentErrorBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\ErrorBoundary.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'withTranslation' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":133,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":133,"endColumn":18,"suggestions":[{"fix":{"range":[4964,5004],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":134,"endColumn":16,"suggestions":[{"fix":{"range":[5009,5047],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":135,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":135,"endColumn":21,"suggestions":[{"fix":{"range":[5052,5071],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":168,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":168,"endColumn":18,"suggestions":[{"fix":{"range":[5852,5916],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":189,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":189,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorInfo' is defined but never used.","line":197,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has an unnecessary dependency: 'captureProps'. Either exclude it or remove the dependency array. Outer scope values like 'captureProps' aren't valid dependencies because mutating them doesn't re-render the component.","line":209,"column":7,"nodeType":"ArrayExpression","endLine":209,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [props, displayName]","fix":{"range":[7055,7089],"text":"[props, displayName]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":231,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":231,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ErrorBoundary as ReactErrorBoundary } from 'react-error-boundary';\nimport { ExclamationTriangleIcon, ArrowPathIcon } from '@heroicons/react/24/outline';\nimport Logger from '@utils/Logger';\nimport { withTranslation } from '@components/common/withTranslation';\nimport { captureError, addBreadcrumb, Sentry } from '@lib/sentry';\n\n/**\n * Error fallback component for displaying user-friendly error messages\n */\nconst ErrorFallback = ({ error, resetErrorBoundary }) => {\n  // Log error to console for development\n  if (import.meta.env.DEV) {\n    console.error('Error caught by boundary:', error);\n  }\n\n  const getErrorMessage = error => {\n    if (error?.message?.includes('ChunkLoadError') || error?.message?.includes('Loading chunk')) {\n      return {\n        title: 'Update Available',\n        message:\n          'A new version of the app is available. Please refresh the page to get the latest updates.',\n        action: 'Refresh Page',\n        actionFn: () => window.location.reload(),\n      };\n    }\n\n    if (error?.message?.includes('Network Error') || error?.message?.includes('fetch')) {\n      return {\n        title: 'Connection Error',\n        message:\n          'Unable to connect to the server. Please check your internet connection and try again.',\n        action: 'Try Again',\n        actionFn: resetErrorBoundary,\n      };\n    }\n\n    return {\n      title: 'Something went wrong',\n      message:\n        'An unexpected error occurred. Please try again or contact support if the problem persists.',\n      action: 'Try Again',\n      actionFn: resetErrorBoundary,\n    };\n  };\n\n  const errorInfo = getErrorMessage(error);\n\n  return (\n    <div className='min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4 sm:px-6 lg:px-8'>\n      <div className='max-w-md w-full space-y-8'>\n        <div className='text-center'>\n          <ExclamationTriangleIcon className='mx-auto h-12 w-12 text-yellow-400' />\n          <h1 className='mt-6 text-3xl font-extrabold text-gray-900 dark:text-white'>\n            {errorInfo.title}\n          </h1>\n          <p className='mt-2 text-sm text-gray-600 dark:text-gray-400'>{errorInfo.message}</p>\n\n          {import.meta.env.DEV && (\n            <details className='mt-4 text-left'>\n              <summary className='cursor-pointer text-sm text-gray-500 hover:text-gray-700'>\n                Show error details (Development)\n              </summary>\n              <pre className='mt-2 text-xs bg-gray-100 dark:bg-gray-800 p-3 rounded overflow-auto text-red-600 dark:text-red-400'>\n                {error?.stack || error?.message || 'Unknown error'}\n              </pre>\n            </details>\n          )}\n        </div>\n\n        <div className='space-y-3'>\n          <button\n            onClick={errorInfo.actionFn}\n            className='group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200'\n          >\n            <ArrowPathIcon className='w-4 h-4 mr-2' />\n            {errorInfo.action}\n          </button>\n\n          <button\n            onClick={() => (window.location.href = '/dashboard')}\n            className='group relative w-full flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200'\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Enhanced error logging function with Sentry integration\n */\nconst onError = (error, errorInfo) => {\n  console.error('Error boundary caught an error:', error, errorInfo);\n\n  // Add breadcrumb for error boundary activation\n  addBreadcrumb(\n    'Error boundary triggered',\n    'error',\n    {\n      errorMessage: error.message,\n      componentStack: errorInfo?.componentStack?.split('\\n')[1] || 'Unknown component',\n    },\n    'error',\n  );\n\n  // Capture error with Sentry including component stack trace\n  const eventId = captureError(error, {\n    component: 'ErrorBoundary',\n    action: 'error_boundary_catch',\n    extra: {\n      componentStack: errorInfo?.componentStack,\n      errorBoundary: true,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      referrer: document.referrer,\n    },\n  });\n\n  // Log to console for debugging\n  Logger.error('Error boundary caught error', {\n    error: error.message,\n    stack: error.stack,\n    componentStack: errorInfo?.componentStack,\n    sentryEventId: eventId,\n  });\n\n  // In development, also log component stack for debugging\n  if (import.meta.env.DEV && errorInfo?.componentStack) {\n    console.group('Component Stack Trace:');\n    console.log(errorInfo.componentStack);\n    console.groupEnd();\n  }\n};\n\n/**\n * Enhanced Error Boundary component with Sentry integration\n */\nconst ErrorBoundary = ({\n  children,\n  fallback: CustomFallback,\n  onError: customOnError,\n  component = 'Unknown',\n  isolateErrors = false,\n}) => {\n  const handleError = React.useCallback(\n    (error, errorInfo) => {\n      // Call our enhanced error handler\n      onError(error, errorInfo);\n\n      // Call custom error handler if provided\n      if (customOnError) {\n        customOnError(error, errorInfo);\n      }\n    },\n    [customOnError],\n  );\n\n  const handleReset = React.useCallback(() => {\n    // Add breadcrumb for error boundary reset\n    addBreadcrumb('Error boundary reset', 'user_action', { component }, 'info');\n\n    // Clear any error state if needed\n    if (import.meta.env.DEV) {\n      console.log(`Error boundary reset for component: ${component}`);\n    }\n  }, [component]);\n\n  return (\n    <ReactErrorBoundary\n      FallbackComponent={CustomFallback || ErrorFallback}\n      onError={handleError}\n      onReset={handleReset}\n      isolateErrorBoundary={isolateErrors}\n    >\n      {children}\n    </ReactErrorBoundary>\n  );\n};\n\nexport default ErrorBoundary;\n\n/**\n * Higher-order component for wrapping components with error boundaries\n */\nexport const withErrorBoundary = (Component, options = {}) => {\n  const { customFallback, componentName, isolateErrors = false, captureProps = false } = options;\n\n  const WrappedComponent = props => {\n    const displayName = componentName || Component.displayName || Component.name || 'Component';\n\n    // Custom error handler that captures component props if enabled\n    const handleError = React.useCallback(\n      (error, errorInfo) => {\n        const extraContext = {\n          component: displayName,\n          ...(captureProps && { props: JSON.stringify(props, null, 2) }),\n        };\n\n        captureError(error, {\n          component: displayName,\n          action: 'component_error',\n          extra: extraContext,\n        });\n      },\n      [props, displayName, captureProps],\n    );\n\n    return (\n      <ErrorBoundary\n        fallback={customFallback}\n        component={displayName}\n        onError={handleError}\n        isolateErrors={isolateErrors}\n      >\n        <Component {...props} />\n      </ErrorBoundary>\n    );\n  };\n\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n  return WrappedComponent;\n};\n\n/**\n * Hook for manually triggering error boundary with Sentry integration\n */\nexport const useErrorHandler = () => {\n  return React.useCallback((error, context = {}) => {\n    // Capture with Sentry before throwing\n    captureError(error, {\n      component: 'useErrorHandler',\n      action: 'manual_error_trigger',\n      ...context,\n    });\n\n    // Add breadcrumb\n    addBreadcrumb(\n      'Manual error triggered',\n      'error',\n      { errorMessage: error.message, ...context },\n      'error',\n    );\n\n    // Throw to trigger error boundary\n    throw error;\n  }, []);\n};\n\n/**\n * Sentry-enhanced version of the original ErrorBoundary\n * This creates a Sentry ErrorBoundary with fallback to our custom ErrorBoundary\n */\nexport const SentryErrorBoundary = ({ children, ...props }) => {\n  return (\n    <Sentry.ErrorBoundary\n      fallback={ErrorFallback}\n      beforeCapture={(scope, error, errorInfo) => {\n        // Add component context to Sentry scope\n        scope.setTag('errorBoundary', 'sentry');\n        scope.setContext('errorInfo', {\n          componentStack: errorInfo?.componentStack,\n          timestamp: new Date().toISOString(),\n        });\n      }}\n      {...props}\n    >\n      {children}\n    </Sentry.ErrorBoundary>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\LanguageSwitcher.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'languages'. Either include it or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [i18n.language, languages]","fix":{"range":[3219,3234],"text":"[i18n.language, languages]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ChevronDownIcon,\n  CheckIcon,\n  GlobeAltIcon,\n  ArrowPathIcon,\n} from '@heroicons/react/24/outline';\nimport { Transition } from '@headlessui/react';\n\nconst LanguageSwitcher = ({ className = '', showLabel = true, compact = false }) => {\n  const { i18n, t } = useTranslation('navigation');\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const dropdownRef = useRef(null);\n\n  // Available languages with metadata\n  const languages = [\n    {\n      code: 'it',\n      name: 'Italiano',\n      flag: '­ƒç«­ƒç╣',\n      direction: 'ltr',\n      locale: 'it-IT',\n    },\n    {\n      code: 'en',\n      name: 'English',\n      flag: '­ƒç║­ƒç©',\n      direction: 'ltr',\n      locale: 'en-US',\n    },\n    // Future RTL languages\n    {\n      code: 'ar',\n      name: 'Ïº┘äÏ╣Ï▒Ï¿┘èÏ®',\n      flag: '­ƒç©­ƒçª',\n      direction: 'rtl',\n      locale: 'ar-SA',\n      disabled: true, // Will be enabled in future\n    },\n  ];\n\n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Handle keyboard navigation\n  const handleKeyDown = event => {\n    if (event.key === 'Escape') {\n      setIsOpen(false);\n    } else if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      setIsOpen(!isOpen);\n    }\n  };\n\n  // Change language with loading state\n  const changeLanguage = async languageCode => {\n    if (languageCode === i18n.language || isLoading) return;\n\n    setIsLoading(true);\n    try {\n      await i18n.changeLanguage(languageCode);\n\n      // Save to localStorage for persistence\n      localStorage.setItem('nexa-language', languageCode);\n\n      // Apply RTL direction if needed\n      const selectedLang = languages.find(lang => lang.code === languageCode);\n      if (selectedLang) {\n        document.documentElement.dir = selectedLang.direction;\n        document.documentElement.lang = languageCode;\n\n        // Set locale for date/number formatting\n        if (selectedLang.locale) {\n          document.documentElement.setAttribute('data-locale', selectedLang.locale);\n        }\n      }\n\n      // Smooth transition effect\n      setTimeout(() => {\n        setIsOpen(false);\n        setIsLoading(false);\n      }, 300);\n    } catch (error) {\n      console.error('Failed to change language:', error);\n      setIsLoading(false);\n    }\n  };\n\n  // Detect and apply RTL on mount\n  useEffect(() => {\n    const currentLang = languages.find(lang => lang.code === i18n.language);\n    if (currentLang) {\n      document.documentElement.dir = currentLang.direction;\n      document.documentElement.lang = currentLang.code;\n      if (currentLang.locale) {\n        document.documentElement.setAttribute('data-locale', currentLang.locale);\n      }\n    }\n  }, [i18n.language]);\n\n  if (compact) {\n    return (\n      <div className={`relative ${className}`} ref={dropdownRef}>\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          className='flex items-center justify-center p-2 rounded-lg text-gray-600 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-700 transition-colors duration-200'\n          aria-label={t('language.switch', 'Switch language')}\n          aria-expanded={isOpen}\n          aria-haspopup='listbox'\n          disabled={isLoading}\n        >\n          {isLoading ? (\n            <ArrowPathIcon className='h-5 w-5 animate-spin' />\n          ) : (\n            <>\n              <span className='text-lg mr-1' role='img' aria-hidden='true'>\n                {currentLanguage.flag}\n              </span>\n              <ChevronDownIcon\n                className={`h-4 w-4 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}\n              />\n            </>\n          )}\n        </button>\n\n        <Transition\n          show={isOpen}\n          enter='transition ease-out duration-200'\n          enterFrom='opacity-0 scale-95'\n          enterTo='opacity-100 scale-100'\n          leave='transition ease-in duration-150'\n          leaveFrom='opacity-100 scale-100'\n          leaveTo='opacity-0 scale-95'\n        >\n          <div className='absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50'>\n            <div\n              className='py-1'\n              role='listbox'\n              aria-label={t('language.available', 'Available languages')}\n            >\n              {languages.map(language => (\n                <button\n                  key={language.code}\n                  onClick={() => !language.disabled && changeLanguage(language.code)}\n                  disabled={language.disabled || isLoading}\n                  className={`\n                    w-full text-left px-4 py-2 text-sm flex items-center justify-between\n                    ${\n                      language.code === i18n.language\n                        ? 'bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300'\n                        : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'\n                    }\n                    ${language.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                    transition-colors duration-150\n                  `}\n                  role='option'\n                  aria-selected={language.code === i18n.language}\n                >\n                  <div className='flex items-center'>\n                    <span className='text-lg mr-3' role='img' aria-hidden='true'>\n                      {language.flag}\n                    </span>\n                    <span>{language.name}</span>\n                    {language.disabled && (\n                      <span className='ml-2 text-xs text-gray-500 dark:text-gray-400'>\n                        {t('language.comingSoon', 'Coming soon')}\n                      </span>\n                    )}\n                  </div>\n                  {language.code === i18n.language && !language.disabled && (\n                    <CheckIcon className='h-4 w-4 text-blue-600 dark:text-blue-400' />\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        </Transition>\n      </div>\n    );\n  }\n\n  // Full language switcher with label\n  return (\n    <div className={`relative ${className}`} ref={dropdownRef}>\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        onKeyDown={handleKeyDown}\n        className='flex items-center space-x-2 px-3 py-2 rounded-lg text-gray-600 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-700 transition-colors duration-200'\n        aria-label={t('language.current', { language: currentLanguage.name })}\n        aria-expanded={isOpen}\n        aria-haspopup='listbox'\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <ArrowPathIcon className='h-5 w-5 animate-spin' />\n        ) : (\n          <GlobeAltIcon className='h-5 w-5' />\n        )}\n\n        {showLabel && (\n          <span className='hidden sm:block text-sm font-medium'>{currentLanguage.name}</span>\n        )}\n\n        <ChevronDownIcon\n          className={`h-4 w-4 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}\n        />\n      </button>\n\n      <Transition\n        show={isOpen}\n        enter='transition ease-out duration-200'\n        enterFrom='opacity-0 scale-95'\n        enterTo='opacity-100 scale-100'\n        leave='transition ease-in duration-150'\n        leaveFrom='opacity-100 scale-100'\n        leaveTo='opacity-0 scale-95'\n      >\n        <div className='absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50'>\n          <div\n            className='py-1'\n            role='listbox'\n            aria-label={t('language.available', 'Available languages')}\n          >\n            <div className='px-4 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700'>\n              {t('language.selectLanguage', 'Select Language')}\n            </div>\n\n            {languages.map(language => (\n              <button\n                key={language.code}\n                onClick={() => !language.disabled && changeLanguage(language.code)}\n                disabled={language.disabled || isLoading}\n                className={`\n                  w-full text-left px-4 py-3 text-sm flex items-center justify-between\n                  ${\n                    language.code === i18n.language\n                      ? 'bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300'\n                      : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'\n                  }\n                  ${language.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                  transition-colors duration-150\n                `}\n                role='option'\n                aria-selected={language.code === i18n.language}\n              >\n                <div className='flex items-center'>\n                  <span className='text-xl mr-3' role='img' aria-label={`${language.name} flag`}>\n                    {language.flag}\n                  </span>\n                  <div>\n                    <div className='font-medium'>{language.name}</div>\n                    {language.direction === 'rtl' && (\n                      <div className='text-xs text-gray-500 dark:text-gray-400'>\n                        {t('language.rtl', 'Right-to-left')}\n                      </div>\n                    )}\n                    {language.disabled && (\n                      <div className='text-xs text-gray-500 dark:text-gray-400'>\n                        {t('language.comingSoon', 'Coming soon')}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                {language.code === i18n.language && !language.disabled && (\n                  <CheckIcon className='h-5 w-5 text-blue-600 dark:text-blue-400' />\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      </Transition>\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\LazyComponents.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\LazyWrapper.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\MonitoringDashboard.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":402,"column":21,"nodeType":"MemberExpression","messageId":"limited","endLine":402,"endColumn":32,"suggestions":[{"fix":{"range":[14936,14981],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Monitoring Dashboard Component\n * Provides real-time monitoring of performance, errors, and accessibility\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { performanceMonitor } from '../../utils/PerformanceMonitor';\nimport { errorMonitor } from '../../utils/ErrorMonitor';\nimport { accessibilityTester, useAccessibilityTest } from '../../utils/AccessibilityTester';\n\ninterface MonitoringDashboardProps {\n  className?: string;\n  showDetailed?: boolean;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\ninterface SystemMetrics {\n  performance: {\n    score: number;\n    avgRenderTime: number;\n    totalMetrics: number;\n    coreWebVitals: Record<string, number>;\n  };\n  errors: {\n    totalErrors: number;\n    errorRate: number;\n    errorsByType: Record<string, number>;\n    errorsBySeverity: Record<string, number>;\n  };\n  accessibility: {\n    score: number;\n    violationCount: number;\n    impactSummary: {\n      minor: number;\n      moderate: number;\n      serious: number;\n      critical: number;\n    };\n  };\n}\n\nexport const MonitoringDashboard: React.FC<MonitoringDashboardProps> = ({\n  className = '',\n  showDetailed = false,\n  autoRefresh = true,\n  refreshInterval = 30000,\n}) => {\n  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const { report: a11yReport, runTest: runA11yTest } = useAccessibilityTest();\n\n  const collectMetrics = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      // Collect performance metrics\n      const perfSummary = performanceMonitor.getPerformanceSummary();\n      const perfScore = Math.max(\n        0,\n        Math.min(100, 100 - perfSummary.avgRenderTime / 10), // Basic scoring\n      );\n\n      // Collect error metrics\n      const errorStats = errorMonitor.getErrorStatistics();\n\n      // Collect accessibility metrics (run test if not available)\n      let a11yScore = 100;\n      let a11yViolations = 0;\n      let a11yImpactSummary = { minor: 0, moderate: 0, serious: 0, critical: 0 };\n\n      if (a11yReport) {\n        a11yScore = accessibilityTester.calculateAccessibilityScore(a11yReport);\n        a11yViolations = a11yReport.summary.violationCount;\n        a11yImpactSummary = a11yReport.summary.impactSummary;\n      } else {\n        // Trigger accessibility test\n        runA11yTest();\n      }\n\n      const systemMetrics: SystemMetrics = {\n        performance: {\n          score: Math.round(perfScore),\n          avgRenderTime: perfSummary.avgRenderTime,\n          totalMetrics: perfSummary.totalMetrics,\n          coreWebVitals: perfSummary.coreWebVitals,\n        },\n        errors: {\n          totalErrors: errorStats.totalErrors,\n          errorRate: errorStats.errorRate,\n          errorsByType: errorStats.errorsByType,\n          errorsBySeverity: errorStats.errorsBySeverity,\n        },\n        accessibility: {\n          score: a11yScore,\n          violationCount: a11yViolations,\n          impactSummary: a11yImpactSummary,\n        },\n      };\n\n      setMetrics(systemMetrics);\n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error('Failed to collect metrics:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [a11yReport, runA11yTest]);\n\n  useEffect(() => {\n    collectMetrics();\n  }, [collectMetrics]);\n\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(collectMetrics, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval, collectMetrics]);\n\n  const getScoreColor = (score: number): string => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    if (score >= 50) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  const getScoreBgColor = (score: number): string => {\n    if (score >= 90) return 'bg-green-100';\n    if (score >= 70) return 'bg-yellow-100';\n    if (score >= 50) return 'bg-orange-100';\n    return 'bg-red-100';\n  };\n\n  if (isLoading && !metrics) {\n    return (\n      <div className={`p-4 bg-white rounded-lg shadow ${className}`}>\n        <div className='animate-pulse'>\n          <div className='h-4 bg-gray-200 rounded w-1/4 mb-4'></div>\n          <div className='space-y-3'>\n            <div className='h-3 bg-gray-200 rounded'></div>\n            <div className='h-3 bg-gray-200 rounded'></div>\n            <div className='h-3 bg-gray-200 rounded'></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className={`p-4 bg-white rounded-lg shadow ${className}`}>\n        <div className='text-center text-gray-500'>\n          <p>Failed to load monitoring data</p>\n          <button\n            onClick={collectMetrics}\n            className='mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600'\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const overallScore = Math.round((metrics.performance.score + metrics.accessibility.score) / 2);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-md ${className}`}>\n      {/* Header */}\n      <div className='px-6 py-4 border-b border-gray-200'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <h3 className='text-lg font-semibold text-gray-900'>System Monitoring</h3>\n            {lastUpdated && (\n              <p className='text-sm text-gray-500'>\n                Last updated: {lastUpdated.toLocaleTimeString()}\n              </p>\n            )}\n          </div>\n          <div className='flex items-center space-x-3'>\n            {/* Overall Score */}\n            <div className={`px-3 py-1 rounded-full ${getScoreBgColor(overallScore)}`}>\n              <span className={`text-sm font-medium ${getScoreColor(overallScore)}`}>\n                {overallScore}/100\n              </span>\n            </div>\n\n            {/* Refresh Button */}\n            <button\n              onClick={collectMetrics}\n              disabled={isLoading}\n              className='p-2 text-gray-400 hover:text-gray-600 disabled:opacity-50'\n              title='Refresh metrics'\n            >\n              <svg\n                className={`w-5 h-5 ${isLoading ? 'animate-spin' : ''}`}\n                fill='none'\n                stroke='currentColor'\n                viewBox='0 0 24 24'\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  strokeWidth={2}\n                  d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15'\n                />\n              </svg>\n            </button>\n\n            {/* Expand/Collapse Button */}\n            <button\n              onClick={() => setIsExpanded(!isExpanded)}\n              className='p-2 text-gray-400 hover:text-gray-600'\n              title={isExpanded ? 'Collapse' : 'Expand'}\n            >\n              <svg\n                className={`w-5 h-5 transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n                fill='none'\n                stroke='currentColor'\n                viewBox='0 0 24 24'\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  strokeWidth={2}\n                  d='M19 9l-7 7-7-7'\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Metrics Grid */}\n      <div className='p-6'>\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-6'>\n          {/* Performance Metrics */}\n          <div className='space-y-3'>\n            <div className='flex items-center space-x-2'>\n              <div className='w-3 h-3 bg-blue-500 rounded-full'></div>\n              <h4 className='font-medium text-gray-900'>Performance</h4>\n            </div>\n            <div className={`text-2xl font-bold ${getScoreColor(metrics.performance.score)}`}>\n              {metrics.performance.score}/100\n            </div>\n            <div className='space-y-1 text-sm text-gray-600'>\n              <p>Avg Render: {metrics.performance.avgRenderTime.toFixed(2)}ms</p>\n              <p>Total Metrics: {metrics.performance.totalMetrics}</p>\n              {Object.keys(metrics.performance.coreWebVitals).length > 0 && (\n                <div className='mt-2'>\n                  <p className='font-medium'>Core Web Vitals:</p>\n                  {Object.entries(metrics.performance.coreWebVitals).map(([key, value]) => (\n                    <p key={key} className='ml-2'>\n                      {key}: {value.toFixed(2)}\n                    </p>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Error Metrics */}\n          <div className='space-y-3'>\n            <div className='flex items-center space-x-2'>\n              <div className='w-3 h-3 bg-red-500 rounded-full'></div>\n              <h4 className='font-medium text-gray-900'>Errors</h4>\n            </div>\n            <div className='text-2xl font-bold text-gray-900'>{metrics.errors.totalErrors}</div>\n            <div className='space-y-1 text-sm text-gray-600'>\n              <p>Error Rate: {metrics.errors.errorRate.toFixed(2)}/min</p>\n              {Object.keys(metrics.errors.errorsBySeverity).length > 0 && (\n                <div className='mt-2'>\n                  <p className='font-medium'>By Severity:</p>\n                  {Object.entries(metrics.errors.errorsBySeverity).map(([severity, count]) => (\n                    <p key={severity} className='ml-2'>\n                      {severity}: {count}\n                    </p>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Accessibility Metrics */}\n          <div className='space-y-3'>\n            <div className='flex items-center space-x-2'>\n              <div className='w-3 h-3 bg-purple-500 rounded-full'></div>\n              <h4 className='font-medium text-gray-900'>Accessibility</h4>\n            </div>\n            <div className={`text-2xl font-bold ${getScoreColor(metrics.accessibility.score)}`}>\n              {metrics.accessibility.score}/100\n            </div>\n            <div className='space-y-1 text-sm text-gray-600'>\n              <p>Violations: {metrics.accessibility.violationCount}</p>\n              {Object.keys(metrics.accessibility.impactSummary).length > 0 && (\n                <div className='mt-2'>\n                  <p className='font-medium'>By Impact:</p>\n                  {Object.entries(metrics.accessibility.impactSummary).map(\n                    ([impact, count]) =>\n                      count > 0 && (\n                        <p key={impact} className='ml-2'>\n                          {impact}: {count}\n                        </p>\n                      ),\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed View */}\n        {(isExpanded || showDetailed) && (\n          <div className='mt-8 pt-6 border-t border-gray-200'>\n            <h4 className='font-medium text-gray-900 mb-4'>Detailed Metrics</h4>\n\n            {/* Performance Details */}\n            <div className='mb-6'>\n              <h5 className='text-sm font-medium text-gray-700 mb-2'>Performance Breakdown</h5>\n              <div className='bg-gray-50 p-4 rounded-lg'>\n                <div className='grid grid-cols-2 md:grid-cols-4 gap-4 text-sm'>\n                  <div>\n                    <p className='font-medium'>Render Time</p>\n                    <p className='text-gray-600'>\n                      {metrics.performance.avgRenderTime.toFixed(2)}ms\n                    </p>\n                  </div>\n                  <div>\n                    <p className='font-medium'>Total Metrics</p>\n                    <p className='text-gray-600'>{metrics.performance.totalMetrics}</p>\n                  </div>\n                  {Object.entries(metrics.performance.coreWebVitals).map(([key, value]) => (\n                    <div key={key}>\n                      <p className='font-medium'>{key}</p>\n                      <p className='text-gray-600'>{value.toFixed(2)}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Error Details */}\n            {metrics.errors.totalErrors > 0 && (\n              <div className='mb-6'>\n                <h5 className='text-sm font-medium text-gray-700 mb-2'>Error Breakdown</h5>\n                <div className='bg-gray-50 p-4 rounded-lg'>\n                  <div className='grid grid-cols-2 gap-4 text-sm'>\n                    <div>\n                      <p className='font-medium mb-1'>By Type:</p>\n                      {Object.entries(metrics.errors.errorsByType).map(([type, count]) => (\n                        <p key={type} className='text-gray-600 ml-2'>\n                          {type}: {count}\n                        </p>\n                      ))}\n                    </div>\n                    <div>\n                      <p className='font-medium mb-1'>By Severity:</p>\n                      {Object.entries(metrics.errors.errorsBySeverity).map(([severity, count]) => (\n                        <p key={severity} className='text-gray-600 ml-2'>\n                          {severity}: {count}\n                        </p>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Quick Actions */}\n            <div>\n              <h5 className='text-sm font-medium text-gray-700 mb-2'>Quick Actions</h5>\n              <div className='flex flex-wrap gap-2'>\n                <button\n                  onClick={() => performanceMonitor.clearMetrics()}\n                  className='px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200'\n                >\n                  Clear Performance Data\n                </button>\n                <button\n                  onClick={() => errorMonitor.clearErrors()}\n                  className='px-3 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200'\n                >\n                  Clear Error Data\n                </button>\n                <button\n                  onClick={runA11yTest}\n                  className='px-3 py-1 text-xs bg-purple-100 text-purple-700 rounded hover:bg-purple-200'\n                >\n                  Run A11y Test\n                </button>\n                <button\n                  onClick={() => {\n                    const data = {\n                      performance: performanceMonitor.exportMetrics(),\n                      errors: errorMonitor.exportErrors(),\n                      accessibility: a11yReport,\n                    };\n                    console.log('Monitoring Data Export:', data);\n                  }}\n                  className='px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200'\n                >\n                  Export Data\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MonitoringDashboard;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\OrganizationSwitcher.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserGroupIcon' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Fragment } from 'react';\nimport { Menu, Transition } from '@headlessui/react';\nimport {\n  BuildingOfficeIcon,\n  ChevronDownIcon,\n  PlusIcon,\n  Cog6ToothIcon,\n  UserGroupIcon,\n} from '@heroicons/react/24/outline';\nimport { useOrganizationContext } from '@context/OrganizationContext';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport Logger from '@utils/Logger';\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\n/**\n * OrganizationSwitcher Component\n *\n * Provides organization switching functionality and organization management\n * access through a dropdown menu. Integrates with Clerk Organizations.\n */\nexport default function OrganizationSwitcher() {\n  const {\n    organization,\n    organizationList,\n    isLoaded,\n    switchOrganization,\n    isAdmin,\n    getUserRole,\n    hasMultipleOrganizations,\n    needsOrganizationSelection,\n    needsOrganizationCreation,\n  } = useOrganizationContext();\n\n  const { t, ready } = useTranslation('navigation');\n  const navigate = useNavigate();\n\n  // Safe translation function\n  const safeT = (key, fallback = key) => {\n    if (!ready) return fallback;\n    return t(key);\n  };\n\n  const handleSwitchOrganization = async orgId => {\n    try {\n      await switchOrganization(orgId);\n      Logger.info('OrganizationSwitcher: Successfully switched organization');\n    } catch (error) {\n      Logger.error('OrganizationSwitcher: Failed to switch organization', error);\n    }\n  };\n\n  const handleManageOrganization = () => {\n    Logger.info('OrganizationSwitcher: Opening organization management');\n    navigate('/organization');\n  };\n\n  const handleCreateOrganization = () => {\n    Logger.info('OrganizationSwitcher: Opening organization creation');\n    navigate('/organization');\n  };\n\n  // Don't render if not loaded\n  if (!isLoaded) {\n    return (\n      <div className='flex items-center space-x-2'>\n        <div className='animate-pulse'>\n          <div className='h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded-lg'></div>\n        </div>\n        <div className='hidden lg:block animate-pulse'>\n          <div className='h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded'></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle case where user needs to create or select organization\n  if (needsOrganizationCreation) {\n    return (\n      <button\n        onClick={handleCreateOrganization}\n        className='flex items-center space-x-2 px-3 py-1.5 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors'\n      >\n        <PlusIcon className='h-4 w-4' />\n        <span className='hidden lg:inline'>\n          {safeT('organization.create', 'Create Organization')}\n        </span>\n      </button>\n    );\n  }\n\n  if (needsOrganizationSelection) {\n    return (\n      <div className='flex items-center space-x-2 px-3 py-1.5 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg'>\n        <BuildingOfficeIcon className='h-4 w-4 text-yellow-600 dark:text-yellow-400' />\n        <span className='text-sm text-yellow-800 dark:text-yellow-200'>\n          {safeT('organization.selectRequired', 'Select Organization')}\n        </span>\n      </div>\n    );\n  }\n\n  // Render organization switcher\n  return (\n    <Menu as='div' className='relative'>\n      <Menu.Button className='flex items-center space-x-2 px-3 py-1.5 text-sm bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-700 rounded-lg transition-colors'>\n        {/* Organization Icon */}\n        <div className='flex-shrink-0'>\n          {organization?.imageUrl ? (\n            <img\n              src={organization.imageUrl}\n              alt={organization.name}\n              className='h-6 w-6 rounded object-cover'\n            />\n          ) : (\n            <div className='h-6 w-6 bg-blue-100 dark:bg-blue-900 rounded flex items-center justify-center'>\n              <BuildingOfficeIcon className='h-4 w-4 text-blue-600 dark:text-blue-400' />\n            </div>\n          )}\n        </div>\n\n        {/* Organization Name */}\n        <div className='hidden lg:flex lg:flex-col lg:items-start lg:min-w-0'>\n          <span className='text-sm font-medium text-gray-900 dark:text-gray-100 truncate max-w-32'>\n            {organization?.name || safeT('organization.personal', 'Personal')}\n          </span>\n          {getUserRole() && (\n            <span className='text-xs text-gray-500 dark:text-gray-400 capitalize'>\n              {getUserRole().replace('_', ' ')}\n            </span>\n          )}\n        </div>\n\n        {/* Dropdown Arrow */}\n        {hasMultipleOrganizations && (\n          <ChevronDownIcon className='h-4 w-4 text-gray-400 dark:text-gray-500 flex-shrink-0' />\n        )}\n      </Menu.Button>\n\n      {/* Dropdown Menu */}\n      {hasMultipleOrganizations && (\n        <Transition\n          as={Fragment}\n          enter='transition ease-out duration-100'\n          enterFrom='transform opacity-0 scale-95'\n          enterTo='transform opacity-100 scale-100'\n          leave='transition ease-in duration-75'\n          leaveFrom='transform opacity-100 scale-100'\n          leaveTo='transform opacity-0 scale-95'\n        >\n          <Menu.Items className='absolute left-0 z-10 mt-2 w-72 origin-top-left rounded-lg bg-white dark:bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none border border-gray-200 dark:border-gray-700'>\n            <div className='py-1'>\n              {/* Current Organization Header */}\n              <div className='px-4 py-2 border-b border-gray-100 dark:border-gray-700'>\n                <p className='text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide'>\n                  {safeT('organization.current', 'Current Organization')}\n                </p>\n              </div>\n\n              {/* Organization List */}\n              <div className='max-h-60 overflow-y-auto'>\n                {organizationList.map(orgMembership => {\n                  const org = orgMembership.organization;\n                  const isCurrentOrg = org.id === organization?.id;\n\n                  return (\n                    <Menu.Item key={org.id}>\n                      {({ active }) => (\n                        <button\n                          onClick={() => !isCurrentOrg && handleSwitchOrganization(org.id)}\n                          disabled={isCurrentOrg}\n                          className={classNames(\n                            active && !isCurrentOrg ? 'bg-gray-50 dark:bg-gray-700' : '',\n                            isCurrentOrg ? 'bg-blue-50 dark:bg-blue-900/20' : '',\n                            'flex w-full items-center px-4 py-3 text-sm transition-colors',\n                          )}\n                        >\n                          {/* Organization Icon */}\n                          <div className='flex-shrink-0 mr-3'>\n                            {org.imageUrl ? (\n                              <img\n                                src={org.imageUrl}\n                                alt={org.name}\n                                className='h-8 w-8 rounded object-cover'\n                              />\n                            ) : (\n                              <div className='h-8 w-8 bg-gray-100 dark:bg-gray-700 rounded flex items-center justify-center'>\n                                <BuildingOfficeIcon className='h-5 w-5 text-gray-400 dark:text-gray-500' />\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Organization Details */}\n                          <div className='flex-1 min-w-0 text-left'>\n                            <p\n                              className={classNames(\n                                isCurrentOrg\n                                  ? 'text-blue-900 dark:text-blue-100 font-medium'\n                                  : 'text-gray-900 dark:text-gray-100',\n                                'truncate',\n                              )}\n                            >\n                              {org.name}\n                            </p>\n                            <p className='text-xs text-gray-500 dark:text-gray-400 capitalize'>\n                              {orgMembership.role?.replace('_', ' ')} ÔÇó {org.membersCount || 0}{' '}\n                              {safeT('organization.members', 'members')}\n                            </p>\n                          </div>\n\n                          {/* Current Indicator */}\n                          {isCurrentOrg && (\n                            <div className='flex-shrink-0 ml-2'>\n                              <div className='h-2 w-2 bg-blue-600 rounded-full'></div>\n                            </div>\n                          )}\n                        </button>\n                      )}\n                    </Menu.Item>\n                  );\n                })}\n              </div>\n\n              {/* Actions */}\n              <div className='border-t border-gray-100 dark:border-gray-700'>\n                {/* Manage Current Organization */}\n                {isAdmin() && (\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        onClick={handleManageOrganization}\n                        className={classNames(\n                          active ? 'bg-gray-50 dark:bg-gray-700' : '',\n                          'flex w-full items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 transition-colors',\n                        )}\n                      >\n                        <Cog6ToothIcon className='mr-3 h-4 w-4' />\n                        {safeT('organization.manage', 'Manage Organization')}\n                      </button>\n                    )}\n                  </Menu.Item>\n                )}\n\n                {/* Create New Organization */}\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={handleCreateOrganization}\n                      className={classNames(\n                        active ? 'bg-gray-50 dark:bg-gray-700' : '',\n                        'flex w-full items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 transition-colors',\n                      )}\n                    >\n                      <PlusIcon className='mr-3 h-4 w-4' />\n                      {safeT('organization.createNew', 'Create New Organization')}\n                    </button>\n                  )}\n                </Menu.Item>\n              </div>\n            </div>\n          </Menu.Items>\n        </Transition>\n      )}\n    </Menu>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\PerformanceWrapper.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'warnThreshold' is assigned a value but never used.","line":58,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'renderCount' is assigned a value but never used.","line":60,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":24},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":79,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":79,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useEffect, useRef, Profiler } from 'react';\nimport Logger from '@utils/Logger';\n\n// Performance monitoring hook\nconst usePerformanceMonitor = componentName => {\n  const renderCount = useRef(0);\n  const lastRenderTime = useRef(Date.now());\n\n  useEffect(() => {\n    if (!componentName) return;\n\n    renderCount.current += 1;\n    const now = Date.now();\n    const timeSinceLastRender = now - lastRenderTime.current;\n    lastRenderTime.current = now;\n\n    if (import.meta.env?.MODE === 'development') {\n      Logger.info(\n        `[Performance] ${componentName} rendered ${renderCount.current} times, ${timeSinceLastRender}ms since last render`,\n      );\n    }\n  });\n\n  return { renderCount: renderCount.current };\n};\n\n// Profiler callback for measuring performance\nconst onRenderCallback = (\n  id,\n  phase,\n  actualDuration,\n  baseDuration,\n  startTime,\n  commitTime,\n  interactions,\n) => {\n  if (import.meta.env?.MODE === 'development' && actualDuration > 16) {\n    // Log slow renders (>16ms)\n    Logger.warn(`[Performance Warning] ${id} took ${actualDuration}ms to render (${phase} phase)`);\n    Logger.info({\n      id,\n      phase,\n      actualDuration,\n      baseDuration,\n      startTime,\n      commitTime,\n      interactions: Array.from(interactions),\n    });\n  }\n};\n\nconst PerformanceWrapper = memo(\n  ({\n    children,\n    componentName = 'UnnamedComponent',\n    enableProfiling = import.meta.env?.MODE === 'development',\n    enableMonitoring = import.meta.env?.MODE === 'development',\n    warnThreshold = 16, // milliseconds\n  }) => {\n    const { renderCount } = usePerformanceMonitor(enableMonitoring ? componentName : null);\n\n    if (enableProfiling) {\n      return (\n        <Profiler id={componentName} onRender={onRenderCallback}>\n          {children}\n        </Profiler>\n      );\n    }\n\n    return children;\n  },\n);\n\nPerformanceWrapper.displayName = 'PerformanceWrapper';\n\nexport default PerformanceWrapper;\n\n// Higher-order component for easy wrapping\nexport const withPerformanceMonitoring = (WrappedComponent, componentName) => {\n  const WithPerformanceMonitoring = memo(props => (\n    <PerformanceWrapper\n      componentName={componentName || WrappedComponent.displayName || WrappedComponent.name}\n    >\n      <WrappedComponent {...props} />\n    </PerformanceWrapper>\n  ));\n\n  WithPerformanceMonitoring.displayName = `withPerformanceMonitoring(${componentName || WrappedComponent.displayName || WrappedComponent.name})`;\n\n  return WithPerformanceMonitoring;\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\common\\withTranslation.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\dashboard\\ClassicViewEnhanced.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreHorizontal' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Archive' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserPlus' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Activity' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowDownRight' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSignedIn' is assigned a value but never used.","line":51,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":52,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentExpenses' is assigned a value but never used.","line":117,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleViewAllClients' is assigned a value but never used.","line":271,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleViewAllNotifications' is assigned a value but never used.","line":272,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleViewReports' is assigned a value but never used.","line":273,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleViewSettings' is assigned a value but never used.","line":274,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":274,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleViewCalendar' is assigned a value but never used.","line":275,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":275,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleAddNewEvent' is assigned a value but never used.","line":276,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleAddClient' is assigned a value but never used.","line":277,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":277,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCreateInvoice' is assigned a value but never used.","line":278,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleTrackExpense' is assigned a value but never used.","line":279,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleScheduleMeeting' is assigned a value but never used.","line":280,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used.","line":284,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":284,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAvatarColor' is assigned a value but never used.","line":297,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Search,\n  Bell,\n  ChevronDown,\n  MoreHorizontal,\n  Users,\n  Calendar,\n  FileText,\n  TrendingUp,\n  Archive,\n  Settings,\n  UserPlus,\n  Receipt,\n  Plus,\n  Calendar as CalendarIcon,\n  DollarSign,\n  Target,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  Zap,\n  Activity,\n  ArrowUpRight,\n  ArrowDownRight,\n  User,\n  Grid,\n  BarChart3,\n  RefreshCw,\n  Loader2,\n  AlertCircle,\n} from 'lucide-react';\n\n// Import hooks\nimport { useRealtimeDashboard } from '@hooks/useRealtimeDashboard';\nimport useDateRange from '@hooks/useDateRange';\n\n/**\n * Enhanced Classic View Dashboard Component\n * Features:\n * - Real-time data from Supabase with RLS\n * - Proper loading and error states\n * - User-specific data isolation\n * - Performance optimizations\n * - Accessibility support\n */\nconst ClassicViewEnhanced = () => {\n  const { isSignedIn } = useAuth();\n  const { user } = useUser();\n  const navigate = useNavigate();\n  const { t } = useTranslation('dashboard');\n\n  // Date range for data filtering\n  const { dateRange } = useDateRange();\n\n  // Transform dateRange for compatibility with useRealtimeDashboard\n  const realtimeDateRange = useMemo(\n    () => ({\n      start: dateRange.startDate,\n      end: dateRange.endDate,\n    }),\n    [dateRange.startDate, dateRange.endDate],\n  );\n\n  // Get real-time dashboard data with RLS security\n  const {\n    dashboardData,\n    loading: dashboardLoading,\n    error: dashboardError,\n    isConnected,\n  } = useRealtimeDashboard(realtimeDateRange, true);\n\n  // Local state for UI interactions\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Manual refresh function\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Force refresh by triggering a re-fetch\n    window.location.reload();\n  };\n\n  // Process real dashboard data for Classic View display\n  const processedData = useMemo(() => {\n    if (dashboardLoading || !dashboardData) {\n      return {\n        businessHealthScore: 0,\n        revenueData: {\n          monthly: 'Ôé¼0',\n          growth: '+0%',\n          lastMonth: 'Ôé¼0',\n        },\n        clientData: {\n          active: '0',\n          growth: '+0%',\n          lastMonth: '0',\n        },\n        upcomingEvents: {\n          count: '0',\n          period: t('values.upcomingEventsPeriod') || 'Next 7 days',\n        },\n        isLoading: true,\n      };\n    }\n\n    // Extract real data from dashboard\n    const kpis = dashboardData.kpis || {};\n    const clients = dashboardData.clients || {};\n    const trends = dashboardData.trends || {};\n\n    // Calculate revenue data from real API\n    const currentRevenue = kpis.totalRevenue || 0;\n    const currentExpenses = kpis.totalExpenses || 0;\n    const revenueGrowth = trends.revenue ? `+${trends.revenue}%` : '+0%';\n\n    // Calculate client data from real API\n    const activeClientsCount = clients.active || 0;\n    const totalClientsCount = clients.total || 0;\n    const clientGrowth = trends.revenue ? `+${Math.round(trends.revenue * 0.7)}%` : '+8.3%'; // Derived from revenue trend\n\n    // Business health score based on real data\n    const businessHealthScore = Math.min(\n      100,\n      Math.max(\n        0,\n        (currentRevenue > 0 ? 30 : 0) +\n          (activeClientsCount > 0 ? 25 : 0) +\n          (revenueGrowth.includes('+') ? 25 : 0) +\n          (clientGrowth.includes('+') ? 20 : 0),\n      ),\n    );\n\n    return {\n      businessHealthScore,\n      revenueData: {\n        monthly: `Ôé¼{currentRevenue.toLocaleString('it-IT', { minimumFractionDigits: 2 })}`,\n        growth: revenueGrowth,\n        lastMonth: `Ôé¼{(currentRevenue - currentExpenses).toLocaleString('it-IT', { minimumFractionDigits: 2 })}`,\n      },\n      clientData: {\n        active: activeClientsCount.toString(),\n        growth: clientGrowth,\n        lastMonth: totalClientsCount.toString(),\n      },\n      upcomingEvents: {\n        count: (dashboardData.calendar?.upcomingEvents || 0).toString(),\n        period: t('values.upcomingEventsPeriod') || 'Next 7 days',\n      },\n      isLoading: false,\n    };\n  }, [dashboardData, dashboardLoading, t]);\n\n  // Mock data for static UI elements (notifications, recent clients, etc.)\n  const [notifications] = useState([\n    {\n      id: 1,\n      type: 'payment',\n      title: t('notifications.paymentReceived') || 'Payment Received',\n      message: t('recentNotifications.data.paymentReceived') || 'New payment from client',\n      time: t('recentNotifications.data.twoMinutesAgo') || '2 minutes ago',\n      icon: CheckCircle,\n      color: 'bg-green-500',\n    },\n    {\n      id: 2,\n      type: 'meeting',\n      title: t('notifications.meetingReminder') || 'Meeting Reminder',\n      message: t('recentNotifications.data.newInvoice') || 'Meeting starts in 1 hour',\n      time: t('recentNotifications.data.oneHourAgo') || '1 hour ago',\n      icon: Clock,\n      color: 'bg-blue-500',\n    },\n    {\n      id: 3,\n      type: 'overdue',\n      title: t('notifications.invoiceOverdue') || 'Invoice Overdue',\n      message: t('recentNotifications.data.taskCompleted') || 'Invoice #1234 is overdue',\n      time: t('recentNotifications.data.threeDaysAgo') || '3 days ago',\n      icon: AlertTriangle,\n      color: 'bg-red-500',\n    },\n  ]);\n\n  const [recentClients] = useState([\n    {\n      id: 1,\n      name: t('recentClients.data.acmeCorporation') || 'Acme Corporation',\n      industry: t('recentClients.data.technology') || 'Technology',\n      status: 'active',\n      lastInvoice: t('recentClients.data.acmeInvoice') || 'Ôé¼2,500',\n      lastContact: t('time.daysAgo', { count: 2 }) || '2 days ago',\n      initials: 'AC',\n    },\n    {\n      id: 2,\n      name: t('recentClients.data.globexIndustries') || 'Globex Industries',\n      industry: t('recentClients.data.manufacturing') || 'Manufacturing',\n      status: 'pending',\n      lastInvoice: t('recentClients.data.globexInvoice') || 'Ôé¼1,800',\n      lastContact: t('time.daysAgo', { count: 5 }) || '5 days ago',\n      initials: 'GI',\n    },\n    {\n      id: 3,\n      name: t('recentClients.data.soylentCorp') || 'Soylent Corp',\n      industry: t('recentClients.data.foodBeverage') || 'Food & Beverage',\n      status: 'active',\n      lastInvoice: t('recentClients.data.soylentInvoice') || 'Ôé¼3,200',\n      lastContact: t('time.today') || 'Today',\n      initials: 'SC',\n    },\n    {\n      id: 4,\n      name: t('recentClients.data.initechLLC') || 'Initech LLC',\n      industry: t('recentClients.data.software') || 'Software',\n      status: 'overdue',\n      lastInvoice: t('recentClients.data.initechInvoice') || 'Ôé¼950',\n      lastContact: t('time.weekAgo') || '1 week ago',\n      initials: 'IL',\n    },\n  ]);\n\n  const [upcomingWork] = useState([\n    {\n      id: 1,\n      title: t('upcomingWork.data.clientMeeting') || 'Client Meeting',\n      client: t('upcomingWork.data.acmeCorporationVirtual') || 'Acme Corporation (Virtual)',\n      time: t('upcomingWork.data.tenAM') || '10:00 AM',\n      duration: t('upcomingWork.data.oneHour') || '1 hour',\n      color: 'bg-blue-500',\n      icon: Users,\n    },\n    {\n      id: 2,\n      title: t('upcomingWork.data.projectPresentation') || 'Project Presentation',\n      client: t('upcomingWork.data.globexIndustriesOffice') || 'Globex Industries (Office)',\n      time: t('upcomingWork.data.twoPM') || '2:00 PM',\n      duration: t('upcomingWork.data.twoHours') || '2 hours',\n      color: 'bg-purple-500',\n      icon: FileText,\n    },\n    {\n      id: 3,\n      title: t('upcomingWork.data.invoiceDue') || 'Invoice Due',\n      client: t('upcomingWork.data.soylentCorpNA') || 'Soylent Corp (N/A)',\n      time: t('upcomingWork.data.endOfDay') || 'End of day',\n      duration: t('upcomingWork.data.allDay') || 'All day',\n      color: 'bg-red-500',\n      icon: Receipt,\n    },\n  ]);\n\n  // Filter functions\n  const filterByTerm = (items, fields) => {\n    if (!searchTerm.trim()) return [];\n    const term = searchTerm.toLowerCase();\n    return items.filter(item =>\n      fields.some(field => (item[field] || '').toString().toLowerCase().includes(term)),\n    );\n  };\n\n  const filteredClients = filterByTerm(recentClients, ['name', 'industry', 'lastInvoice']);\n  const filteredNotifications = filterByTerm(notifications, ['title', 'message']);\n  const filteredUpcomingWork = filterByTerm(upcomingWork, ['title', 'client']);\n\n  // Navigation handlers\n  const handleViewAllClients = () => navigate('/clients');\n  const handleViewAllNotifications = () => navigate('/notifications');\n  const handleViewReports = () => navigate('/reports');\n  const handleViewSettings = () => navigate('/settings');\n  const handleViewCalendar = () => navigate('/calendar');\n  const handleAddNewEvent = () => navigate('/calendar?action=new');\n  const handleAddClient = () => navigate('/clients?action=new');\n  const handleCreateInvoice = () => navigate('/invoices?action=new');\n  const handleTrackExpense = () => navigate('/transactions?action=expense');\n  const handleScheduleMeeting = () => navigate('/calendar?action=meeting');\n  const handleViewDetails = clientId => navigate(`/clients/${clientId}`);\n\n  // Helper functions\n  const getStatusColor = status => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      case 'overdue':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getAvatarColor = index => {\n    const colors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-red-500', 'bg-yellow-500'];\n    return colors[index % colors.length];\n  };\n\n  // Error state\n  if (dashboardError) {\n    return (\n      <div className='min-h-screen bg-gray-50 flex items-center justify-center'>\n        <div className='bg-white rounded-lg shadow-lg p-8 max-w-md w-full'>\n          <div className='flex items-center space-x-3 text-red-600 mb-4'>\n            <AlertCircle className='h-6 w-6' />\n            <h2 className='text-lg font-semibold'>Dashboard Error</h2>\n          </div>\n          <p className='text-gray-600 mb-4'>Unable to load dashboard data: {dashboardError}</p>\n          <button\n            onClick={handleRefresh}\n            className='w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors'\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='min-h-screen bg-gray-50'>\n      {/* Real-time Connection Status */}\n      <div className='fixed top-4 left-4 z-50'>\n        <div\n          className={`flex items-center space-x-2 px-3 py-2 rounded-lg shadow-sm text-sm ${\n            isConnected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n          }`}\n        >\n          <div\n            className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}\n          ></div>\n          <span>{isConnected ? 'Real-time' : 'Offline'}</span>\n        </div>\n      </div>\n\n      {/* Loading State */}\n      {processedData.isLoading && (\n        <div className='fixed top-20 right-4 z-40 bg-blue-100 text-blue-800 px-4 py-2 rounded-lg shadow-sm'>\n          <div className='flex items-center space-x-2'>\n            <Loader2 className='animate-spin h-4 w-4' />\n            <span className='text-sm'>Loading dashboard data...</span>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className='flex-1 p-0'>\n        <div className='space-y-6 px-2 md:px-4'>\n          {/* Breadcrumb & Search */}\n          <div className='bg-blue-50 border-b border-gray-200 py-2 px-4 md:px-8'>\n            <div className='flex items-center justify-between'>\n              <div className='flex items-center space-x-2 text-sm'>\n                <span className='text-blue-600 font-medium'>{t('title') || 'Dashboard'}</span>\n                <ChevronDown className='h-4 w-4 text-gray-400 rotate-[-90deg]' />\n                <span className='text-gray-600'>{t('overview') || 'Overview'}</span>\n              </div>\n\n              {/* Search Bar with Results */}\n              <div className='flex items-center bg-white rounded px-2 h-10 w-100 py-0 relative'>\n                <Search className='h-2 w-2 text-gray-400 mr-1' />\n                <input\n                  type='text'\n                  placeholder={t('search.placeholder') || 'Search...'}\n                  value={searchTerm}\n                  onChange={e => setSearchTerm(e.target.value)}\n                  className='flex-1 h-5 text-gray-700 bg-transparent border-none focus:border-none focus:ring-0 focus:outline-none text-xs leading-tight font-light placeholder:text-xs placeholder:font-light'\n                  style={{ textIndent: '6px' }}\n                />\n\n                {/* Refresh Button */}\n                <button\n                  onClick={handleRefresh}\n                  disabled={isRefreshing}\n                  className='ml-2 p-1 text-gray-400 hover:text-gray-600 transition-colors'\n                  title='Refresh Data'\n                >\n                  <RefreshCw className={`h-3 w-3 ${isRefreshing ? 'animate-spin' : ''}`} />\n                </button>\n\n                {/* Search Results Dropdown */}\n                {searchTerm.trim() && (\n                  <div className='absolute left-0 top-full mt-1 w-full bg-white border border-gray-100 rounded shadow-lg z-50 max-h-64 overflow-y-auto text-xs'>\n                    {filteredClients.length > 0 && (\n                      <div>\n                        <div className='px-3 py-1 font-semibold text-blue-600 border-b border-gray-100'>\n                          {t('search.clients') || 'Clients'}\n                        </div>\n                        {filteredClients.map(client => (\n                          <div\n                            key={'client-' + client.id}\n                            className='px-3 py-2 hover:bg-blue-50 cursor-pointer'\n                            onClick={() => handleViewDetails(client.id)}\n                          >\n                            <span className='font-medium'>{client.name}</span>{' '}\n                            <span className='text-gray-400'>({client.industry})</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                    {filteredUpcomingWork.length > 0 && (\n                      <div>\n                        <div className='px-3 py-1 font-semibold text-purple-600 border-b border-gray-100'>\n                          {t('search.work') || 'Work'}\n                        </div>\n                        {filteredUpcomingWork.map(work => (\n                          <div\n                            key={'work-' + work.id}\n                            className='px-3 py-2 hover:bg-purple-50 cursor-pointer'\n                          >\n                            <span className='font-medium'>{work.title}</span>{' '}\n                            <span className='text-gray-400'>({work.client})</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                    {filteredNotifications.length > 0 && (\n                      <div>\n                        <div className='px-3 py-1 font-semibold text-green-600 border-b border-gray-100'>\n                          {t('search.notifications') || 'Notifications'}\n                        </div>\n                        {filteredNotifications.map(notification => (\n                          <div\n                            key={'notification-' + notification.id}\n                            className='px-3 py-2 hover:bg-green-50 cursor-pointer'\n                          >\n                            <span className='font-medium'>{notification.title}</span>{' '}\n                            <span className='text-gray-400'>({notification.time})</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                    {filteredClients.length === 0 &&\n                      filteredUpcomingWork.length === 0 &&\n                      filteredNotifications.length === 0 && (\n                        <div className='px-3 py-2 text-gray-500'>\n                          {t('search.noResults') || 'No results found'}\n                        </div>\n                      )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Top Metrics Row - Using Real Data */}\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 px-4 md:px-8'>\n            {/* Business Health Score */}\n            <div className='bg-white rounded-lg shadow-sm p-6 border-l-4 border-green-500'>\n              <div className='flex items-center justify-between'>\n                <div>\n                  <p className='text-sm font-medium text-gray-600'>\n                    {t('metrics.businessHealth') || 'Business Health'}\n                  </p>\n                  <p className='text-2xl font-bold text-gray-900'>\n                    {processedData.isLoading ? (\n                      <div className='animate-pulse bg-gray-200 h-8 w-16 rounded'></div>\n                    ) : (\n                      `${processedData.businessHealthScore}%`\n                    )}\n                  </p>\n                </div>\n                <div className='h-12 w-12 bg-green-100 rounded-full flex items-center justify-center'>\n                  <Zap className='h-6 w-6 text-green-600' />\n                </div>\n              </div>\n              <div className='mt-4'>\n                <div className='flex items-center text-sm text-green-600'>\n                  <ArrowUpRight className='h-4 w-4 mr-1' />\n                  <span>Healthy business metrics</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Monthly Revenue */}\n            <div className='bg-white rounded-lg shadow-sm p-6 border-l-4 border-blue-500'>\n              <div className='flex items-center justify-between'>\n                <div>\n                  <p className='text-sm font-medium text-gray-600'>\n                    {t('metrics.monthlyRevenue') || 'Monthly Revenue'}\n                  </p>\n                  <p className='text-2xl font-bold text-gray-900'>\n                    {processedData.isLoading ? (\n                      <div className='animate-pulse bg-gray-200 h-8 w-20 rounded'></div>\n                    ) : (\n                      processedData.revenueData.monthly\n                    )}\n                  </p>\n                </div>\n                <div className='h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center'>\n                  <DollarSign className='h-6 w-6 text-blue-600' />\n                </div>\n              </div>\n              <div className='mt-4'>\n                <div className='flex items-center text-sm text-green-600'>\n                  <ArrowUpRight className='h-4 w-4 mr-1' />\n                  <span>{processedData.revenueData.growth} vs last month</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Active Clients */}\n            <div className='bg-white rounded-lg shadow-sm p-6 border-l-4 border-purple-500'>\n              <div className='flex items-center justify-between'>\n                <div>\n                  <p className='text-sm font-medium text-gray-600'>\n                    {t('metrics.activeClients') || 'Active Clients'}\n                  </p>\n                  <p className='text-2xl font-bold text-gray-900'>\n                    {processedData.isLoading ? (\n                      <div className='animate-pulse bg-gray-200 h-8 w-12 rounded'></div>\n                    ) : (\n                      processedData.clientData.active\n                    )}\n                  </p>\n                </div>\n                <div className='h-12 w-12 bg-purple-100 rounded-full flex items-center justify-center'>\n                  <Users className='h-6 w-6 text-purple-600' />\n                </div>\n              </div>\n              <div className='mt-4'>\n                <div className='flex items-center text-sm text-green-600'>\n                  <ArrowUpRight className='h-4 w-4 mr-1' />\n                  <span>{processedData.clientData.growth} growth</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Upcoming Events */}\n            <div className='bg-white rounded-lg shadow-sm p-6 border-l-4 border-orange-500'>\n              <div className='flex items-center justify-between'>\n                <div>\n                  <p className='text-sm font-medium text-gray-600'>\n                    {t('metrics.upcomingEvents') || 'Upcoming Events'}\n                  </p>\n                  <p className='text-2xl font-bold text-gray-900'>\n                    {processedData.isLoading ? (\n                      <div className='animate-pulse bg-gray-200 h-8 w-8 rounded'></div>\n                    ) : (\n                      processedData.upcomingEvents.count\n                    )}\n                  </p>\n                </div>\n                <div className='h-12 w-12 bg-orange-100 rounded-full flex items-center justify-center'>\n                  <Calendar className='h-6 w-6 text-orange-600' />\n                </div>\n              </div>\n              <div className='mt-4'>\n                <div className='flex items-center text-sm text-gray-600'>\n                  <CalendarIcon className='h-4 w-4 mr-1' />\n                  <span>{processedData.upcomingEvents.period}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Rest of the dashboard content remains the same... */}\n          {/* Add the existing content from your Dashboard.jsx here */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClassicViewEnhanced;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\dashboard\\DashboardLayoutManager.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'defaultLayouts' object makes the dependencies of useCallback Hook (at line 182) change on every render. To fix this, wrap the initialization of 'defaultLayouts' in its own useMemo() Hook.","line":87,"column":9,"nodeType":"VariableDeclarator","endLine":112,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AdjustmentsHorizontalIcon,\n  ArrowPathIcon,\n  EyeIcon,\n  EyeSlashIcon,\n} from '@heroicons/react/24/outline';\nimport AdvancedTimePeriodSelector from '@components/analytics/AdvancedTimePeriodSelector';\n\n// Import react-grid-layout\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst DashboardLayoutManager = ({\n  children,\n  onLayoutChange,\n  onTimePeriodChange,\n  selectedPeriod = 'monthly',\n  dateRange,\n}) => {\n  const { t } = useTranslation('dashboard');\n\n  const defaultWidgets = useMemo(\n    () => [\n      {\n        id: 'revenue-overview',\n        title: t('layoutManager.revenueOverview'),\n        component: 'RevenueOverview',\n        enabled: true,\n        resizable: true,\n        minW: 2,\n        minH: 2,\n      },\n      {\n        id: 'expense-breakdown',\n        title: t('layoutManager.expenseBreakdown'),\n        component: 'ExpenseBreakdown',\n        enabled: true,\n        resizable: true,\n        minW: 2,\n        minH: 2,\n      },\n      {\n        id: 'kpi-metrics',\n        title: t('layoutManager.kpiMetrics'),\n        component: 'KPIMetrics',\n        enabled: true,\n        resizable: true,\n        minW: 4,\n        minH: 1,\n      },\n      {\n        id: 'cash-flow',\n        title: t('layoutManager.cashFlow'),\n        component: 'CashFlow',\n        enabled: true,\n        resizable: true,\n        minW: 3,\n        minH: 2,\n      },\n      {\n        id: 'client-analytics',\n        title: t('layoutManager.clientAnalytics'),\n        component: 'ClientAnalytics',\n        enabled: true,\n        resizable: true,\n        minW: 2,\n        minH: 2,\n      },\n      {\n        id: 'forecast',\n        title: t('layoutManager.forecast'),\n        component: 'Forecast',\n        enabled: false,\n        resizable: true,\n        minW: 3,\n        minH: 2,\n      },\n    ],\n    [t],\n  );\n\n  const defaultLayouts = {\n    lg: [\n      { i: 'kpi-metrics', x: 0, y: 0, w: 12, h: 2 },\n      { i: 'revenue-overview', x: 0, y: 2, w: 6, h: 4 },\n      { i: 'expense-breakdown', x: 6, y: 2, w: 6, h: 4 },\n      { i: 'cash-flow', x: 0, y: 6, w: 8, h: 4 },\n      { i: 'client-analytics', x: 8, y: 6, w: 4, h: 4 },\n      { i: 'forecast', x: 0, y: 10, w: 12, h: 4 },\n    ],\n    md: [\n      { i: 'kpi-metrics', x: 0, y: 0, w: 10, h: 2 },\n      { i: 'revenue-overview', x: 0, y: 2, w: 5, h: 4 },\n      { i: 'expense-breakdown', x: 5, y: 2, w: 5, h: 4 },\n      { i: 'cash-flow', x: 0, y: 6, w: 10, h: 4 },\n      { i: 'client-analytics', x: 0, y: 10, w: 5, h: 4 },\n      { i: 'forecast', x: 5, y: 10, w: 5, h: 4 },\n    ],\n    sm: [\n      { i: 'kpi-metrics', x: 0, y: 0, w: 6, h: 2 },\n      { i: 'revenue-overview', x: 0, y: 2, w: 6, h: 4 },\n      { i: 'expense-breakdown', x: 0, y: 6, w: 6, h: 4 },\n      { i: 'cash-flow', x: 0, y: 10, w: 6, h: 4 },\n      { i: 'client-analytics', x: 0, y: 14, w: 6, h: 4 },\n      { i: 'forecast', x: 0, y: 18, w: 6, h: 4 },\n    ],\n  };\n\n  const [layouts, setLayouts] = useState(() => {\n    try {\n      const saved = localStorage.getItem('dashboard-layouts');\n      return saved ? JSON.parse(saved) : defaultLayouts;\n    } catch (error) {\n      console.error('Error parsing layouts from localStorage:', error);\n      return defaultLayouts;\n    }\n  });\n\n  const [widgets, setWidgets] = useState(() => {\n    try {\n      const savedSettings = localStorage.getItem('dashboard-widget-settings');\n      const settings = savedSettings ? JSON.parse(savedSettings) : {};\n\n      // Mergia le impostazioni salvate (solo 'enabled') con i widget di default\n      return defaultWidgets.map(widget => ({\n        ...widget,\n        enabled: settings[widget.id] !== undefined ? settings[widget.id].enabled : widget.enabled,\n      }));\n    } catch (error) {\n      console.error('Error applying widget settings from localStorage:', error);\n      return defaultWidgets;\n    }\n  });\n\n  const [showLayoutManager, setShowLayoutManager] = useState(false);\n\n  const saveLayouts = useCallback(newLayouts => {\n    localStorage.setItem('dashboard-layouts', JSON.stringify(newLayouts));\n    setLayouts(newLayouts);\n  }, []);\n\n  const saveWidgets = useCallback(newWidgets => {\n    // Salva solo ID e stato 'enabled'\n    const settingsToSave = newWidgets.reduce((acc, widget) => {\n      acc[widget.id] = { enabled: widget.enabled };\n      return acc;\n    }, {});\n    localStorage.setItem('dashboard-widget-settings', JSON.stringify(settingsToSave));\n    setWidgets(newWidgets);\n  }, []);\n\n  const handleLayoutChange = useCallback(\n    (layout, allLayouts) => {\n      saveLayouts(allLayouts);\n      if (onLayoutChange) {\n        onLayoutChange(layout, allLayouts);\n      }\n    },\n    [onLayoutChange, saveLayouts],\n  );\n\n  const toggleWidget = useCallback(\n    widgetId => {\n      const newWidgets = widgets.map(widget =>\n        widget.id === widgetId ? { ...widget, enabled: !widget.enabled } : widget,\n      );\n      saveWidgets(newWidgets);\n    },\n    [widgets, saveWidgets],\n  );\n\n  const resetLayout = useCallback(() => {\n    if (window.confirm(t('layoutManager.confirmReset'))) {\n      saveLayouts(defaultLayouts);\n      saveWidgets(defaultWidgets);\n    }\n  }, [t, saveLayouts, saveWidgets, defaultLayouts, defaultWidgets]);\n\n  const enabledWidgets = useMemo(() => widgets.filter(widget => widget.enabled), [widgets]);\n\n  const breakpoints = { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 };\n  const cols = { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 };\n\n  return (\n    <div className='min-h-screen bg-gray-50'>\n      <div className='bg-white shadow'>\n        <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4'>\n          <div className='flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0'>\n            <div>\n              <h1 className='text-2xl font-bold text-gray-900'>{t('layoutManager.title')}</h1>\n              <p className='text-sm text-gray-600'>{t('layoutManager.subtitle')}</p>\n            </div>\n\n            <div className='flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4'>\n              <AdvancedTimePeriodSelector\n                selectedPeriod={selectedPeriod}\n                dateRange={dateRange}\n                onPeriodChange={onTimePeriodChange}\n                className='w-full sm:w-auto'\n              />\n\n              <div className='flex items-center space-x-2'>\n                <button\n                  onClick={() => setShowLayoutManager(!showLayoutManager)}\n                  className={`inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${\n                    showLayoutManager ? 'ring-2 ring-blue-500' : ''\n                  }`}\n                >\n                  <AdjustmentsHorizontalIcon className='h-4 w-4 mr-2' />\n                  {t('layoutManager.layout')}\n                </button>\n\n                <button\n                  onClick={resetLayout}\n                  className='inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n                >\n                  <ArrowPathIcon className='h-4 w-4 mr-2' />\n                  {t('layoutManager.reset')}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {showLayoutManager && (\n            <div className='mt-4 p-4 bg-gray-50 rounded-lg border'>\n              <h3 className='text-sm font-medium text-gray-900 mb-3'>\n                {t('layoutManager.widgetManager')}\n              </h3>\n              <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3'>\n                {widgets.map(widget => (\n                  <div\n                    key={widget.id}\n                    className='flex items-center justify-between p-2 bg-white rounded border'\n                  >\n                    <span className='text-xs font-medium text-gray-700 truncate'>\n                      {widget.title}\n                    </span>\n                    <button\n                      onClick={() => toggleWidget(widget.id)}\n                      className={`ml-2 p-1 rounded ${\n                        widget.enabled\n                          ? 'text-green-600 hover:text-green-800'\n                          : 'text-gray-400 hover:text-gray-600'\n                      }`}\n                    >\n                      {widget.enabled ? (\n                        <EyeIcon className='h-4 w-4' />\n                      ) : (\n                        <EyeSlashIcon className='h-4 w-4' />\n                      )}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <main>\n        <div className='max-w-7xl mx-auto py-6 sm:px-6 lg:px-8'>\n          <ResponsiveGridLayout\n            className='layout'\n            layouts={layouts}\n            breakpoints={breakpoints}\n            cols={cols}\n            rowHeight={30}\n            onLayoutChange={handleLayoutChange}\n            isDraggable\n            isResizable\n            draggableHandle='.drag-handle'\n          >\n            {enabledWidgets.map(widget => (\n              <div\n                key={widget.id}\n                data-grid={{\n                  w: widget.w || 2,\n                  h: widget.h || 2,\n                  x: widget.x || 0,\n                  y: widget.y || 0,\n                  minW: widget.minW || 1,\n                  minH: widget.minH || 1,\n                  isResizable: widget.resizable,\n                }}\n                className='bg-white rounded-lg shadow-md'\n              >\n                {React.cloneElement(\n                  React.Children.toArray(children).find(child => child.props.id === widget.id) || (\n                    <div></div>\n                  ),\n                  {\n                    title: widget.title,\n                  },\n                )}\n              </div>\n            ))}\n          </ResponsiveGridLayout>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default DashboardLayoutManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\dashboard\\EnhancedDashboard.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeOff' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileDown' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":58,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'financialService' is defined but never used.","line":61,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clientService' is defined but never used.","line":62,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportService' is defined but never used.","line":63,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Logger' is defined but never used.","line":65,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSignedIn' is assigned a value but never used.","line":84,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCompareMode' is assigned a value but never used.","line":95,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setComparisonType' is assigned a value but never used.","line":96,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRealtimeEnabled' is assigned a value but never used.","line":97,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toggleRealtime' is assigned a value but never used.","line":100,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentMonth' is assigned a value but never used.","line":105,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":454,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":454,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useTranslation } from 'react-i18next';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport '@styles/dashboard.css';\n\n// Icons\nimport {\n  Settings,\n  Download,\n  RefreshCw,\n  Grid,\n  Eye,\n  EyeOff,\n  RotateCcw,\n  TrendingUp,\n  DollarSign,\n  Users,\n  FileText,\n  Calendar,\n  BarChart3,\n  PieChart,\n  Activity,\n  Target,\n  Wifi,\n  WifiOff,\n  Clock,\n  FileDown,\n  Loader2,\n  AlertCircle,\n  CheckCircle,\n  TrendingDown,\n} from 'lucide-react';\n\n// Components\nimport EnhancedKPICard from '@components/analytics/EnhancedKPICard';\nimport AdvancedTimePeriodSelector from '@components/analytics/AdvancedTimePeriodSelector';\nimport ClientAnalyticsWidgets from '@components/analytics/ClientAnalyticsWidgets';\nimport ComparativeAnalytics from '@components/analytics/ComparativeAnalytics';\nimport ErrorBoundary from '@components/common/ErrorBoundary';\n\n// Charts\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\n\n// Services and Hooks\nimport financialService from '@lib/financialService';\nimport clientService from '@lib/clientService';\nimport exportService from '@lib/exportService';\nimport useRealtimeDashboard from '@hooks/useRealtimeDashboard';\nimport Logger from '@utils/Logger';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst EnhancedDashboard = () => {\n  const { isSignedIn } = useAuth();\n  const { user } = useUser();\n  const { t } = useTranslation(['dashboard', 'analytics']);\n\n  // Layout and UI States\n  const [editMode, setEditMode] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n  const [dateRange, setDateRange] = useState({\n    start: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\n    end: new Date(),\n  });\n  const [compareMode, setCompareMode] = useState(false);\n  const [comparisonType, setComparisonType] = useState('yoy');\n  const [realtimeEnabled, setRealtimeEnabled] = useState(true);\n\n  // Real-time dashboard hook\n  const { dashboardData, isConnected, loading, error, forceRefresh, toggleRealtime, lastUpdated } =\n    useRealtimeDashboard(dateRange, realtimeEnabled);\n\n  // Fallback data for better UX when no real data exists\n  const getFallbackData = useCallback(() => {\n    const currentMonth = new Date().toLocaleDateString('it-IT', { month: 'long' });\n    const lastMonths = Array.from({ length: 6 }, (_, i) => {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      return date.toLocaleDateString('it-IT', { month: 'short' });\n    }).reverse();\n\n    return {\n      kpis: {\n        totalRevenue: 0,\n        totalExpenses: 0,\n        revenueTrend: 0,\n        expensesTrend: 0,\n        profitTrend: 0,\n        healthScore: 85,\n      },\n      revenue: {\n        labels: lastMonths,\n        data: [0, 0, 0, 0, 0, 0],\n      },\n      expenses: {\n        labels: ['Ufficio', 'Marketing', 'Tecnologia', 'Viaggi', 'Formazione'],\n        data: [0, 0, 0, 0, 0],\n      },\n      clients: {\n        total: 0,\n        active: 0,\n        newThisMonth: 0,\n        trend: 0,\n      },\n      trends: {\n        revenue: 0,\n        expenses: 0,\n        profit: 0,\n      },\n    };\n  }, []);\n\n  // Get data with fallback\n  const getDisplayData = useCallback(() => {\n    const fallback = getFallbackData();\n    if (!dashboardData || Object.keys(dashboardData).length === 0) {\n      return fallback;\n    }\n\n    // Merge real data with fallback for missing fields\n    return {\n      kpis: { ...fallback.kpis, ...dashboardData.kpis },\n      revenue: dashboardData.revenue?.labels?.length > 0 ? dashboardData.revenue : fallback.revenue,\n      expenses:\n        dashboardData.expenses?.labels?.length > 0 ? dashboardData.expenses : fallback.expenses,\n      clients: { ...fallback.clients, ...dashboardData.clients },\n      trends: { ...fallback.trends, ...dashboardData.trends },\n    };\n  }, [dashboardData, getFallbackData]);\n\n  const displayData = getDisplayData();\n\n  // Widget Configuration\n  const defaultWidgets = useMemo(\n    () => [\n      {\n        id: 'kpi-overview',\n        title: t('dashboard:widgets.kpiOverview'),\n        component: 'KPIOverview',\n        enabled: true,\n        minW: 12,\n        minH: 2,\n      },\n      {\n        id: 'revenue-chart',\n        title: t('dashboard:widgets.revenueChart'),\n        component: 'RevenueChart',\n        enabled: true,\n        minW: 6,\n        minH: 4,\n      },\n      {\n        id: 'expense-breakdown',\n        title: t('dashboard:widgets.expenseBreakdown'),\n        component: 'ExpenseBreakdown',\n        enabled: true,\n        minW: 6,\n        minH: 4,\n      },\n      {\n        id: 'client-analytics',\n        title: t('dashboard:widgets.clientAnalytics'),\n        component: 'ClientAnalytics',\n        enabled: true,\n        minW: 12,\n        minH: 6,\n      },\n      {\n        id: 'recent-activity',\n        title: t('dashboard:widgets.recentActivity'),\n        component: 'RecentActivity',\n        enabled: true,\n        minW: 8,\n        minH: 3,\n      },\n      {\n        id: 'financial-health',\n        title: t('dashboard:widgets.financialHealth'),\n        component: 'FinancialHealth',\n        enabled: true,\n        minW: 4,\n        minH: 3,\n      },\n      {\n        id: 'comparative-analytics',\n        title: t('analytics:charts.comparison'),\n        component: 'ComparativeAnalytics',\n        enabled: compareMode,\n        minW: 12,\n        minH: 4,\n      },\n    ],\n    [t, compareMode],\n  );\n\n  const defaultLayouts = {\n    lg: [\n      { i: 'kpi-overview', x: 0, y: 0, w: 12, h: 2 },\n      { i: 'revenue-chart', x: 0, y: 2, w: 6, h: 4 },\n      { i: 'expense-breakdown', x: 6, y: 2, w: 6, h: 4 },\n      { i: 'comparative-analytics', x: 0, y: 6, w: 12, h: 4 },\n      { i: 'client-analytics', x: 0, y: 10, w: 12, h: 6 },\n      { i: 'recent-activity', x: 0, y: 16, w: 8, h: 3 },\n      { i: 'financial-health', x: 8, y: 16, w: 4, h: 3 },\n    ],\n    md: [\n      { i: 'kpi-overview', x: 0, y: 0, w: 10, h: 2 },\n      { i: 'revenue-chart', x: 0, y: 2, w: 5, h: 4 },\n      { i: 'expense-breakdown', x: 5, y: 2, w: 5, h: 4 },\n      { i: 'comparative-analytics', x: 0, y: 6, w: 10, h: 4 },\n      { i: 'client-analytics', x: 0, y: 10, w: 10, h: 6 },\n      { i: 'recent-activity', x: 0, y: 16, w: 10, h: 3 },\n      { i: 'financial-health', x: 0, y: 19, w: 10, h: 4 },\n    ],\n    sm: [\n      { i: 'kpi-overview', x: 0, y: 0, w: 6, h: 2 },\n      { i: 'revenue-chart', x: 0, y: 2, w: 6, h: 4 },\n      { i: 'expense-breakdown', x: 0, y: 6, w: 6, h: 4 },\n      { i: 'comparative-analytics', x: 0, y: 10, w: 6, h: 4 },\n      { i: 'client-analytics', x: 0, y: 14, w: 6, h: 6 },\n      { i: 'recent-activity', x: 0, y: 20, w: 6, h: 3 },\n      { i: 'financial-health', x: 0, y: 23, w: 6, h: 4 },\n    ],\n  };\n\n  const [layouts, setLayouts] = useState(() => {\n    try {\n      const saved = localStorage.getItem('enhanced-dashboard-layouts');\n      return saved ? JSON.parse(saved) : defaultLayouts;\n    } catch {\n      return defaultLayouts;\n    }\n  });\n\n  const [widgets, setWidgets] = useState(() => {\n    try {\n      const saved = localStorage.getItem('enhanced-dashboard-widgets');\n      return saved ? JSON.parse(saved) : defaultWidgets;\n    } catch {\n      return defaultWidgets;\n    }\n  });\n\n  // Save layout changes\n  const handleLayoutChange = useCallback((layout, layouts) => {\n    setLayouts(layouts);\n    localStorage.setItem('enhanced-dashboard-layouts', JSON.stringify(layouts));\n  }, []);\n\n  // Save widget configuration\n  const handleWidgetToggle = useCallback(\n    widgetId => {\n      const updatedWidgets = widgets.map(widget =>\n        widget.id === widgetId ? { ...widget, enabled: !widget.enabled } : widget,\n      );\n      setWidgets(updatedWidgets);\n      localStorage.setItem('enhanced-dashboard-widgets', JSON.stringify(updatedWidgets));\n    },\n    [widgets],\n  );\n\n  const handleRefresh = async () => {\n    await forceRefresh();\n  };\n\n  // Loading Component\n  const LoadingWidget = ({ title }) => (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-full flex flex-col items-center justify-center'>\n      <Loader2 className='h-8 w-8 animate-spin text-blue-500 mb-3' />\n      <p className='text-sm text-gray-500'>\n        {t('dashboard:loading')} {title}...\n      </p>\n    </div>\n  );\n\n  // Error Component\n  const ErrorWidget = ({ title, error }) => (\n    <div className='bg-white rounded-xl shadow-sm border border-red-200 p-6 h-full flex flex-col items-center justify-center'>\n      <AlertCircle className='h-8 w-8 text-red-500 mb-3' />\n      <p className='text-sm text-gray-700 font-medium mb-1'>{title}</p>\n      <p className='text-xs text-red-600 text-center'>{error}</p>\n    </div>\n  );\n\n  // Empty State Component\n  const EmptyStateWidget = ({ title, description, icon: Icon = BarChart3 }) => (\n    <div className='bg-gradient-to-br from-gray-50 to-white rounded-xl shadow-sm border border-gray-200 p-6 h-full flex flex-col items-center justify-center'>\n      <div className='bg-gray-100 rounded-full p-3 mb-4'>\n        <Icon className='h-8 w-8 text-gray-400' />\n      </div>\n      <p className='text-sm text-gray-700 font-medium mb-2'>{title}</p>\n      <p className='text-xs text-gray-500 text-center'>{description}</p>\n      <button\n        onClick={handleRefresh}\n        className='mt-4 px-4 py-2 text-xs bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors'\n      >\n        {t('dashboard:actions.refresh')}\n      </button>\n    </div>\n  );\n\n  // KPI Overview Widget with improved design\n  const KPIOverviewWidget = () => {\n    const kpiData = displayData.kpis || {};\n\n    const kpis = [\n      {\n        title: t('dashboard:kpis.totalRevenue'),\n        value: kpiData.totalRevenue || 0,\n        format: 'currency',\n        trend: kpiData.revenueTrend || 0,\n        icon: DollarSign,\n        color: 'green',\n      },\n      {\n        title: t('dashboard:kpis.totalExpenses'),\n        value: kpiData.totalExpenses || 0,\n        format: 'currency',\n        trend: kpiData.expensesTrend || 0,\n        icon: TrendingDown,\n        color: 'red',\n      },\n      {\n        title: t('dashboard:kpis.netProfit'),\n        value: (kpiData.totalRevenue || 0) - (kpiData.totalExpenses || 0),\n        format: 'currency',\n        trend: kpiData.profitTrend || 0,\n        icon: Target,\n        color: 'blue',\n      },\n      {\n        title: t('dashboard:kpis.activeClients'),\n        value: displayData.clients?.active || 0,\n        format: 'number',\n        trend: displayData.clients?.trend || 0,\n        icon: Users,\n        color: 'purple',\n      },\n    ];\n\n    if (loading) {\n      return <LoadingWidget title={t('dashboard:widgets.kpiOverview')} />;\n    }\n\n    return (\n      <div className='grid grid-cols-2 lg:grid-cols-4 gap-4 h-full'>\n        {kpis.map((kpi, index) => (\n          <EnhancedKPICard\n            key={index}\n            {...kpi}\n            className='transform hover:scale-105 transition-transform duration-200'\n          />\n        ))}\n      </div>\n    );\n  };\n\n  // Revenue Chart Widget with improved design\n  const RevenueChartWidget = () => {\n    const revenueData = displayData.revenue || { labels: [], data: [] };\n\n    if (loading) {\n      return <LoadingWidget title={t('dashboard:widgets.revenueChart')} />;\n    }\n\n    if (error) {\n      return <ErrorWidget title={t('dashboard:widgets.revenueChart')} error={error} />;\n    }\n\n    const hasData = revenueData.data && revenueData.data.some(value => value > 0);\n\n    if (!hasData) {\n      return (\n        <EmptyStateWidget\n          title={t('dashboard:widgets.revenueChart')}\n          description={t('dashboard:emptyStates.noRevenueData')}\n          icon={TrendingUp}\n        />\n      );\n    }\n\n    const chartData = {\n      labels: revenueData.labels || [],\n      datasets: [\n        {\n          label: t('dashboard:widgets.revenue'),\n          data: revenueData.data || [],\n          borderColor: 'rgb(34, 197, 94)',\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\n          borderWidth: 3,\n          fill: true,\n          tension: 0.4,\n          pointBackgroundColor: 'rgb(34, 197, 94)',\n          pointBorderColor: 'white',\n          pointBorderWidth: 2,\n          pointRadius: 6,\n          pointHoverRadius: 8,\n        },\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: false,\n        },\n        tooltip: {\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          titleColor: 'white',\n          bodyColor: 'white',\n          borderColor: 'rgb(34, 197, 94)',\n          borderWidth: 1,\n        },\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          grid: {\n            color: 'rgba(0, 0, 0, 0.05)',\n          },\n          ticks: {\n            callback: value => `Ôé¼Ôé¼{value.toLocaleString()}`,\n            color: 'rgb(107, 114, 128)',\n          },\n        },\n        x: {\n          grid: {\n            display: false,\n          },\n          ticks: {\n            color: 'rgb(107, 114, 128)',\n          },\n        },\n      },\n    };\n\n    return (\n      <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-full'>\n        <div className='flex items-center justify-between mb-4'>\n          <h3 className='text-lg font-semibold text-gray-900'>\n            {t('dashboard:widgets.revenueChart')}\n          </h3>\n          <div className='flex items-center space-x-2'>\n            <TrendingUp className='h-5 w-5 text-green-500' />\n            <span className='text-sm text-gray-500'>{t('dashboard:period.thisMonth')}</span>\n          </div>\n        </div>\n        <div className='h-full' style={{ height: 'calc(100% - 4rem)' }}>\n          <Line data={chartData} options={options} />\n        </div>\n      </div>\n    );\n  };\n\n  // Expense Breakdown Widget with improved design\n  const ExpenseBreakdownWidget = () => {\n    const expenseData = displayData.expenses || { labels: [], data: [] };\n\n    if (loading) {\n      return <LoadingWidget title={t('dashboard:widgets.expenseBreakdown')} />;\n    }\n\n    if (error) {\n      return <ErrorWidget title={t('dashboard:widgets.expenseBreakdown')} error={error} />;\n    }\n\n    const hasData = expenseData.data && expenseData.data.some(value => value > 0);\n\n    if (!hasData) {\n      return (\n        <EmptyStateWidget\n          title={t('dashboard:widgets.expenseBreakdown')}\n          description={t('dashboard:emptyStates.noExpenseData')}\n          icon={PieChart}\n        />\n      );\n    }\n\n    const chartData = {\n      labels: expenseData.labels || [],\n      datasets: [\n        {\n          data: expenseData.data || [],\n          backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#F97316'],\n          borderWidth: 0,\n          hoverBorderWidth: 3,\n          hoverBorderColor: 'white',\n        },\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            usePointStyle: true,\n            padding: 20,\n            font: {\n              size: 12,\n            },\n          },\n        },\n        tooltip: {\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          titleColor: 'white',\n          bodyColor: 'white',\n          callbacks: {\n            label: function (context) {\n              const total = context.dataset.data.reduce((a, b) => a + b, 0);\n              const percentage = ((context.raw / total) * 100).toFixed(1);\n              return `${context.label}: Ôé¼Ôé¼{context.raw.toLocaleString()} (${percentage}%)`;\n            },\n          },\n        },\n      },\n    };\n\n    return (\n      <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-full'>\n        <div className='flex items-center justify-between mb-4'>\n          <h3 className='text-lg font-semibold text-gray-900'>\n            {t('dashboard:widgets.expenseBreakdown')}\n          </h3>\n          <PieChart className='h-5 w-5 text-blue-500' />\n        </div>\n        <div className='h-full' style={{ height: 'calc(100% - 4rem)' }}>\n          <Doughnut data={chartData} options={options} />\n        </div>\n      </div>\n    );\n  };\n\n  // Recent Activity Widget with improved design\n  const RecentActivityWidget = () => {\n    const activities = [\n      {\n        type: 'invoice',\n        description: t('dashboard:activity.invoiceCreated'),\n        time: '2 ore fa',\n        icon: FileText,\n        color: 'bg-blue-100 text-blue-600',\n      },\n      {\n        type: 'payment',\n        description: t('dashboard:activity.paymentReceived'),\n        time: '4 ore fa',\n        icon: CheckCircle,\n        color: 'bg-green-100 text-green-600',\n      },\n      {\n        type: 'client',\n        description: t('dashboard:activity.clientAdded'),\n        time: '1 giorno fa',\n        icon: Users,\n        color: 'bg-purple-100 text-purple-600',\n      },\n    ];\n\n    return (\n      <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-full'>\n        <div className='flex items-center justify-between mb-4'>\n          <h3 className='text-lg font-semibold text-gray-900'>\n            {t('dashboard:widgets.recentActivity')}\n          </h3>\n          <Activity className='h-5 w-5 text-gray-400' />\n        </div>\n        <div className='space-y-4'>\n          {activities.map((activity, index) => (\n            <div\n              key={index}\n              className='flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors'\n            >\n              <div className={`flex-shrink-0 p-2 rounded-lg ${activity.color}`}>\n                <activity.icon className='h-4 w-4' />\n              </div>\n              <div className='flex-1 min-w-0'>\n                <p className='text-sm text-gray-900 font-medium'>{activity.description}</p>\n                <p className='text-xs text-gray-500'>{activity.time}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Financial Health Widget with improved design\n  const FinancialHealthWidget = () => {\n    const healthScore = displayData.kpis?.healthScore || 85;\n\n    const getHealthColor = score => {\n      if (score >= 80) return 'text-green-600';\n      if (score >= 60) return 'text-yellow-600';\n      return 'text-red-600';\n    };\n\n    const getHealthBgColor = score => {\n      if (score >= 80) return 'bg-green-500';\n      if (score >= 60) return 'bg-yellow-500';\n      return 'bg-red-500';\n    };\n\n    const getHealthLabel = score => {\n      if (score >= 80) return t('dashboard:health.excellent');\n      if (score >= 60) return t('dashboard:health.good');\n      return t('dashboard:health.needsAttention');\n    };\n\n    return (\n      <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-full'>\n        <div className='flex items-center justify-between mb-4'>\n          <h3 className='text-lg font-semibold text-gray-900'>\n            {t('dashboard:widgets.financialHealth')}\n          </h3>\n          <Target className='h-5 w-5 text-gray-400' />\n        </div>\n        <div className='text-center'>\n          <div className='mb-4'>\n            <div className={`text-4xl font-bold ${getHealthColor(healthScore)} mb-2`}>\n              {healthScore}%\n            </div>\n            <div className='text-sm text-gray-600 font-medium'>{getHealthLabel(healthScore)}</div>\n          </div>\n          <div className='w-full bg-gray-200 rounded-full h-3 mb-4'>\n            <div\n              className={`h-3 rounded-full transition-all duration-1000 ${getHealthBgColor(healthScore)}`}\n              style={{ width: `${healthScore}%` }}\n            ></div>\n          </div>\n          <div className='text-xs text-gray-500'>{t('dashboard:health.basedOnFinancials')}</div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderWidget = widgetId => {\n    const widget = widgets.find(w => w.id === widgetId);\n    if (!widget || !widget.enabled) return null;\n\n    switch (widget.component) {\n      case 'KPIOverview':\n        return <KPIOverviewWidget />;\n      case 'RevenueChart':\n        return <RevenueChartWidget />;\n      case 'ExpenseBreakdown':\n        return <ExpenseBreakdownWidget />;\n      case 'ClientAnalytics':\n        return (\n          <ErrorBoundary>\n            <ClientAnalyticsWidgets />\n          </ErrorBoundary>\n        );\n      case 'RecentActivity':\n        return <RecentActivityWidget />;\n      case 'FinancialHealth':\n        return <FinancialHealthWidget />;\n      case 'ComparativeAnalytics':\n        return (\n          <ErrorBoundary>\n            <ComparativeAnalytics dateRange={dateRange} comparisonType={comparisonType} />\n          </ErrorBoundary>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const enabledWidgets = widgets.filter(w => w.enabled);\n\n  return (\n    <div className='min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6'>\n      {/* Header */}\n      <div className='mb-8'>\n        <div className='flex flex-col lg:flex-row lg:items-center lg:justify-between'>\n          <div className='mb-4 lg:mb-0'>\n            <h1 className='text-3xl font-bold text-gray-900 mb-2'>{t('dashboard:title')}</h1>\n            <p className='text-gray-600'>\n              {t('dashboard:subtitle')} {user?.firstName || 'Utente'}\n            </p>\n          </div>\n\n          <div className='flex flex-wrap items-center gap-3'>\n            {/* Period Selector */}\n            <AdvancedTimePeriodSelector\n              selectedPeriod={selectedPeriod}\n              onPeriodChange={setSelectedPeriod}\n              dateRange={dateRange}\n              onDateRangeChange={setDateRange}\n            />\n\n            {/* Connection Status */}\n            <div className='flex items-center space-x-2'>\n              {isConnected ? (\n                <div className='flex items-center space-x-1 text-green-600'>\n                  <Wifi className='h-4 w-4' />\n                  <span className='text-xs font-medium'>Live</span>\n                </div>\n              ) : (\n                <div className='flex items-center space-x-1 text-red-600'>\n                  <WifiOff className='h-4 w-4' />\n                  <span className='text-xs font-medium'>Offline</span>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <button\n              onClick={handleRefresh}\n              disabled={loading}\n              className='flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors'\n            >\n              {loading ? (\n                <Loader2 className='h-4 w-4 animate-spin' />\n              ) : (\n                <RefreshCw className='h-4 w-4' />\n              )}\n              <span className='text-sm font-medium'>\n                {loading ? t('dashboard:actions.refreshing') : t('dashboard:actions.refresh')}\n              </span>\n            </button>\n\n            <button\n              onClick={() => setEditMode(!editMode)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\n                editMode\n                  ? 'bg-green-600 text-white hover:bg-green-700'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              <Grid className='h-4 w-4' />\n              <span className='text-sm font-medium'>\n                {editMode ? t('dashboard:actions.exitEdit') : t('dashboard:actions.editLayout')}\n              </span>\n            </button>\n          </div>\n        </div>\n\n        {lastUpdated && (\n          <div className='mt-4 text-xs text-gray-500'>\n            {t('dashboard:lastUpdated')}: {new Date(lastUpdated).toLocaleString('it-IT')}\n          </div>\n        )}\n      </div>\n\n      {/* Dashboard Grid */}\n      <ResponsiveGridLayout\n        className='layout'\n        layouts={layouts}\n        onLayoutChange={handleLayoutChange}\n        isDraggable={editMode}\n        isResizable={editMode}\n        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n        rowHeight={60}\n        margin={[16, 16]}\n      >\n        {enabledWidgets.map(widget => (\n          <div key={widget.id} className='widget-container'>\n            {renderWidget(widget.id)}\n          </div>\n        ))}\n      </ResponsiveGridLayout>\n\n      {/* Edit Mode Panel */}\n      {editMode && (\n        <div className='fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-white rounded-xl shadow-lg border border-gray-200 p-4 z-50'>\n          <div className='flex items-center space-x-4'>\n            <span className='text-sm font-medium text-gray-700'>\n              {t('dashboard:editMode.toggleWidgets')}:\n            </span>\n            {defaultWidgets.map(widget => (\n              <label key={widget.id} className='flex items-center space-x-2'>\n                <input\n                  type='checkbox'\n                  checked={widget.enabled}\n                  onChange={() => handleWidgetToggle(widget.id)}\n                  className='rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                />\n                <span className='text-xs text-gray-600'>{widget.title}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedDashboard;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\dashboard\\Layout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\dashboard\\Navbar.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sidebarCollapsed' is assigned a value but never used.","line":15,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Bars3Icon,\n  BellIcon,\n  UserCircleIcon,\n  Cog6ToothIcon,\n  ArrowRightOnRectangleIcon,\n} from '@heroicons/react/24/outline';\nimport { useTheme } from '@context/OptimizedThemeContext';\nimport LanguageSwitcher from '@components/common/LanguageSwitcher';\nimport { useClerkBypass, useUserBypass } from '@hooks/useClerkBypass';\n\nexport default function Navbar({ onOpenSidebar, sidebarCollapsed = false }) {\n  const { t } = useTranslation('navigation');\n  const navigate = useNavigate();\n  const { theme, toggleTheme } = useTheme();\n\n  // Use bypass hooks that automatically handle development mode\n  const { signOut } = useClerkBypass();\n  const { user } = useUserBypass();\n\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  const [notificationsOpen, setNotificationsOpen] = useState(false);\n  const userMenuRef = useRef(null);\n  const notificationsRef = useRef(null);\n\n  // Close dropdowns when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {\n        setUserMenuOpen(false);\n      }\n      if (notificationsRef.current && !notificationsRef.current.contains(event.target)) {\n        setNotificationsOpen(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Handle keyboard navigation for dropdowns\n  const handleDropdownKeyDown = (event, isOpen, setOpen) => {\n    if (event.key === 'Escape') {\n      setOpen(false);\n    } else if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      setOpen(!isOpen);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      navigate('/login');\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  return (\n    <nav\n      role='navigation'\n      aria-label='Main navigation'\n      className='bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 w-full'\n    >\n      <div className='mx-auto px-4 sm:px-6 lg:px-8'>\n        <div className='flex justify-between h-16'>\n          {/* Left section */}\n          <div className='flex items-center'>\n            {/* Mobile menu button */}\n            <button\n              onClick={onOpenSidebar}\n              className='lg:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500'\n              aria-label={t('openSidebar')}\n              aria-expanded='false'\n              aria-controls='sidebar'\n            >\n              <Bars3Icon className='h-6 w-6' aria-hidden='true' />\n            </button>\n\n            {/* Logo */}\n            <Link\n              to='/dashboard'\n              className='flex-shrink-0 flex items-center ml-4 lg:ml-0'\n              aria-label={t('goToHome')}\n            >\n              <img className='h-8 w-auto' src='/logo_nexa.png' alt={t('logoAlt')} />\n              <span className='sr-only'>{t('companyName')}</span>\n            </Link>\n          </div>\n\n          {/* Right section */}\n          <div className='flex items-center space-x-4'>\n            {/* Language Switcher */}\n            <div className='hidden sm:block'>\n              <LanguageSwitcher />\n            </div>\n\n            {/* Theme toggle */}\n            <button\n              onClick={toggleTheme}\n              className='p-2 text-gray-400 hover:text-gray-500 dark:text-gray-300 dark:hover:text-gray-200 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700'\n              aria-label={theme === 'dark' ? t('switchToLight') : t('switchToDark')}\n            >\n              {theme === 'dark' ? (\n                <svg\n                  className='h-5 w-5'\n                  fill='none'\n                  viewBox='0 0 24 24'\n                  stroke='currentColor'\n                  aria-hidden='true'\n                >\n                  <path\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                    d='M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z'\n                  />\n                </svg>\n              ) : (\n                <svg\n                  className='h-5 w-5'\n                  fill='none'\n                  viewBox='0 0 24 24'\n                  stroke='currentColor'\n                  aria-hidden='true'\n                >\n                  <path\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                    d='M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z'\n                  />\n                </svg>\n              )}\n            </button>\n\n            {/* Notifications */}\n            <div className='relative' ref={notificationsRef}>\n              <button\n                onClick={() => setNotificationsOpen(!notificationsOpen)}\n                onKeyDown={e => handleDropdownKeyDown(e, notificationsOpen, setNotificationsOpen)}\n                className='p-2 text-gray-400 hover:text-gray-500 dark:text-gray-300 dark:hover:text-gray-200 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700'\n                aria-label={t('notifications')}\n                aria-expanded={notificationsOpen}\n                aria-haspopup='true'\n                aria-controls='notifications-dropdown'\n              >\n                <BellIcon className='h-6 w-6' aria-hidden='true' />\n                {/* Notification badge */}\n                <span className='absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full sr-only'>\n                  {t('newNotifications')}\n                </span>\n              </button>\n\n              {/* Notifications dropdown */}\n              {notificationsOpen && (\n                <div\n                  id='notifications-dropdown'\n                  role='menu'\n                  aria-labelledby='notifications-button'\n                  className='origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-50'\n                >\n                  <div className='py-1' role='none'>\n                    <div className='px-4 py-2 text-sm text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600'>\n                      <h3 className='font-medium'>{t('notifications')}</h3>\n                    </div>\n                    <div className='px-4 py-3 text-sm text-gray-500 dark:text-gray-400'>\n                      {t('noNotifications')}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* User menu */}\n            <div className='relative' ref={userMenuRef}>\n              <button\n                onClick={() => setUserMenuOpen(!userMenuOpen)}\n                onKeyDown={e => handleDropdownKeyDown(e, userMenuOpen, setUserMenuOpen)}\n                className='flex items-center text-sm rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 p-2'\n                aria-label={t('userMenu')}\n                aria-expanded={userMenuOpen}\n                aria-haspopup='true'\n                aria-controls='user-menu-dropdown'\n              >\n                {user?.imageUrl ? (\n                  <img\n                    className='h-8 w-8 rounded-full'\n                    src={user.imageUrl}\n                    alt={t('userAvatar', { name: user.firstName || 'User' })}\n                  />\n                ) : (\n                  <UserCircleIcon className='h-8 w-8 text-gray-400' aria-hidden='true' />\n                )}\n                <span className='hidden sm:ml-2 sm:block text-sm font-medium text-gray-700 dark:text-gray-200'>\n                  {user?.firstName || t('user')}\n                </span>\n              </button>\n\n              {/* User dropdown menu */}\n              {userMenuOpen && (\n                <div\n                  id='user-menu-dropdown'\n                  role='menu'\n                  aria-labelledby='user-menu-button'\n                  className='origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-50'\n                >\n                  <div className='py-1' role='none'>\n                    {/* User info */}\n                    <div className='px-4 py-2 text-sm text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600'>\n                      <p className='font-medium'>\n                        {user?.firstName} {user?.lastName}\n                      </p>\n                      <p className='text-gray-500 dark:text-gray-400 truncate'>\n                        {user?.emailAddresses?.[0]?.emailAddress}\n                      </p>\n                    </div>\n\n                    {/* Menu items */}\n                    <Link\n                      to='/settings'\n                      className='group flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                      role='menuitem'\n                      onClick={() => setUserMenuOpen(false)}\n                    >\n                      <Cog6ToothIcon\n                        className='mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500'\n                        aria-hidden='true'\n                      />\n                      {t('settings')}\n                    </Link>\n\n                    <button\n                      onClick={() => {\n                        setUserMenuOpen(false);\n                        handleSignOut();\n                      }}\n                      className='group flex w-full items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                      role='menuitem'\n                    >\n                      <ArrowRightOnRectangleIcon\n                        className='mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500'\n                        aria-hidden='true'\n                      />\n                      {t('logout')}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\dashboard\\Sidebar.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarDaysIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UsersIcon' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CurrencyDollarIcon' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReceiptPercentIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PresentationChartLineIcon' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDark' is assigned a value but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  HomeIcon,\n  CalendarDaysIcon,\n  ArchiveBoxIcon,\n  UsersIcon,\n  CurrencyDollarIcon,\n  ReceiptPercentIcon, // Using this for Entrate e Spese as an example\n  ChartBarIcon,\n  DocumentChartBarIcon,\n  QrCodeIcon,\n  Cog6ToothIcon,\n  MicrophoneIcon, // Added for Comando vocale\n  DocumentTextIcon, // Added for Preventivi\n  EnvelopeIcon, // Added for Email\n  XMarkIcon,\n  PresentationChartLineIcon, // Added for Advanced Analytics\n  UserGroupIcon,\n  DocumentDuplicateIcon,\n  CreditCardIcon,\n  CalendarIcon,\n  FolderIcon,\n  CameraIcon,\n  ChevronDoubleLeftIcon,\n  ChevronDoubleRightIcon,\n} from '@heroicons/react/24/outline';\nimport { useTheme } from '@context/OptimizedThemeContext';\nimport nexaLogo from '@assets/logo_nexa.png';\nimport nexaLogoCollapsed from '@assets/logo_nexa_mager.png';\n\n// Remove the separate SidebarContent function to avoid hooks order issues\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport default function Sidebar({ onCloseSidebar, collapsed = false, onToggleCollapse }) {\n  const { isDark } = useTheme();\n  const { t, ready } = useTranslation('navigation');\n\n  // Show loading state if translations are not ready - MUST be before other hooks/function calls\n  if (!ready) {\n    return (\n      <div className='flex grow flex-col gap-y-5 overflow-y-auto bg-white dark:bg-gray-800 px-6 pb-4 border-r border-gray-200 dark:border-gray-700 w-64'>\n        <div className='flex h-16 shrink-0 items-center justify-center'>\n          <div className='animate-spin rounded-full h-6 w-6 border-b-2 border-[#357AF3]'></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Define navigation data directly in the component after loading check\n  const navigation = [\n    { name: t('sidebar.dashboard'), href: '/dashboard', icon: HomeIcon },\n    { name: t('sidebar.clients'), href: '/clients', icon: UserGroupIcon },\n    { name: t('sidebar.calendar'), href: '/calendar', icon: CalendarIcon },\n    { name: t('sidebar.invoices'), href: '/invoices', icon: DocumentTextIcon },\n    { name: t('sidebar.quotes'), href: '/quotes', icon: DocumentDuplicateIcon },\n    { name: t('sidebar.transactions'), href: '/transactions', icon: CreditCardIcon },\n    { name: t('sidebar.inventory'), href: '/inventory', icon: ArchiveBoxIcon },\n    { name: t('sidebar.analytics'), href: '/analytics', icon: ChartBarIcon },\n    { name: t('sidebar.reports'), href: '/reports', icon: DocumentChartBarIcon },\n    { name: t('sidebar.documents'), href: '/documents', icon: FolderIcon },\n    { name: t('sidebar.email'), href: '/email', icon: EnvelopeIcon },\n    { name: t('sidebar.scanner'), href: '/scan', icon: CameraIcon },\n    { name: t('sidebar.voice'), href: '/voice', icon: MicrophoneIcon },\n  ];\n\n  const tools = [\n    { name: t('sidebar.barcodeScan'), href: '/scan', icon: QrCodeIcon },\n    { name: t('sidebar.voiceCommand'), href: '/voice', icon: MicrophoneIcon },\n  ];\n\n  const settings = [{ name: t('sidebar.settings'), href: '/settings', icon: Cog6ToothIcon }];\n\n  return (\n    <div\n      className={`flex grow flex-col gap-y-5 overflow-y-auto bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-all duration-300 ease-in-out ${\n        collapsed ? 'px-2 pb-4 w-16' : 'px-6 pb-4 w-64'\n      }`}\n    >\n      {/* Header with logo and toggle button */}\n      <div\n        className={`flex h-16 shrink-0 items-center border-b border-gray-200 dark:border-gray-700 ${\n          collapsed ? '-mx-2 px-2 justify-center' : '-mx-6 px-6 justify-between'\n        }`}\n      >\n        {!collapsed && (\n          <div className='flex items-center'>\n            <img\n              className='h-10 w-auto'\n              src={nexaLogo}\n              alt={t('sidebar.logoAlt', 'Nexa Manager')}\n            />\n          </div>\n        )}\n\n        {collapsed && (\n          <img\n            className='h-8 w-auto'\n            src={nexaLogoCollapsed}\n            alt={t('sidebar.logoAlt', 'Nexa Manager')}\n          />\n        )}\n\n        {/* Desktop toggle button */}\n        {onToggleCollapse && (\n          <button\n            type='button'\n            className={`hidden lg:flex p-1.5 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors ${\n              collapsed ? 'absolute top-4 right-2' : ''\n            }`}\n            onClick={onToggleCollapse}\n          >\n            <span className='sr-only'>\n              {collapsed ? t('sidebar.expand') : t('sidebar.collapse')}\n            </span>\n            {collapsed ? (\n              <ChevronDoubleRightIcon className='h-5 w-5' aria-hidden='true' />\n            ) : (\n              <ChevronDoubleLeftIcon className='h-5 w-5' aria-hidden='true' />\n            )}\n          </button>\n        )}\n\n        {/* Close button for mobile */}\n        <button\n          type='button'\n          className='lg:hidden -m-2.5 p-2.5 text-gray-700 dark:text-gray-300'\n          onClick={onCloseSidebar}\n        >\n          <span className='sr-only'>{t('sidebar.close')}</span>\n          <XMarkIcon className='h-6 w-6' aria-hidden='true' />\n        </button>\n      </div>\n\n      <nav className='flex flex-1 flex-col'>\n        <ul role='list' className='flex flex-1 flex-col gap-y-7'>\n          {/* Main Navigation */}\n          <li>\n            <ul role='list' className='-mx-2 space-y-1'>\n              {navigation.map(item => (\n                <li key={item.name}>\n                  <NavLink\n                    to={item.href}\n                    onClick={onCloseSidebar} // Close sidebar on mobile when link is clicked\n                    title={collapsed ? item.name : undefined} // Show tooltip when collapsed\n                    className={({ isActive }) =>\n                      classNames(\n                        isActive\n                          ? 'bg-primary-100 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400'\n                          : 'text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-700',\n                        'group flex rounded-md p-2 text-nav-text transition-colors duration-200',\n                        collapsed ? 'justify-center' : 'gap-x-3',\n                      )\n                    }\n                  >\n                    <item.icon className={classNames('h-6 w-6 shrink-0')} aria-hidden='true' />\n                    {!collapsed && <span>{item.name}</span>}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </li>\n\n          {/* Tools Section */}\n          {!collapsed && (\n            <li>\n              <div className='text-xs font-semibold leading-6 text-gray-400 dark:text-gray-500 uppercase tracking-wide'>\n                {t('sidebar.tools', 'Tools')}\n              </div>\n              <ul role='list' className='-mx-2 mt-2 space-y-1'>\n                {tools.map(item => (\n                  <li key={item.name}>\n                    <NavLink\n                      to={item.href}\n                      onClick={onCloseSidebar} // Close sidebar on mobile when link is clicked\n                      className={({ isActive }) =>\n                        classNames(\n                          isActive\n                            ? 'bg-primary-100 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400'\n                            : 'text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-700',\n                          'group flex gap-x-3 rounded-md p-2 text-nav-text transition-colors duration-200',\n                        )\n                      }\n                    >\n                      <item.icon className='h-6 w-6 shrink-0' aria-hidden='true' />\n                      {item.name}\n                    </NavLink>\n                  </li>\n                ))}\n              </ul>\n            </li>\n          )}\n\n          {/* Settings Section - at bottom */}\n          <li className='mt-auto'>\n            <div className='border-t border-gray-200 dark:border-gray-700 pt-4'>\n              <ul role='list' className='-mx-2 space-y-1'>\n                {settings.map(item => (\n                  <li key={item.name}>\n                    <NavLink\n                      to={item.href}\n                      onClick={onCloseSidebar} // Close sidebar on mobile when link is clicked\n                      title={collapsed ? item.name : undefined} // Show tooltip when collapsed\n                      className={({ isActive }) =>\n                        classNames(\n                          isActive\n                            ? 'bg-primary-100 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400'\n                            : 'text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-700',\n                          'group flex rounded-md p-2 text-nav-text transition-colors duration-200',\n                          collapsed ? 'justify-center' : 'gap-x-3',\n                        )\n                      }\n                    >\n                      <item.icon className='h-6 w-6 shrink-0' aria-hidden='true' />\n                      {!collapsed && <span>{item.name}</span>}\n                    </NavLink>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\debug\\LanguageDebugger.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\debug\\LanguageForcer.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[796,836],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":29,"endColumn":16,"suggestions":[{"fix":{"range":[841,893],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":30,"endColumn":16,"suggestions":[{"fix":{"range":[898,956],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":31,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":31,"endColumn":16,"suggestions":[{"fix":{"range":[961,1025],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  forceItalianLanguage,\n  debugLanguageSettings,\n  resetLanguageSettings,\n} from '@utils/languageUtils';\n\nconst LanguageForcer = () => {\n  const { i18n, t } = useTranslation('inventory');\n  const [debugInfo, setDebugInfo] = useState({});\n\n  useEffect(() => {\n    // Debug current language settings\n    debugLanguageSettings();\n\n    // Update debug info\n    setDebugInfo({\n      currentLang: i18n.language,\n      resolvedLang: i18n.resolvedLanguage,\n      isInitialized: i18n.isInitialized,\n      localStorage: localStorage.getItem('nexa-language'),\n      i18nextLng: localStorage.getItem('i18nextLng'),\n      navigatorLang: navigator.language,\n    });\n\n    // Test some translations\n    console.log('­ƒº¬ Testing translations:');\n    console.log('- reorder.title:', t('reorder.title'));\n    console.log('- reorder.itemInfo:', t('reorder.itemInfo'));\n    console.log('- reorder.fields.name:', t('reorder.fields.name'));\n  }, [i18n, t]);\n\n  return (\n    <div className='fixed top-4 left-4 bg-yellow-100 border border-yellow-400 text-yellow-800 px-4 py-2 rounded-md text-sm z-50 max-w-xs'>\n      <div className='font-bold mb-2'>­ƒîÉ Language Debug</div>\n      <div className='space-y-1 text-xs'>\n        <div>Current: {debugInfo.currentLang}</div>\n        <div>Resolved: {debugInfo.resolvedLang}</div>\n        <div>Ready: {debugInfo.isInitialized ? 'Ô£à' : 'ÔØî'}</div>\n        <div>Storage: {debugInfo.localStorage}</div>\n        <div>i18next: {debugInfo.i18nextLng}</div>\n        <div>Browser: {debugInfo.navigatorLang}</div>\n        <div>Test: {t('reorder.title', 'Fallback')}</div>\n      </div>\n      <div className='mt-2 space-x-1'>\n        <button\n          onClick={forceItalianLanguage}\n          className='bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600'\n        >\n          Force IT\n        </button>\n        <button\n          onClick={resetLanguageSettings}\n          className='bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600'\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default LanguageForcer;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\debug\\TranslationTester.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":8,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":8,"endColumn":16,"suggestions":[{"fix":{"range":[220,260],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":9,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":9,"endColumn":16,"suggestions":[{"fix":{"range":[265,299],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":10,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":10,"endColumn":16,"suggestions":[{"fix":{"range":[304,352],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":11,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":11,"endColumn":16,"suggestions":[{"fix":{"range":[357,409],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":12,"endColumn":16,"suggestions":[{"fix":{"range":[414,491],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":13,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":13,"endColumn":16,"suggestions":[{"fix":{"range":[496,540],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":14,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":14,"endColumn":16,"suggestions":[{"fix":{"range":[545,630],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":18,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":18,"endColumn":16,"suggestions":[{"fix":{"range":[737,788],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":20,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":20,"endColumn":18,"suggestions":[{"fix":{"range":[818,879],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":21,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":21,"endColumn":18,"suggestions":[{"fix":{"range":[886,957],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":18,"suggestions":[{"fix":{"range":[1237,1277],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":38,"endColumn":16,"suggestions":[{"fix":{"range":[1327,1375],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":39,"endColumn":16,"suggestions":[{"fix":{"range":[1380,1463],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":16,"suggestions":[{"fix":{"range":[1517,1571],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":44,"endColumn":18,"suggestions":[{"fix":{"range":[1635,1682],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":18,"suggestions":[{"fix":{"range":[1689,1773],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":16,"suggestions":[{"fix":{"range":[1787,1819],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'testTranslations'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [ready, i18n.language, testTranslations]","fix":{"range":[1906,1928],"text":"[ready, i18n.language, testTranslations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst TranslationTester = () => {\n  const { t, i18n, ready } = useTranslation(['inventory', 'common']);\n\n  const testTranslations = () => {\n    console.log('=== TRANSLATION TEST ===');\n    console.log('i18n ready:', ready);\n    console.log('Current language:', i18n.language);\n    console.log('Available languages:', i18n.languages);\n    console.log('localStorage language:', localStorage.getItem('nexa-language'));\n    console.log('i18n store:', i18n.store.data);\n    console.log('Loaded namespaces:', Object.keys(i18n.store.data[i18n.language] || {}));\n\n    // Check if Italian inventory namespace is loaded\n    const italianData = i18n.store.data['it'];\n    console.log('Italian data loaded:', !!italianData);\n    if (italianData) {\n      console.log('Italian namespaces:', Object.keys(italianData));\n      console.log('Italian inventory data:', italianData.inventory?.reorder);\n    }\n\n    // Test specific reorder translations\n    const testKeys = [\n      'reorder.title',\n      'reorder.itemInfo',\n      'reorder.fields.name',\n      'reorder.stockDeficit',\n    ];\n\n    testKeys.forEach(key => {\n      const translation = t(key, { ns: 'inventory' });\n      console.log(`${key}: \"${translation}\"`);\n    });\n\n    // Test with explicit namespace\n    console.log('Direct inventory namespace test:');\n    console.log('reorder.title (inventory):', t('reorder.title', { ns: 'inventory' }));\n\n    // Force reload Italian inventory namespace\n    console.log('Forcing reload of Italian inventory...');\n    i18n.reloadResources('it', 'inventory').then(() => {\n      console.log('Reload complete, testing again:');\n      console.log('reorder.title after reload:', t('reorder.title', { ns: 'inventory' }));\n    });\n\n    console.log('=== END TEST ===');\n  };\n\n  React.useEffect(() => {\n    if (ready) {\n      testTranslations();\n    }\n  }, [ready, i18n.language]);\n\n  return (\n    <div className='fixed top-4 right-4 bg-blue-100 p-4 rounded-lg shadow-lg z-50'>\n      <h3 className='font-bold text-sm mb-2'>Translation Debug</h3>\n      <div className='text-xs space-y-1'>\n        <div>Language: {i18n.language}</div>\n        <div>Ready: {ready ? 'Ô£à' : 'ÔØî'}</div>\n        <div>Test: {t('reorder.title', { ns: 'inventory' })}</div>\n        <button\n          onClick={testTranslations}\n          className='mt-2 px-2 py-1 bg-blue-500 text-white rounded text-xs'\n        >\n          Run Test\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TranslationTester;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\demo\\SafeTestingWrapper.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":102,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":102,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":111,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":111,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useClerkSupabase, useDemoData } from '@lib/clerkSupabaseIntegration';\nimport { useAuthBypass as useAuth } from '@hooks/useClerkBypass';\nimport Logger from '@utils/Logger';\n\nconst TestingContext = createContext();\n\n/**\n * Safe Testing Wrapper for Development\n * Provides secure testing capabilities without exposing service role keys\n */\nexport const SafeTestingWrapper = ({ children }) => {\n  const { isSignedIn, user } = useAuth();\n  const { initializeIntegration, isReady } = useClerkSupabase();\n  const { executeTestQuery, testUserId } = useDemoData();\n  const [testingMode, setTestingMode] = useState(false);\n  const [isDemoMode, setIsDemoMode] = useState(false);\n\n  // Check if demo mode is enabled\n  useEffect(() => {\n    const demoModeEnabled = import.meta.env.VITE_ENABLE_DEMO_MODE === 'true';\n    const isDevEnvironment = import.meta.env.VITE_APP_ENV === 'development';\n\n    setIsDemoMode(demoModeEnabled && isDevEnvironment);\n    Logger.info('Demo mode enabled:', demoModeEnabled && isDevEnvironment);\n  }, []);\n\n  // Initialize Clerk-Supabase integration when user signs in\n  useEffect(() => {\n    if (isSignedIn && user && !testingMode) {\n      initializeIntegration();\n    }\n  }, [isSignedIn, user, testingMode, initializeIntegration]);\n\n  const enableTestingMode = () => {\n    if (!isDemoMode) {\n      alert('Demo mode is not enabled. Check your environment configuration.');\n      return;\n    }\n\n    setTestingMode(true);\n    Logger.info('Testing mode enabled with demo user:', testUserId);\n  };\n\n  const disableTestingMode = () => {\n    setTestingMode(false);\n    Logger.info('Testing mode disabled');\n  };\n\n  const executeQuery = async queryFunction => {\n    if (testingMode) {\n      // Use demo data for testing\n      return await executeTestQuery(queryFunction);\n    } else if (isSignedIn && isReady) {\n      // Use real authenticated user\n      return await queryFunction();\n    } else {\n      throw new Error('Please sign in or enable testing mode to access data');\n    }\n  };\n\n  const contextValue = {\n    testingMode,\n    enableTestingMode,\n    disableTestingMode,\n    executeQuery,\n    isDemoMode,\n    currentUserId: testingMode ? testUserId : user?.id,\n    isAuthenticated: testingMode || (isSignedIn && isReady),\n  };\n\n  return (\n    <TestingContext.Provider value={contextValue}>\n      {isDemoMode && (\n        <div className='bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4'>\n          <div className='flex items-center'>\n            <div className='ml-3'>\n              <p className='text-sm'>\n                ­ƒº¬ <strong>Development Mode Attivo</strong> -\n                <button\n                  onClick={testingMode ? disableTestingMode : enableTestingMode}\n                  className='underline hover:text-yellow-800 ml-2'\n                >\n                  {testingMode ? 'Disabilita Testing' : 'Abilita Testing con Dati Demo'}\n                </button>\n              </p>\n              {testingMode && (\n                <p className='text-xs mt-1'>\n                  Usando utente demo: {testUserId} (sicuro per testing)\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      {children}\n    </TestingContext.Provider>\n  );\n};\n\n// Hook per usare il testing context\nexport const useSafeTesting = () => {\n  const context = useContext(TestingContext);\n  if (!context) {\n    throw new Error('useSafeTesting must be used within SafeTestingWrapper');\n  }\n  return context;\n};\n\n// HOC per wrappare componenti che necessitano testing\nexport const withSafeTesting = Component => {\n  return function SafeTestingComponent(props) {\n    return (\n      <SafeTestingWrapper>\n        <Component {...props} />\n      </SafeTestingWrapper>\n    );\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\documents\\DocumentManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\documents\\DocumentSharing.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'generateShareLink' function makes the dependencies of useEffect Hook (at line 195) change on every render. To fix this, wrap the definition of 'generateShareLink' in its own useCallback() Hook.","line":54,"column":9,"nodeType":"VariableDeclarator","endLine":82,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'generateShareLink' in its own useCallback() Hook.","fix":{"range":[1391,2167],"text":"useCallback(async () => {\n    setIsGenerating(true);\n    try {\n      // Simulate API call to generate secure sharing link\n      const shareToken = generateSecureToken();\n      const baseUrl = window.location.origin;\n      const link = `${baseUrl}/shared/${documentType}/${shareToken}`;\n\n      setShareLink(link);\n\n      // Generate QR code\n      const qrCode = await QRCode.toDataURL(link, {\n        width: 200,\n        margin: 2,\n        color: {\n          dark: '#1f2937',\n          light: '#ffffff',\n        },\n      });\n      setQrCodeUrl(qrCode);\n\n      // Save sharing configuration\n      await saveShareConfiguration(shareToken, shareSettings);\n    } catch (error) {\n      Logger.error('Error generating share link:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  XMarkIcon,\n  ShareIcon,\n  LinkIcon,\n  LockClosedIcon,\n  UserGroupIcon,\n  CheckCircleIcon,\n  ClipboardDocumentIcon,\n} from '@heroicons/react/24/outline';\nimport Logger from '@utils/Logger';\n\n// Import qrcode library\nimport QRCode from 'qrcode';\n\n// Removed unused documentService import\n\n/**\n * DocumentSharing Component\n * Provides secure document sharing with access control and analytics\n */\nconst DocumentSharing = ({\n  document,\n  documentType = 'quote', // 'quote', 'invoice', 'report'\n  isOpen,\n  onClose,\n  onShare,\n}) => {\n  const { t } = useTranslation('documents');\n  const [shareSettings, setShareSettings] = useState({\n    accessType: 'link', // 'link', 'password', 'email'\n    expiresAt: '',\n    password: '',\n    allowDownload: true,\n    allowPrint: true,\n    trackViews: true,\n    notifyOnAccess: false,\n    recipientEmail: '',\n  });\n\n  const [shareLink, setShareLink] = useState('');\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [viewStats, setViewStats] = useState({\n    views: 0,\n    downloads: 0,\n    lastAccessed: null,\n  });\n\n  // Generate sharing link\n  const generateShareLink = async () => {\n    setIsGenerating(true);\n    try {\n      // Simulate API call to generate secure sharing link\n      const shareToken = generateSecureToken();\n      const baseUrl = window.location.origin;\n      const link = `${baseUrl}/shared/${documentType}/${shareToken}`;\n\n      setShareLink(link);\n\n      // Generate QR code\n      const qrCode = await QRCode.toDataURL(link, {\n        width: 200,\n        margin: 2,\n        color: {\n          dark: '#1f2937',\n          light: '#ffffff',\n        },\n      });\n      setQrCodeUrl(qrCode);\n\n      // Save sharing configuration\n      await saveShareConfiguration(shareToken, shareSettings);\n    } catch (error) {\n      Logger.error('Error generating share link:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Copy link to clipboard\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(shareLink);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      Logger.error('Failed to copy:', error);\n    }\n  };\n\n  // Send link via email\n  const sendViaEmail = async () => {\n    if (!shareSettings.recipientEmail) return;\n\n    try {\n      const emailData = {\n        to: shareSettings.recipientEmail,\n        subject: `${t('sharing.emailSubject')}${document.title || document.number}`,\n        body: generateEmailBody(),\n        attachLink: shareLink,\n      };\n\n      // Call email service\n      await sendShareEmail(emailData);\n      onShare?.('email', shareSettings.recipientEmail);\n    } catch (error) {\n      Logger.error('Error sending email:', error);\n    }\n  };\n\n  // Generate email body\n  const generateEmailBody = () => {\n    const docTypeName =\n      documentType === 'quote'\n        ? t('sharing.quote')\n        : documentType === 'invoice'\n          ? t('sharing.invoice')\n          : t('sharing.document');\n\n    const expirationText = shareSettings.expiresAt\n      ? t('sharing.emailBodyExpiration', {\n          date: new Date(shareSettings.expiresAt).toLocaleDateString(),\n        })\n      : '';\n\n    return `\n      ${t('sharing.emailBodyDearUser')}\n\n      ${t('sharing.emailBodyShared', { docType: docTypeName.toLowerCase(), docName: document.title || document.number })}\n\n      ${t('sharing.emailBodyViewLink')}\n      ${shareLink}\n\n      ${expirationText}\n\n      ${t('sharing.emailBodyRegards')}\n    `;\n  };\n\n  // Revoke access\n  const revokeAccess = async () => {\n    try {\n      // API call to revoke access\n      setShareLink('');\n      setQrCodeUrl('');\n    } catch (error) {\n      Logger.error('Error revoking access:', error);\n    }\n  };\n\n  // Generate secure token\n  const generateSecureToken = () => {\n    return [...Array(32)].map(() => Math.random().toString(36)[2]).join('');\n  };\n\n  // Save share configuration (simulated)\n  const saveShareConfiguration = async (token, settings) => {\n    const config = {\n      token,\n      documentId: document.id,\n      documentType,\n      settings,\n      createdAt: new Date().toISOString(),\n      createdBy: 'current-user-id', // Get from auth context\n    };\n\n    // Save to localStorage for demo (in real app, save to backend)\n    const existingShares = JSON.parse(localStorage.getItem('document-shares') || '[]');\n    existingShares.push(config);\n    localStorage.setItem('document-shares', JSON.stringify(existingShares));\n  };\n\n  // Send share email (simulated)\n  const sendShareEmail = async emailData => {\n    // In real app, call email service\n    Logger.info('Sending share email:', emailData);\n    return Promise.resolve();\n  };\n\n  // Auto-generate link when modal opens and load view stats\n  useEffect(() => {\n    if (isOpen && document) {\n      generateShareLink();\n      // Mock loading view stats\n      setViewStats({\n        views: Math.floor(Math.random() * 50),\n        downloads: Math.floor(Math.random() * 20),\n        lastAccessed: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n      });\n    }\n  }, [isOpen, document, generateShareLink]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>\n      <div className='bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto'>\n        {/* Header */}\n        <div className='flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700'>\n          <div className='flex items-center space-x-3'>\n            <ShareIcon className='h-6 w-6 text-blue-500' />\n            <div>\n              <h3 className='text-lg font-semibold text-gray-900 dark:text-white'>\n                {t('sharing.title')}\n              </h3>\n              <p className='text-sm text-gray-500 dark:text-gray-400'>\n                {document?.title || document?.number}\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className='text-gray-400 hover:text-gray-500 dark:hover:text-gray-300'\n          >\n            <XMarkIcon className='h-6 w-6' />\n          </button>\n        </div>\n\n        <div className='p-6 space-y-6'>\n          {/* Share Settings */}\n          <div className='space-y-4'>\n            <h4 className='text-md font-medium text-gray-900 dark:text-white'>\n              {t('sharing.settingsTitle')}\n            </h4>\n\n            {/* Access Type */}\n            <div className='grid grid-cols-3 gap-3'>\n              <button\n                onClick={() => setShareSettings(prev => ({ ...prev, accessType: 'link' }))}\n                className={`p-3 border rounded-lg text-center transition-colors ${\n                  shareSettings.accessType === 'link'\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300'\n                    : 'border-gray-300 dark:border-gray-600 hover:border-gray-400'\n                }`}\n              >\n                <LinkIcon className='h-5 w-5 mx-auto mb-2' />\n                <span className='text-sm'>{t('sharing.publicLink')}</span>\n              </button>\n              <button\n                onClick={() => setShareSettings(prev => ({ ...prev, accessType: 'password' }))}\n                className={`p-3 border rounded-lg text-center transition-colors ${\n                  shareSettings.accessType === 'password'\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300'\n                    : 'border-gray-300 dark:border-gray-600 hover:border-gray-400'\n                }`}\n              >\n                <LockClosedIcon className='h-5 w-5 mx-auto mb-2' />\n                <span className='text-sm'>{t('sharing.withPassword')}</span>\n              </button>\n              <button\n                onClick={() => setShareSettings(prev => ({ ...prev, accessType: 'email' }))}\n                className={`p-3 border rounded-lg text-center transition-colors ${\n                  shareSettings.accessType === 'email'\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300'\n                    : 'border-gray-300 dark:border-gray-600 hover:border-gray-400'\n                }`}\n              >\n                <UserGroupIcon className='h-5 w-5 mx-auto mb-2' />\n                <span className='text-sm'>{t('sharing.onlyByEmail')}</span>\n              </button>\n            </div>\n\n            {shareSettings.accessType === 'password' && (\n              <input\n                type='password'\n                value={shareSettings.password}\n                onChange={e => setShareSettings(prev => ({ ...prev, password: e.target.value }))}\n                placeholder={t('sharing.passwordDescription')}\n                className='w-full mt-2 p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white'\n              />\n            )}\n            {shareSettings.accessType === 'email' && (\n              <input\n                type='email'\n                value={shareSettings.recipientEmail}\n                onChange={e =>\n                  setShareSettings(prev => ({ ...prev, recipientEmail: e.target.value }))\n                }\n                placeholder={t('sharing.emailDescription')}\n                className='w-full mt-2 p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white'\n              />\n            )}\n\n            {/* Expiration Date */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'>\n                Data di scadenza (opzionale)\n              </label>\n              <input\n                type='datetime-local'\n                value={shareSettings.expiresAt}\n                onChange={e => setShareSettings(prev => ({ ...prev, expiresAt: e.target.value }))}\n                className='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white'\n              />\n            </div>\n          </div>\n\n          {/* Advanced Settings */}\n          <div>\n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className='flex items-center text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300'\n            >\n              Opzioni avanzate\n              <ChevronDownIcon\n                className={`ml-1 h-4 w-4 transition-transform ${showAdvanced ? 'rotate-180' : ''}`}\n              />\n            </button>\n\n            {showAdvanced && (\n              <div className='mt-3 space-y-3 pl-4 border-l-2 border-gray-200 dark:border-gray-700'>\n                <label className='flex items-center'>\n                  <input\n                    type='checkbox'\n                    checked={shareSettings.allowDownload}\n                    onChange={e =>\n                      setShareSettings(prev => ({ ...prev, allowDownload: e.target.checked }))\n                    }\n                    className='rounded border-gray-300 dark:border-gray-600'\n                  />\n                  <span className='ml-2 text-sm text-gray-700 dark:text-gray-300'>\n                    Consenti download\n                  </span>\n                </label>\n                <label className='flex items-center'>\n                  <input\n                    type='checkbox'\n                    checked={shareSettings.allowPrint}\n                    onChange={e =>\n                      setShareSettings(prev => ({ ...prev, allowPrint: e.target.checked }))\n                    }\n                    className='rounded border-gray-300 dark:border-gray-600'\n                  />\n                  <span className='ml-2 text-sm text-gray-700 dark:text-gray-300'>\n                    Consenti stampa\n                  </span>\n                </label>\n                <label className='flex items-center'>\n                  <input\n                    type='checkbox'\n                    checked={shareSettings.trackViews}\n                    onChange={e =>\n                      setShareSettings(prev => ({ ...prev, trackViews: e.target.checked }))\n                    }\n                    className='rounded border-gray-300 dark:border-gray-600'\n                  />\n                  <span className='ml-2 text-sm text-gray-700 dark:text-gray-300'>\n                    Traccia visualizzazioni\n                  </span>\n                </label>\n                <label className='flex items-center'>\n                  <input\n                    type='checkbox'\n                    checked={shareSettings.notifyOnAccess}\n                    onChange={e =>\n                      setShareSettings(prev => ({ ...prev, notifyOnAccess: e.target.checked }))\n                    }\n                    className='rounded border-gray-300 dark:border-gray-600'\n                  />\n                  <span className='ml-2 text-sm text-gray-700 dark:text-gray-300'>\n                    Notifica accessi\n                  </span>\n                </label>\n              </div>\n            )}\n          </div>\n\n          {/* Generate Link Button */}\n          {!shareLink && (\n            <button\n              onClick={generateShareLink}\n              disabled={isGenerating}\n              className='w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-3 px-4 rounded-md transition-colors'\n            >\n              {isGenerating ? 'Generazione...' : 'Genera Link di Condivisione'}\n            </button>\n          )}\n\n          {/* Generated Link */}\n          {shareLink && (\n            <div className='space-y-4'>\n              <div className='p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg'>\n                <div className='flex items-center mb-2'>\n                  <CheckCircleIcon className='h-5 w-5 text-green-500 mr-2' />\n                  <span className='text-sm font-medium text-green-800 dark:text-green-300'>\n                    Link generato con successo!\n                  </span>\n                </div>\n\n                <div className='flex items-center space-x-2 mt-3'>\n                  <input\n                    type='text'\n                    value={shareLink}\n                    readOnly\n                    className='flex-1 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md text-sm'\n                  />\n                  <button\n                    onClick={copyToClipboard}\n                    className='px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors'\n                  >\n                    {copied ? (\n                      <CheckCircleIcon className='h-4 w-4' />\n                    ) : (\n                      <ClipboardDocumentIcon className='h-4 w-4' />\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* QR Code */}\n              {qrCodeUrl && (\n                <div className='flex justify-center'>\n                  <div className='p-4 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600'>\n                    <img src={qrCodeUrl} alt='QR Code' className='w-40 h-40' />\n                    <p className='text-xs text-center text-gray-500 mt-2'>Scansiona per aprire</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className='flex space-x-3'>\n                {shareSettings.accessType === 'email' && shareSettings.recipientEmail && (\n                  <button\n                    onClick={sendViaEmail}\n                    className='flex-1 bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors'\n                  >\n                    Invia via Email\n                  </button>\n                )}\n                <button\n                  onClick={revokeAccess}\n                  className='px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors'\n                >\n                  Revoca Accesso\n                </button>\n              </div>\n\n              {/* View Statistics */}\n              {shareSettings.trackViews && (\n                <div className='p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg'>\n                  <h5 className='text-sm font-medium text-gray-900 dark:text-white mb-3'>\n                    Statistiche di accesso\n                  </h5>\n                  <div className='grid grid-cols-3 gap-4 text-center'>\n                    <div>\n                      <div className='text-lg font-semibold text-gray-900 dark:text-white'>\n                        {viewStats.views}\n                      </div>\n                      <div className='text-xs text-gray-500 dark:text-gray-400'>\n                        Visualizzazioni\n                      </div>\n                    </div>\n                    <div>\n                      <div className='text-lg font-semibold text-gray-900 dark:text-white'>\n                        {viewStats.downloads}\n                      </div>\n                      <div className='text-xs text-gray-500 dark:text-gray-400'>Download</div>\n                    </div>\n                    <div>\n                      <div className='text-lg font-semibold text-gray-900 dark:text-white'>\n                        {viewStats.lastAccessed\n                          ? viewStats.lastAccessed.toLocaleDateString('it-IT')\n                          : 'Mai'}\n                      </div>\n                      <div className='text-xs text-gray-500 dark:text-gray-400'>Ultimo accesso</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Helper component for Chevron Down icon\nconst ChevronDownIcon = ({ className }) => (\n  <svg\n    className={className}\n    fill='none'\n    viewBox='0 0 24 24'\n    strokeWidth={1.5}\n    stroke='currentColor'\n  >\n    <path strokeLinecap='round' strokeLinejoin='round' d='m19.5 8.25-7.5 7.5-7.5-7.5' />\n  </svg>\n);\n\nexport default DocumentSharing;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\documents\\ExportButtons.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\documents\\PDFGenerator.jsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'invoiceData' is not defined.","line":110,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'sampleInvoice' is not defined.","line":247,"column":63,"nodeType":"Identifier","messageId":"undef","endLine":247,"endColumn":76},{"ruleId":"no-undef","severity":2,"message":"'sampleInvoice' is not defined.","line":250,"column":63,"nodeType":"Identifier","messageId":"undef","endLine":250,"endColumn":76},{"ruleId":"no-undef","severity":2,"message":"'sampleInvoice' is not defined.","line":254,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":254,"endColumn":31}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport PDFGenerationService from '@lib/pdfGenerationService';\nimport { useTranslation } from 'react-i18next';\n\nconst PDFGenerator = () => {\n  const { t } = useTranslation('pdf');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedPDF, setGeneratedPDF] = useState(null);\n  const [error, setError] = useState('');\n  const [template, setTemplate] = useState('standard');\n  const [includeQR, setIncludeQR] = useState(true);\n  const [includePaymentSlip, setIncludePaymentSlip] = useState(false);\n  const [watermark, setWatermark] = useState('');\n\n  // Generate sample invoice data for preview purposes only\n  const generateSampleInvoice = () => ({\n    invoice_number: 'FATT-2025-0001',\n    issue_date: '2025-01-19',\n    due_date: '2025-02-18',\n    status: 'issued',\n    subtotal: 1000.0,\n    tax_amount: 220.0,\n    total_amount: 1220.0,\n    withholding_amount: 0,\n    notes: t('invoiceData.notes'),\n    payment_method: t('invoiceData.paymentMethod'),\n    payment_terms: t('invoiceData.paymentTerms'),\n\n    // Client information\n    client: {\n      name: t('invoiceData.clientName'),\n      company_name: t('invoiceData.clientCompanyName'),\n      email: 'mario.rossi@rossiconsulting.it',\n      phone: '+39 02 1234567',\n      address: 'Via Roma, 123',\n      city: 'Milano',\n      postal_code: '20121',\n      vat_number: 'IT12345678901',\n      fiscal_code: 'RSSMRA80A01F205X',\n    },\n\n    // Company information\n    company: {\n      name: t('invoiceData.companyName'),\n      address: 'Via Dante, 456',\n      city: 'Milano',\n      postal_code: '20122',\n      country: 'Italia',\n      vat_number: 'IT98765432109',\n      fiscal_code: 'NXAMNG23A01F205Y',\n      email: 'info@nexamanager.it',\n      phone: '+39 02 9876543',\n      website: 'www.nexamanager.it',\n    },\n\n    // Invoice items\n    items: [\n      {\n        id: 1,\n        description: t('invoiceData.item1Description'),\n        quantity: 20,\n        unit_price: 45.0,\n        iva_rate: 0.22,\n        amount: 900.0,\n      },\n      {\n        id: 2,\n        description: t('invoiceData.item2Description'),\n        quantity: 2,\n        unit_price: 50.0,\n        iva_rate: 0.22,\n        amount: 100.0,\n      },\n    ],\n\n    // Tax details\n    taxBreakdown: {\n      [t('invoiceData.taxRate')]: {\n        rate: 0.22,\n        baseAmount: 1000.0,\n        taxAmount: 220.0,\n      },\n    },\n\n    complianceNotes: [t('invoiceData.complianceNote1'), t('invoiceData.complianceNote2')],\n\n    // Bank details\n    bank_details: {\n      iban: 'IT60 X054 2811 1010 0000 0123 456',\n      bic: 'BPMOIT22XXX',\n      bank_name: 'Banco BPM',\n    },\n  });\n\n  const handleGeneratePDF = async () => {\n    setIsGenerating(true);\n    setError('');\n    setGeneratedPDF(null);\n\n    try {\n      const options = {\n        template,\n        includeQR,\n        includePaymentSlip,\n        language: 'it',\n        watermark: watermark || null,\n      };\n\n      // Use the provided invoice data or generate sample data for preview\n      const invoiceToProcess = invoiceData || generateSampleInvoice();\n      const result = await PDFGenerationService.generateInvoicePDF(invoiceToProcess, options);\n\n      if (result.success) {\n        setGeneratedPDF(result);\n      } else {\n        setError(result.error || t('errorGeneric'));\n      }\n    } catch (err) {\n      setError(err.message || t('errorUnexpected'));\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleDownloadPDF = () => {\n    if (generatedPDF && generatedPDF.pdf) {\n      const link = document.createElement('a');\n      link.href = generatedPDF.pdf.dataUri;\n      link.download = generatedPDF.metadata.fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleViewPDF = () => {\n    if (generatedPDF && generatedPDF.pdf) {\n      const newWindow = window.open();\n      newWindow.document.write(`\n        <iframe \n          src=\"${generatedPDF.pdf.dataUri}\" \n          width=\"100%\" \n          height=\"100%\" \n          style=\"border: none;\">\n        </iframe>\n      `);\n    }\n  };\n\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className='max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg'>\n      <div className='mb-6'>\n        <h2 className='text-2xl font-bold text-gray-900 mb-2'>{t('title')}</h2>\n        <p className='text-gray-600'>{t('subtitle')}</p>\n      </div>\n\n      <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>\n        {/* Configuration Section */}\n        <div className='space-y-6'>\n          <h3 className='text-lg font-semibold text-gray-800'>{t('configTitle')}</h3>\n\n          {/* Template Selection */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('templateLabel')}\n            </label>\n            <select\n              value={template}\n              onChange={e => setTemplate(e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n            >\n              <option value='standard'>{t('templates.standard')}</option>\n              <option value='professional'>{t('templates.professional')}</option>\n              <option value='minimal'>{t('templates.minimal')}</option>\n              <option value='detailed'>{t('templates.detailed')}</option>\n            </select>\n          </div>\n\n          {/* Options */}\n          <div className='space-y-3'>\n            <h4 className='text-sm font-medium text-gray-700'>{t('optionsLabel')}</h4>\n\n            <label className='flex items-center'>\n              <input\n                type='checkbox'\n                checked={includeQR}\n                onChange={e => setIncludeQR(e.target.checked)}\n                className='mr-2'\n              />\n              <span className='text-sm text-gray-700'>{t('includeQR')}</span>\n            </label>\n\n            <label className='flex items-center'>\n              <input\n                type='checkbox'\n                checked={includePaymentSlip}\n                onChange={e => setIncludePaymentSlip(e.target.checked)}\n                className='mr-2'\n              />\n              <span className='text-sm text-gray-700'>{t('includePaymentSlip')}</span>\n            </label>\n          </div>\n\n          {/* Watermark */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('watermarkLabel')}\n            </label>\n            <input\n              type='text'\n              value={watermark}\n              onChange={e => setWatermark(e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              placeholder={t('watermarkPlaceholder')}\n            />\n          </div>\n\n          {/* Generate Button */}\n          <button\n            onClick={handleGeneratePDF}\n            disabled={isGenerating}\n            className='w-full px-4 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors'\n          >\n            {isGenerating ? (\n              <div className='flex items-center justify-center'>\n                <div className='animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2'></div>\n                {t('generatingButton')}\n              </div>\n            ) : (\n              t('generateButton')\n            )}\n          </button>\n\n          {/* Sample Invoice Preview */}\n          <div className='mt-6 p-4 bg-gray-50 rounded-md'>\n            <h4 className='text-sm font-medium text-gray-800 mb-3'>{t('sampleInvoiceTitle')}</h4>\n            <div className='text-sm text-gray-600 space-y-1'>\n              <p>\n                <strong>{t('sampleInvoiceNumber')}:</strong> {sampleInvoice.invoice_number}\n              </p>\n              <p>\n                <strong>{t('sampleInvoiceClient')}:</strong> {sampleInvoice.client.company_name}\n              </p>\n              <p>\n                <strong>{t('sampleInvoiceAmount')}:</strong> Ôé¼\n                {sampleInvoice.total_amount.toFixed(2)}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Result Section */}\n        <div className='space-y-6'>\n          <h3 className='text-lg font-semibold text-gray-800'>{t('resultTitle')}</h3>\n\n          {error && (\n            <div className='p-4 bg-red-100 text-red-700 rounded-md'>\n              <p>{error}</p>\n            </div>\n          )}\n\n          {generatedPDF && (\n            <div className='space-y-4 p-4 border rounded-md'>\n              <div className='flex justify-between items-center'>\n                <p className='font-medium text-green-600'>PDF generato con successo!</p>\n                <div className='flex gap-2'>\n                  <button\n                    onClick={handleDownloadPDF}\n                    className='px-3 py-1 bg-green-500 text-white rounded-md text-sm hover:bg-green-600'\n                  >\n                    {t('downloadButton')}\n                  </button>\n                  <button\n                    onClick={handleViewPDF}\n                    className='px-3 py-1 bg-gray-200 text-gray-700 rounded-md text-sm hover:bg-gray-300'\n                  >\n                    {t('viewButton')}\n                  </button>\n                </div>\n              </div>\n\n              <div className='text-sm text-gray-600 space-y-1'>\n                <p>\n                  <strong>{t('pdfDetails.fileName')}:</strong> {generatedPDF.metadata.fileName}\n                </p>\n                <p>\n                  <strong>{t('pdfDetails.size')}:</strong>{' '}\n                  {formatFileSize(generatedPDF.metadata.size)}\n                </p>\n                <p>\n                  <strong>{t('pdfDetails.pages')}:</strong> {generatedPDF.metadata.pages}\n                </p>\n                <p>\n                  <strong>{t('pdfDetails.templateUsed')}:</strong> {generatedPDF.metadata.template}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PDFGenerator;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\documents\\ReceiptUpload.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSignedIn' is assigned a value but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { Fragment } from 'react';\nimport {\n  CloudArrowUpIcon,\n  XMarkIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  PhotoIcon,\n  DocumentIcon,\n  EyeIcon,\n  TrashIcon,\n  PlusIcon,\n} from '@heroicons/react/24/outline';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { uploadReceipt, validateFile } from '@lib/storageService';\nimport { notify } from '@lib/uiUtils';\nimport Logger from '@utils/Logger';\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport default function ReceiptUpload({\n  isOpen,\n  onClose,\n  onUploadComplete,\n  maxFiles = 5,\n  allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'],\n  maxFileSize = 10485760, // 10MB\n  title = 'Carica Ricevute',\n  description = 'Carica le tue ricevute per tenere traccia delle spese',\n}) {\n  const { isSignedIn } = useAuth();\n  const { user } = useUser();\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [uploadResults, setUploadResults] = useState(null);\n  const [dragOver, setDragOver] = useState(false);\n  const [previewFile, setPreviewFile] = useState(null);\n  const fileInputRef = useRef(null);\n\n  // Reset component state\n  const resetComponent = useCallback(() => {\n    setFiles([]);\n    setUploading(false);\n    setUploadResults(null);\n    setDragOver(false);\n    setPreviewFile(null);\n  }, []);\n\n  // Handle file selection\n  const handleFileSelect = useCallback(\n    newFiles => {\n      const validFiles = [];\n      const errors = [];\n\n      Array.from(newFiles).forEach(file => {\n        // Check if we've reached max files limit\n        if (files.length + validFiles.length >= maxFiles) {\n          errors.push(`Massimo ${maxFiles} file consentiti`);\n          return;\n        }\n\n        // Validate file\n        const validation = validateFile(file, allowedTypes, maxFileSize);\n        if (!validation.isValid) {\n          errors.push(`${file.name}: ${validation.errors.join(', ')}`);\n          return;\n        }\n\n        // Check for duplicates\n        const isDuplicate = files.some(f => f.name === file.name && f.size === file.size);\n        if (isDuplicate) {\n          errors.push(`${file.name}: File gi├á selezionato`);\n          return;\n        }\n\n        // Create file object with preview\n        const fileObj = {\n          file,\n          id: Date.now() + Math.random(),\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          preview: null,\n        };\n\n        // Generate preview for images\n        if (file.type.startsWith('image/')) {\n          const reader = new FileReader();\n          reader.onload = e => {\n            fileObj.preview = e.target.result;\n            setFiles(prev => prev.map(f => (f.id === fileObj.id ? fileObj : f)));\n          };\n          reader.readAsDataURL(file);\n        }\n\n        validFiles.push(fileObj);\n      });\n\n      if (validFiles.length > 0) {\n        setFiles(prev => [...prev, ...validFiles]);\n      }\n\n      if (errors.length > 0) {\n        notify.error(errors.join('\\n'));\n      }\n    },\n    [files, maxFiles, allowedTypes, maxFileSize],\n  );\n\n  // Handle file input change\n  const handleFileChange = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      handleFileSelect(e.target.files);\n    }\n  };\n\n  // Handle drag and drop\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragOver(false);\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragOver(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      handleFileSelect(e.dataTransfer.files);\n    }\n  };\n\n  // Remove file from list\n  const removeFile = fileId => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n\n  // Preview file\n  const previewFileHandler = fileObj => {\n    setPreviewFile(fileObj);\n  };\n\n  // Upload files\n  const handleUpload = async () => {\n    if (files.length === 0) {\n      notify.error('Seleziona almeno un file da caricare');\n      return;\n    }\n\n    setUploading(true);\n    setUploadResults(null);\n\n    const results = {\n      successful: [],\n      failed: [],\n      errors: [],\n    };\n\n    try {\n      for (const fileObj of files) {\n        try {\n          const result = await uploadReceipt(user.id, fileObj.file);\n\n          if (result.success) {\n            results.successful.push({\n              name: fileObj.name,\n              url: result.url,\n              path: result.path,\n            });\n          } else {\n            results.failed.push(fileObj.name);\n            results.errors.push(`${fileObj.name}: ${result.error}`);\n          }\n        } catch (error) {\n          results.failed.push(fileObj.name);\n          results.errors.push(`${fileObj.name}: ${error.message}`);\n        }\n      }\n\n      setUploadResults(results);\n\n      if (results.successful.length > 0) {\n        notify.success(`${results.successful.length} ricevute caricate con successo`);\n\n        // Call completion callback with results\n        if (onUploadComplete) {\n          onUploadComplete(results.successful);\n        }\n      }\n\n      if (results.failed.length > 0) {\n        notify.error(`${results.failed.length} file non sono stati caricati`);\n      }\n    } catch (error) {\n      Logger.error('Upload error:', error);\n      notify.error('Errore durante il caricamento');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Format file size\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Get file icon\n  const getFileIcon = type => {\n    if (type.startsWith('image/')) {\n      return PhotoIcon;\n    }\n    return DocumentIcon;\n  };\n\n  return (\n    <>\n      <Transition appear show={isOpen} as={Fragment}>\n        <Dialog as='div' className='relative z-50' onClose={onClose}>\n          <Transition.Child\n            as={Fragment}\n            enter='ease-out duration-300'\n            enterFrom='opacity-0'\n            enterTo='opacity-100'\n            leave='ease-in duration-200'\n            leaveFrom='opacity-100'\n            leaveTo='opacity-0'\n          >\n            <div className='fixed inset-0 bg-black bg-opacity-25' />\n          </Transition.Child>\n\n          <div className='fixed inset-0 overflow-y-auto'>\n            <div className='flex min-h-full items-center justify-center p-4 text-center'>\n              <Transition.Child\n                as={Fragment}\n                enter='ease-out duration-300'\n                enterFrom='opacity-0 scale-95'\n                enterTo='opacity-100 scale-100'\n                leave='ease-in duration-200'\n                leaveFrom='opacity-100 scale-100'\n                leaveTo='opacity-0 scale-95'\n              >\n                <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all'>\n                  <Dialog.Title\n                    as='h3'\n                    className='text-lg font-medium leading-6 text-gray-900 dark:text-gray-100 mb-4'\n                  >\n                    {title}\n                  </Dialog.Title>\n\n                  <div className='space-y-6'>\n                    {/* Description */}\n                    <p className='text-sm text-gray-500 dark:text-gray-400'>{description}</p>\n\n                    {/* File upload area */}\n                    <div\n                      className={classNames(\n                        'border-2 border-dashed rounded-lg p-8 text-center transition-colors',\n                        dragOver\n                          ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'\n                          : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500',\n                      )}\n                      onDragOver={handleDragOver}\n                      onDragLeave={handleDragLeave}\n                      onDrop={handleDrop}\n                    >\n                      <CloudArrowUpIcon className='mx-auto h-16 w-16 text-gray-400' />\n                      <div className='mt-4'>\n                        <label htmlFor='receipt-upload' className='cursor-pointer'>\n                          <span className='mt-2 block text-lg font-medium text-gray-900 dark:text-gray-100'>\n                            Trascina i file qui o{' '}\n                            <span className='text-primary-600 dark:text-primary-400'>\n                              seleziona file\n                            </span>\n                          </span>\n                        </label>\n                        <input\n                          ref={fileInputRef}\n                          id='receipt-upload'\n                          name='receipt-upload'\n                          type='file'\n                          className='sr-only'\n                          accept={allowedTypes.join(',')}\n                          multiple\n                          onChange={handleFileChange}\n                        />\n                        <p className='mt-2 text-sm text-gray-500 dark:text-gray-400'>\n                          JPG, PNG, GIF, PDF fino a {Math.round(maxFileSize / 1024 / 1024)}MB\n                        </p>\n                        <p className='mt-1 text-xs text-gray-400 dark:text-gray-500'>\n                          Massimo {maxFiles} file per volta\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Selected files */}\n                    {files.length > 0 && (\n                      <div className='space-y-4'>\n                        <h4 className='text-sm font-medium text-gray-900 dark:text-gray-100'>\n                          File selezionati ({files.length}/{maxFiles})\n                        </h4>\n                        <div className='grid grid-cols-1 gap-3 max-h-64 overflow-y-auto'>\n                          {files.map(fileObj => {\n                            const IconComponent = getFileIcon(fileObj.type);\n                            return (\n                              <div\n                                key={fileObj.id}\n                                className='bg-gray-50 dark:bg-gray-700 rounded-lg p-4'\n                              >\n                                <div className='flex items-center justify-between'>\n                                  <div className='flex items-center flex-1 min-w-0'>\n                                    {fileObj.preview ? (\n                                      <img\n                                        src={fileObj.preview}\n                                        alt={fileObj.name}\n                                        className='h-12 w-12 rounded object-cover flex-shrink-0'\n                                      />\n                                    ) : (\n                                      <IconComponent className='h-12 w-12 text-gray-400 flex-shrink-0' />\n                                    )}\n                                    <div className='ml-3 flex-1 min-w-0'>\n                                      <p className='text-sm font-medium text-gray-900 dark:text-gray-100 truncate'>\n                                        {fileObj.name}\n                                      </p>\n                                      <p className='text-xs text-gray-500 dark:text-gray-400'>\n                                        {formatFileSize(fileObj.size)}\n                                      </p>\n                                    </div>\n                                  </div>\n                                  <div className='flex items-center space-x-2 ml-4'>\n                                    {fileObj.preview && (\n                                      <button\n                                        type='button'\n                                        onClick={() => previewFileHandler(fileObj)}\n                                        className='text-gray-400 hover:text-gray-500 dark:hover:text-gray-300'\n                                        title='Anteprima'\n                                      >\n                                        <EyeIcon className='h-5 w-5' />\n                                      </button>\n                                    )}\n                                    <button\n                                      type='button'\n                                      onClick={() => removeFile(fileObj.id)}\n                                      className='text-gray-400 hover:text-red-500 dark:hover:text-red-400'\n                                      title='Rimuovi'\n                                    >\n                                      <TrashIcon className='h-5 w-5' />\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Upload results */}\n                    {uploadResults && (\n                      <div className='space-y-4'>\n                        {uploadResults.successful.length > 0 && (\n                          <div className='bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4'>\n                            <div className='flex'>\n                              <CheckCircleIcon className='h-5 w-5 text-green-400' />\n                              <div className='ml-3'>\n                                <h3 className='text-sm font-medium text-green-800 dark:text-green-400'>\n                                  Caricamento completato\n                                </h3>\n                                <div className='mt-2 text-sm text-green-700 dark:text-green-300'>\n                                  <p>\n                                    {uploadResults.successful.length} ricevute caricate con successo\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n\n                        {uploadResults.failed.length > 0 && (\n                          <div className='bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4'>\n                            <div className='flex'>\n                              <ExclamationTriangleIcon className='h-5 w-5 text-red-400' />\n                              <div className='ml-3'>\n                                <h3 className='text-sm font-medium text-red-800 dark:text-red-400'>\n                                  Errori durante il caricamento\n                                </h3>\n                                <div className='mt-2 text-sm text-red-700 dark:text-red-300'>\n                                  <ul className='list-disc list-inside space-y-1'>\n                                    {uploadResults.errors.slice(0, 5).map((error, index) => (\n                                      <li key={index} className='text-xs'>\n                                        {error}\n                                      </li>\n                                    ))}\n                                    {uploadResults.errors.length > 5 && (\n                                      <li className='text-xs font-medium'>\n                                        ... e altri {uploadResults.errors.length - 5} errori\n                                      </li>\n                                    )}\n                                  </ul>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Action buttons */}\n                    <div className='flex justify-between items-center pt-4 border-t border-gray-200 dark:border-gray-600'>\n                      <button\n                        type='button'\n                        onClick={() => fileInputRef.current?.click()}\n                        className='inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500'\n                      >\n                        <PlusIcon className='h-4 w-4 mr-2' />\n                        Aggiungi Altri File\n                      </button>\n\n                      <div className='flex space-x-3'>\n                        <button\n                          type='button'\n                          onClick={() => {\n                            resetComponent();\n                            onClose();\n                          }}\n                          className='inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500'\n                        >\n                          Annulla\n                        </button>\n                        <button\n                          type='button'\n                          onClick={handleUpload}\n                          disabled={files.length === 0 || uploading}\n                          className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed'\n                        >\n                          {uploading ? (\n                            <>\n                              <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2'></div>\n                              Caricando...\n                            </>\n                          ) : (\n                            <>\n                              <CloudArrowUpIcon className='h-4 w-4 mr-2' />\n                              Carica Ricevute ({files.length})\n                            </>\n                          )}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </Dialog>\n      </Transition>\n\n      {/* File Preview Modal */}\n      {previewFile && (\n        <Transition appear show={!!previewFile} as={Fragment}>\n          <Dialog as='div' className='relative z-50' onClose={() => setPreviewFile(null)}>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0'\n              enterTo='opacity-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100'\n              leaveTo='opacity-0'\n            >\n              <div className='fixed inset-0 bg-black bg-opacity-75' />\n            </Transition.Child>\n\n            <div className='fixed inset-0 overflow-y-auto'>\n              <div className='flex min-h-full items-center justify-center p-4 text-center'>\n                <Transition.Child\n                  as={Fragment}\n                  enter='ease-out duration-300'\n                  enterFrom='opacity-0 scale-95'\n                  enterTo='opacity-100 scale-100'\n                  leave='ease-in duration-200'\n                  leaveFrom='opacity-100 scale-100'\n                  leaveTo='opacity-0 scale-95'\n                >\n                  <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all'>\n                    <div className='flex justify-between items-center mb-4'>\n                      <Dialog.Title\n                        as='h3'\n                        className='text-lg font-medium leading-6 text-gray-900 dark:text-gray-100'\n                      >\n                        Anteprima: {previewFile.name}\n                      </Dialog.Title>\n                      <button\n                        type='button'\n                        onClick={() => setPreviewFile(null)}\n                        className='text-gray-400 hover:text-gray-500 dark:hover:text-gray-300'\n                      >\n                        <XMarkIcon className='h-6 w-6' />\n                      </button>\n                    </div>\n\n                    <div className='flex justify-center'>\n                      {previewFile.preview ? (\n                        <img\n                          src={previewFile.preview}\n                          alt={previewFile.name}\n                          className='max-w-full max-h-96 object-contain rounded-lg'\n                        />\n                      ) : (\n                        <div className='flex items-center justify-center h-96 bg-gray-100 dark:bg-gray-700 rounded-lg'>\n                          <div className='text-center'>\n                            <DocumentIcon className='mx-auto h-16 w-16 text-gray-400' />\n                            <p className='mt-2 text-sm text-gray-500 dark:text-gray-400'>\n                              Anteprima non disponibile\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className='mt-4 text-sm text-gray-500 dark:text-gray-400'>\n                      <p>Dimensione: {formatFileSize(previewFile.size)}</p>\n                      <p>Tipo: {previewFile.type}</p>\n                    </div>\n                  </Dialog.Panel>\n                </Transition.Child>\n              </div>\n            </div>\n          </Dialog>\n        </Transition>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\documents\\ReceiptUploadDemo.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailAttachmentManager.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaperClipIcon' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxFiles' is assigned a value but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFiles'. Either include it or remove the dependency array.","line":49,"column":5,"nodeType":"ArrayExpression","endLine":49,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [disabled, handleFiles]","fix":{"range":[1210,1233],"text":"[disabled, handleFiles]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFiles'. Either include it or remove the dependency array.","line":62,"column":5,"nodeType":"ArrayExpression","endLine":62,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [disabled, handleFiles]","fix":{"range":[1508,1531],"text":"[disabled, handleFiles]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef } from 'react';\nimport {\n  PaperClipIcon,\n  XMarkIcon,\n  DocumentIcon,\n  PhotoIcon,\n  ArchiveBoxIcon,\n  ExclamationTriangleIcon,\n  CloudArrowUpIcon,\n  EyeIcon,\n  TrashIcon,\n} from '@heroicons/react/24/outline';\nimport emailAttachmentService from '@lib/emailAttachmentService';\n\nconst EmailAttachmentManager = ({\n  attachments = [],\n  onAttachmentsChange,\n  maxFiles = 10,\n  disabled = false,\n}) => {\n  const [dragActive, setDragActive] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const fileInputRef = useRef(null);\n\n  const config = emailAttachmentService.getConfig();\n\n  const handleDrag = useCallback(e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback(\n    async e => {\n      e.preventDefault();\n      e.stopPropagation();\n      setDragActive(false);\n\n      if (disabled) return;\n\n      const files = Array.from(e.dataTransfer.files);\n      await handleFiles(files);\n    },\n    [disabled, attachments],\n  );\n\n  const handleFileInput = useCallback(\n    async e => {\n      if (disabled) return;\n\n      const files = Array.from(e.target.files);\n      await handleFiles(files);\n\n      // Reset input value to allow re-selecting the same file\n      e.target.value = '';\n    },\n    [disabled, attachments],\n  );\n\n  const handleFiles = async files => {\n    if (files.length === 0) return;\n\n    setUploading(true);\n    setErrors([]);\n\n    try {\n      const result = await emailAttachmentService.uploadAttachments(files, attachments);\n\n      if (result.success) {\n        const newAttachments = [...attachments, ...result.data];\n        onAttachmentsChange(newAttachments);\n\n        if (result.errors && result.errors.length > 0) {\n          setErrors(result.errors);\n        }\n      } else {\n        setErrors([result.error]);\n      }\n    } catch (error) {\n      setErrors([error.message]);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeAttachment = attachmentId => {\n    const updatedAttachments = attachments.filter(att => att.id !== attachmentId);\n    onAttachmentsChange(updatedAttachments);\n\n    // Also delete from service\n    emailAttachmentService.deleteAttachment(attachmentId);\n  };\n\n  const getFileIcon = type => {\n    if (type.startsWith('image/')) {\n      return <PhotoIcon className='h-6 w-6 text-blue-500' />;\n    }\n    if (type.includes('zip') || type.includes('rar') || type.includes('7z')) {\n      return <ArchiveBoxIcon className='h-6 w-6 text-yellow-500' />;\n    }\n    return <DocumentIcon className='h-6 w-6 text-gray-500' />;\n  };\n\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const totalSize = attachments.reduce((sum, att) => sum + att.size, 0);\n  const isNearLimit = totalSize > config.maxTotalSize * 0.8;\n\n  return (\n    <div className='space-y-4'>\n      {/* Upload Area */}\n      <div\n        className={`\n          border-2 border-dashed rounded-lg p-6 text-center transition-colors\n          ${dragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}\n          ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:border-gray-400'}\n          ${isNearLimit ? 'border-orange-300 bg-orange-50' : ''}\n        `}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={() => !disabled && fileInputRef.current?.click()}\n      >\n        <input\n          ref={fileInputRef}\n          type='file'\n          multiple\n          className='hidden'\n          onChange={handleFileInput}\n          accept={config.allowedTypes.join(',')}\n          disabled={disabled}\n        />\n\n        <div className='flex flex-col items-center'>\n          {uploading ? (\n            <>\n              <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-3'></div>\n              <p className='text-gray-600'>Uploading files...</p>\n            </>\n          ) : (\n            <>\n              <CloudArrowUpIcon\n                className={`h-12 w-12 mb-3 ${dragActive ? 'text-blue-500' : 'text-gray-400'}`}\n              />\n              <p className='text-lg font-medium text-gray-700 mb-2'>\n                Drop files here or click to upload\n              </p>\n              <p className='text-sm text-gray-500'>\n                Maximum {config.maxFiles} files, {config.maxFileSizeFormatted} per file,{' '}\n                {config.maxTotalSizeFormatted} total\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* File Size Warning */}\n      {isNearLimit && (\n        <div className='flex items-center p-3 bg-orange-50 border border-orange-200 rounded-lg'>\n          <ExclamationTriangleIcon className='h-5 w-5 text-orange-600 mr-2' />\n          <div className='text-sm text-orange-800'>\n            Approaching size limit: {formatFileSize(totalSize)} / {config.maxTotalSizeFormatted}\n          </div>\n        </div>\n      )}\n\n      {/* Errors */}\n      {errors.length > 0 && (\n        <div className='bg-red-50 border border-red-200 rounded-lg p-4'>\n          <div className='flex items-start'>\n            <ExclamationTriangleIcon className='h-5 w-5 text-red-600 mr-2 mt-0.5' />\n            <div className='flex-1'>\n              <h4 className='text-sm font-medium text-red-800 mb-1'>Upload Errors:</h4>\n              <ul className='text-sm text-red-700 space-y-1'>\n                {errors.map((error, index) => (\n                  <li key={index}>ÔÇó {error}</li>\n                ))}\n              </ul>\n            </div>\n            <button onClick={() => setErrors([])} className='text-red-600 hover:text-red-800'>\n              <XMarkIcon className='h-4 w-4' />\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Attachment List */}\n      {attachments.length > 0 && (\n        <div className='space-y-3'>\n          <div className='flex items-center justify-between'>\n            <h4 className='font-medium text-gray-900'>\n              Attachments ({attachments.length}/{config.maxFiles})\n            </h4>\n            <div className='text-sm text-gray-500'>Total: {formatFileSize(totalSize)}</div>\n          </div>\n\n          <div className='space-y-2'>\n            {attachments.map(attachment => (\n              <div\n                key={attachment.id}\n                className='flex items-center justify-between p-3 bg-gray-50 rounded-lg border'\n              >\n                <div className='flex items-center flex-1 min-w-0'>\n                  {getFileIcon(attachment.type)}\n                  <div className='ml-3 flex-1 min-w-0'>\n                    <div className='text-sm font-medium text-gray-900 truncate'>\n                      {attachment.name}\n                    </div>\n                    <div className='text-xs text-gray-500'>\n                      {formatFileSize(attachment.size)} ÔÇó {attachment.type}\n                    </div>\n                  </div>\n                </div>\n\n                <div className='flex items-center space-x-2 ml-3'>\n                  <button\n                    onClick={() => {\n                      // In a real app, this would open a preview modal\n                      alert(`Preview functionality would show ${attachment.name}`);\n                    }}\n                    className='p-1 text-gray-400 hover:text-gray-600'\n                    title='Preview'\n                  >\n                    <EyeIcon className='h-4 w-4' />\n                  </button>\n\n                  <button\n                    onClick={() => removeAttachment(attachment.id)}\n                    className='p-1 text-red-400 hover:text-red-600'\n                    title='Remove'\n                    disabled={disabled}\n                  >\n                    <TrashIcon className='h-4 w-4' />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* File Type Information */}\n      <details className='text-xs text-gray-500'>\n        <summary className='cursor-pointer hover:text-gray-700'>Allowed file types</summary>\n        <div className='mt-2 pl-4'>\n          <div className='grid grid-cols-2 gap-2'>\n            <div>\n              <strong>Documents:</strong>\n              <br />\n              PDF, Word, Excel, PowerPoint, Text\n            </div>\n            <div>\n              <strong>Images:</strong>\n              <br />\n              JPEG, PNG, GIF, WebP, SVG\n            </div>\n            <div>\n              <strong>Archives:</strong>\n              <br />\n              ZIP, RAR, 7Z\n            </div>\n            <div>\n              <strong>Blocked:</strong>\n              <br />\n              Executable files (.exe, .bat, etc.)\n            </div>\n          </div>\n        </div>\n      </details>\n    </div>\n  );\n};\n\nexport default EmailAttachmentManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailCampaignManager.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":26,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setClientFilters' is assigned a value but never used.","line":52,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'template' is defined but never used.","line":297,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  EnvelopeIcon,\n  PlusIcon,\n  PaperAirplaneIcon,\n  ChartBarIcon,\n  UserGroupIcon,\n  CalendarIcon,\n  PlayIcon,\n  PauseIcon,\n  EyeIcon,\n  TrashIcon,\n  DocumentTextIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ArrowUpTrayIcon,\n} from '@heroicons/react/24/outline';\nimport emailCampaignService from '@lib/emailCampaignService';\nimport emailTemplateService from '@lib/emailTemplateService';\nimport EmailTemplateEditor from './EmailTemplateEditor';\nimport EmailQueueManager from './EmailQueueManager';\nimport { useTranslation } from 'react-i18next';\n\nconst EmailCampaignManager = () => {\n  const { t } = useTranslation('email');\n  const [activeTab, setActiveTab] = useState('campaigns');\n  const [campaigns, setCampaigns] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateCampaign, setShowCreateCampaign] = useState(false);\n  const [showTemplateEditor, setShowTemplateEditor] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [selectedCampaign, setSelectedCampaign] = useState(null);\n  const [campaignDetails, setCampaignDetails] = useState(null);\n\n  // Campaign form state\n  const [campaignForm, setCampaignForm] = useState({\n    name: '',\n    description: '',\n    templateId: '',\n    subject: '',\n    recipients: [],\n    variables: {},\n    trackOpens: true,\n    trackClicks: true,\n    scheduledAt: null,\n  });\n\n  const [recipientSource, setRecipientSource] = useState('manual'); // manual, clients, csv\n  const [csvFile, setCsvFile] = useState(null);\n  const [clientFilters, setClientFilters] = useState({});\n\n  useEffect(() => {\n    loadCampaigns();\n    loadTemplates();\n  }, []);\n\n  const loadCampaigns = async () => {\n    setLoading(true);\n    try {\n      const result = await emailCampaignService.getCampaigns();\n      if (result.success) {\n        setCampaigns(result.data);\n      }\n    } catch (error) {\n      console.error('Error loading campaigns:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadTemplates = async () => {\n    try {\n      const result = await emailTemplateService.getTemplates();\n      if (result.success) {\n        setTemplates(result.data);\n      }\n    } catch (error) {\n      console.error('Error loading templates:', error);\n    }\n  };\n\n  const handleCreateCampaign = async () => {\n    if (!campaignForm.name || !campaignForm.templateId || campaignForm.recipients.length === 0) {\n      alert('Please fill in all required fields and add recipients');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await emailCampaignService.createCampaign(campaignForm);\n      if (result.success) {\n        setShowCreateCampaign(false);\n        resetCampaignForm();\n        loadCampaigns();\n        alert('Campaign created successfully!');\n      } else {\n        alert(`Error creating campaign: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error creating campaign: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSendCampaign = async (campaignId, scheduled = false, scheduledTime = null) => {\n    const message = scheduled\n      ? `Schedule this campaign for ${scheduledTime}?`\n      : 'Send this campaign now?';\n\n    if (!confirm(message)) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const options = {\n        scheduled,\n        scheduledAt: scheduled ? scheduledTime : null,\n      };\n\n      const result = await emailCampaignService.sendCampaign(campaignId, options);\n      if (result.success) {\n        loadCampaigns();\n        alert(result.message);\n      } else {\n        alert(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteCampaign = async campaignId => {\n    if (!confirm('Are you sure you want to delete this campaign?')) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await emailCampaignService.deleteCampaign(campaignId);\n      if (result.success) {\n        loadCampaigns();\n        alert('Campaign deleted successfully');\n      } else {\n        alert(`Error deleting campaign: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error deleting campaign: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLoadClientsAsRecipients = async () => {\n    setLoading(true);\n    try {\n      const result = await emailCampaignService.getClientsAsRecipients(clientFilters);\n      if (result.success) {\n        setCampaignForm(prev => ({\n          ...prev,\n          recipients: result.data,\n        }));\n        alert(`Loaded ${result.data.length} clients as recipients`);\n      } else {\n        alert(`Error loading clients: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error loading clients: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleImportCSV = async () => {\n    if (!csvFile) {\n      alert('Please select a CSV file');\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = async e => {\n      try {\n        const csvContent = e.target.result;\n        const result = await emailCampaignService.importRecipientsFromCSV(csvContent);\n\n        if (result.success) {\n          setCampaignForm(prev => ({\n            ...prev,\n            recipients: result.data,\n          }));\n\n          let message = `Imported ${result.data.length} recipients`;\n          if (result.errors) {\n            message += `\\n\\nWarnings:\\n${result.errors.join('\\n')}`;\n          }\n          alert(message);\n        } else {\n          alert(`Error importing CSV: ${result.error}`);\n        }\n      } catch (error) {\n        alert(`Error reading CSV: ${error.message}`);\n      }\n    };\n    reader.readAsText(csvFile);\n  };\n\n  const handleViewCampaignDetails = async campaignId => {\n    setLoading(true);\n    try {\n      const result = await emailCampaignService.getCampaignDetails(campaignId);\n      if (result.success) {\n        setSelectedCampaign(campaignId);\n        setCampaignDetails(result.data);\n      }\n    } catch (error) {\n      console.error('Error loading campaign details:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetCampaignForm = () => {\n    setCampaignForm({\n      name: '',\n      description: '',\n      templateId: '',\n      subject: '',\n      recipients: [],\n      variables: {},\n      trackOpens: true,\n      trackClicks: true,\n      scheduledAt: null,\n    });\n    setRecipientSource('manual');\n    setCsvFile(null);\n  };\n\n  const addManualRecipient = () => {\n    const email = prompt('Enter email address:');\n    if (email && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      const name = prompt('Enter name (optional):') || email;\n      setCampaignForm(prev => ({\n        ...prev,\n        recipients: [...prev.recipients, { email, name, variables: {} }],\n      }));\n    } else if (email) {\n      alert('Invalid email address');\n    }\n  };\n\n  const removeRecipient = index => {\n    setCampaignForm(prev => ({\n      ...prev,\n      recipients: prev.recipients.filter((_, i) => i !== index),\n    }));\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'sent':\n        return <CheckCircleIcon className='h-5 w-5 text-green-500' />;\n      case 'sending':\n        return <ClockIcon className='h-5 w-5 text-blue-500 animate-pulse' />;\n      case 'scheduled':\n        return <CalendarIcon className='h-5 w-5 text-orange-500' />;\n      case 'failed':\n        return <ExclamationTriangleIcon className='h-5 w-5 text-red-500' />;\n      default:\n        return <DocumentTextIcon className='h-5 w-5 text-gray-500' />;\n    }\n  };\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'sent':\n        return 'bg-green-100 text-green-800';\n      case 'sending':\n        return 'bg-blue-100 text-blue-800';\n      case 'scheduled':\n        return 'bg-orange-100 text-orange-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (showTemplateEditor) {\n    return (\n      <EmailTemplateEditor\n        template={selectedTemplate}\n        onSave={template => {\n          setShowTemplateEditor(false);\n          setSelectedTemplate(null);\n          loadTemplates();\n        }}\n        onCancel={() => {\n          setShowTemplateEditor(false);\n          setSelectedTemplate(null);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className='space-y-6 p-6'>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h1 className='text-2xl font-bold flex items-center'>\n            <EnvelopeIcon className='h-6 w-6 mr-2' />\n            Email Campaigns\n          </h1>\n          <p className='text-gray-600'>Manage bulk email campaigns and templates</p>\n        </div>\n        <div className='flex space-x-3'>\n          <button\n            onClick={() => {\n              setSelectedTemplate(null);\n              setShowTemplateEditor(true);\n            }}\n            className='px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center'\n          >\n            <DocumentTextIcon className='h-4 w-4 mr-2' />\n            New Template\n          </button>\n          <button\n            onClick={() => setShowCreateCampaign(true)}\n            className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center'\n          >\n            <PlusIcon className='h-4 w-4 mr-2' />\n            New Campaign\n          </button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className='bg-white rounded-lg shadow'>\n        <div className='border-b border-gray-200'>\n          <nav className='flex space-x-8 px-6'>\n            {[\n              { id: 'campaigns', name: 'Campaigns', icon: EnvelopeIcon },\n              { id: 'queue', name: 'Queue Manager', icon: ClockIcon },\n              { id: 'templates', name: 'Templates', icon: DocumentTextIcon },\n              { id: 'analytics', name: 'Analytics', icon: ChartBarIcon },\n            ].map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className='h-5 w-5 mr-2' />\n                {tab.name}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className='p-6'>\n          {/* Campaigns Tab */}\n          {activeTab === 'campaigns' && (\n            <div className='space-y-6'>\n              {/* Queue Summary */}\n              {campaigns.filter(c => c.status === 'scheduled').length > 0 && (\n                <div className='bg-orange-50 border border-orange-200 rounded-lg p-4'>\n                  <div className='flex items-center justify-between'>\n                    <div className='flex items-center'>\n                      <ClockIcon className='h-5 w-5 text-orange-600 mr-2' />\n                      <h3 className='font-medium text-orange-800'>Campaign Queue</h3>\n                    </div>\n                    <span className='text-sm text-orange-600'>\n                      {campaigns.filter(c => c.status === 'scheduled').length} campaigns scheduled\n                    </span>\n                  </div>\n                  <div className='mt-2 space-y-1'>\n                    {campaigns\n                      .filter(c => c.status === 'scheduled')\n                      .slice(0, 3)\n                      .map(campaign => (\n                        <div key={campaign.id} className='text-sm text-orange-700'>\n                          ÔÇó {campaign.name} -{' '}\n                          {campaign.scheduled_at\n                            ? new Date(campaign.scheduled_at).toLocaleString()\n                            : 'Time not set'}\n                        </div>\n                      ))}\n                    {campaigns.filter(c => c.status === 'scheduled').length > 3 && (\n                      <div className='text-sm text-orange-600'>\n                        ...and {campaigns.filter(c => c.status === 'scheduled').length - 3} more\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {loading ? (\n                <div className='text-center py-8'>\n                  <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto'></div>\n                  <p className='mt-2 text-gray-600'>Loading campaigns...</p>\n                </div>\n              ) : campaigns.length === 0 ? (\n                <div className='text-center py-8'>\n                  <EnvelopeIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n                  <h3 className='text-lg font-medium text-gray-900 mb-2'>No campaigns yet</h3>\n                  <p className='text-gray-600 mb-4'>\n                    Create your first email campaign to get started\n                  </p>\n                  <button\n                    onClick={() => setShowCreateCampaign(true)}\n                    className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\n                  >\n                    Create Campaign\n                  </button>\n                </div>\n              ) : (\n                <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n                  {campaigns.map(campaign => (\n                    <div\n                      key={campaign.id}\n                      className='bg-white border rounded-lg p-4 hover:shadow-md transition-shadow'\n                    >\n                      <div className='flex items-start justify-between mb-3'>\n                        <div className='flex items-center'>\n                          {getStatusIcon(campaign.status)}\n                          <span\n                            className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(campaign.status)}`}\n                          >\n                            {campaign.status}\n                          </span>\n                        </div>\n                        <div className='flex space-x-1'>\n                          <button\n                            onClick={() => handleViewCampaignDetails(campaign.id)}\n                            className='p-1 text-gray-400 hover:text-gray-600'\n                          >\n                            <EyeIcon className='h-4 w-4' />\n                          </button>\n                          {campaign.status === 'draft' && (\n                            <>\n                              <button\n                                onClick={() => handleSendCampaign(campaign.id)}\n                                className='p-1 text-blue-400 hover:text-blue-600'\n                                title='Send immediately'\n                              >\n                                <PaperAirplaneIcon className='h-4 w-4' />\n                              </button>\n                              <button\n                                onClick={() => {\n                                  const time = prompt(\n                                    'Schedule send time (YYYY-MM-DD HH:MM):',\n                                    new Date(Date.now() + 3600000)\n                                      .toISOString()\n                                      .slice(0, 16)\n                                      .replace('T', ' '),\n                                  );\n                                  if (time) {\n                                    handleSendCampaign(campaign.id, true, time);\n                                  }\n                                }}\n                                className='p-1 text-orange-400 hover:text-orange-600'\n                                title='Schedule campaign'\n                              >\n                                <CalendarIcon className='h-4 w-4' />\n                              </button>\n                              <button\n                                onClick={() => handleDeleteCampaign(campaign.id)}\n                                className='p-1 text-red-400 hover:text-red-600'\n                                title='Delete campaign'\n                              >\n                                <TrashIcon className='h-4 w-4' />\n                              </button>\n                            </>\n                          )}\n                          {campaign.status === 'scheduled' && (\n                            <>\n                              <button\n                                onClick={() => handleSendCampaign(campaign.id)}\n                                className='p-1 text-green-400 hover:text-green-600'\n                                title='Send now (cancel schedule)'\n                              >\n                                <PlayIcon className='h-4 w-4' />\n                              </button>\n                              <button\n                                onClick={() => handleDeleteCampaign(campaign.id)}\n                                className='p-1 text-red-400 hover:text-red-600'\n                                title='Cancel campaign'\n                              >\n                                <PauseIcon className='h-4 w-4' />\n                              </button>\n                            </>\n                          )}\n                        </div>\n                      </div>\n\n                      <h3 className='font-semibold text-gray-900 mb-1'>{campaign.name}</h3>\n                      <p className='text-sm text-gray-600 mb-2'>{campaign.description}</p>\n\n                      <div className='text-xs text-gray-500 space-y-1'>\n                        <div>Template: {campaign.email_templates?.name || 'Unknown'}</div>\n                        <div>Recipients: {campaign.recipients?.length || 0}</div>\n                        <div>Created: {new Date(campaign.created_at).toLocaleDateString()}</div>\n                        {campaign.scheduled_at && (\n                          <div className='text-orange-600 font-medium'>\n                            Scheduled: {new Date(campaign.scheduled_at).toLocaleString()}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Queue Manager Tab */}\n          {activeTab === 'queue' && <EmailQueueManager />}\n\n          {/* Templates Tab */}\n          {activeTab === 'templates' && (\n            <div className='space-y-4'>\n              <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n                {templates.map(template => (\n                  <div\n                    key={template.id}\n                    className='bg-white border rounded-lg p-4 hover:shadow-md transition-shadow'\n                  >\n                    <div className='flex items-start justify-between mb-3'>\n                      <div className='flex items-center'>\n                        <DocumentTextIcon className='h-5 w-5 text-blue-500' />\n                        <span className='ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium'>\n                          {template.category}\n                        </span>\n                      </div>\n                      <div className='flex space-x-1'>\n                        <button\n                          onClick={() => {\n                            setSelectedTemplate(template);\n                            setShowTemplateEditor(true);\n                          }}\n                          className='p-1 text-gray-400 hover:text-gray-600'\n                        >\n                          <EyeIcon className='h-4 w-4' />\n                        </button>\n                      </div>\n                    </div>\n\n                    <h3 className='font-semibold text-gray-900 mb-1'>{template.name}</h3>\n                    <p className='text-sm text-gray-600 mb-2'>{template.description}</p>\n\n                    <div className='text-xs text-gray-500'>\n                      Updated: {new Date(template.updated_at).toLocaleDateString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Analytics Tab */}\n          {activeTab === 'analytics' && (\n            <div className='space-y-6'>\n              <div className='text-center py-8'>\n                <ChartBarIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n                <h3 className='text-lg font-medium text-gray-900 mb-2'>Campaign Analytics</h3>\n                <p className='text-gray-600'>Select a campaign to view detailed analytics</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Create Campaign Modal */}\n      {showCreateCampaign && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50'>\n          <div className='bg-white rounded-lg max-w-4xl w-full max-h-screen overflow-y-auto'>\n            <div className='p-6 border-b'>\n              <h2 className='text-xl font-bold'>Create Email Campaign</h2>\n            </div>\n\n            <div className='p-6 space-y-6'>\n              {/* Basic Info */}\n              <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    Campaign Name *\n                  </label>\n                  <input\n                    type='text'\n                    value={campaignForm.name}\n                    onChange={e => setCampaignForm(prev => ({ ...prev, name: e.target.value }))}\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    placeholder='Enter campaign name'\n                  />\n                </div>\n\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    Email Template *\n                  </label>\n                  <select\n                    value={campaignForm.templateId}\n                    onChange={e =>\n                      setCampaignForm(prev => ({ ...prev, templateId: e.target.value }))\n                    }\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  >\n                    <option value=''>Select template</option>\n                    {templates.map(template => (\n                      <option key={template.id} value={template.id}>\n                        {template.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>Description</label>\n                <textarea\n                  value={campaignForm.description}\n                  onChange={e =>\n                    setCampaignForm(prev => ({ ...prev, description: e.target.value }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  rows='3'\n                  placeholder='Campaign description'\n                />\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>\n                  Email Subject *\n                </label>\n                <input\n                  type='text'\n                  value={campaignForm.subject}\n                  onChange={e => setCampaignForm(prev => ({ ...prev, subject: e.target.value }))}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='Email subject line'\n                />\n              </div>\n\n              {/* Recipients */}\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-3'>Recipients *</label>\n\n                <div className='mb-4'>\n                  <div className='flex space-x-4'>\n                    <label className='flex items-center'>\n                      <input\n                        type='radio'\n                        name='recipientSource'\n                        value='manual'\n                        checked={recipientSource === 'manual'}\n                        onChange={e => setRecipientSource(e.target.value)}\n                        className='mr-2'\n                      />\n                      Manual Entry\n                    </label>\n                    <label className='flex items-center'>\n                      <input\n                        type='radio'\n                        name='recipientSource'\n                        value='clients'\n                        checked={recipientSource === 'clients'}\n                        onChange={e => setRecipientSource(e.target.value)}\n                        className='mr-2'\n                      />\n                      From Clients\n                    </label>\n                    <label className='flex items-center'>\n                      <input\n                        type='radio'\n                        name='recipientSource'\n                        value='csv'\n                        checked={recipientSource === 'csv'}\n                        onChange={e => setRecipientSource(e.target.value)}\n                        className='mr-2'\n                      />\n                      CSV Import\n                    </label>\n                  </div>\n                </div>\n\n                {recipientSource === 'manual' && (\n                  <div className='space-y-2'>\n                    <button\n                      onClick={addManualRecipient}\n                      className='px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700'\n                    >\n                      <PlusIcon className='h-4 w-4 inline mr-1' />\n                      Add Recipient\n                    </button>\n                  </div>\n                )}\n\n                {recipientSource === 'clients' && (\n                  <button\n                    onClick={handleLoadClientsAsRecipients}\n                    className='px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700'\n                  >\n                    <UserGroupIcon className='h-4 w-4 inline mr-2' />\n                    Load Clients\n                  </button>\n                )}\n\n                {recipientSource === 'csv' && (\n                  <div className='space-y-2'>\n                    <input\n                      type='file'\n                      accept='.csv'\n                      onChange={e => setCsvFile(e.target.files[0])}\n                      className='block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100'\n                    />\n                    <button\n                      onClick={handleImportCSV}\n                      disabled={!csvFile}\n                      className='px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 disabled:opacity-50'\n                    >\n                      <ArrowUpTrayIcon className='h-4 w-4 inline mr-2' />\n                      Import CSV\n                    </button>\n                  </div>\n                )}\n\n                {/* Recipients List */}\n                {campaignForm.recipients.length > 0 && (\n                  <div className='mt-4 max-h-40 overflow-y-auto border rounded-lg'>\n                    <table className='min-w-full divide-y divide-gray-200'>\n                      <thead className='bg-gray-50'>\n                        <tr>\n                          <th className='px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase'>\n                            Email\n                          </th>\n                          <th className='px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase'>\n                            Name\n                          </th>\n                          <th className='px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase'>\n                            Action\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className='bg-white divide-y divide-gray-200'>\n                        {campaignForm.recipients.map((recipient, index) => (\n                          <tr key={index}>\n                            <td className='px-3 py-2 text-sm text-gray-900'>{recipient.email}</td>\n                            <td className='px-3 py-2 text-sm text-gray-900'>{recipient.name}</td>\n                            <td className='px-3 py-2 text-sm'>\n                              <button\n                                onClick={() => removeRecipient(index)}\n                                className='text-red-600 hover:text-red-800'\n                              >\n                                <TrashIcon className='h-4 w-4' />\n                              </button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n\n              {/* Scheduling */}\n              <div className='space-y-3'>\n                <h3 className='font-medium text-gray-900'>Scheduling</h3>\n                <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      Send Time\n                    </label>\n                    <div className='space-y-2'>\n                      <label className='flex items-center'>\n                        <input\n                          type='radio'\n                          name='sendTime'\n                          value='now'\n                          checked={!campaignForm.scheduledAt}\n                          onChange={() => setCampaignForm(prev => ({ ...prev, scheduledAt: null }))}\n                          className='mr-2'\n                        />\n                        Send immediately\n                      </label>\n                      <label className='flex items-center'>\n                        <input\n                          type='radio'\n                          name='sendTime'\n                          value='scheduled'\n                          checked={!!campaignForm.scheduledAt}\n                          onChange={() => {\n                            const now = new Date();\n                            now.setHours(now.getHours() + 1);\n                            setCampaignForm(prev => ({\n                              ...prev,\n                              scheduledAt: now.toISOString().slice(0, 16),\n                            }));\n                          }}\n                          className='mr-2'\n                        />\n                        Schedule for later\n                      </label>\n                    </div>\n                  </div>\n\n                  {campaignForm.scheduledAt && (\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-1'>\n                        Scheduled Date & Time\n                      </label>\n                      <input\n                        type='datetime-local'\n                        value={campaignForm.scheduledAt}\n                        onChange={e =>\n                          setCampaignForm(prev => ({ ...prev, scheduledAt: e.target.value }))\n                        }\n                        min={new Date().toISOString().slice(0, 16)}\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Settings */}\n              <div className='space-y-3'>\n                <h3 className='font-medium text-gray-900'>Tracking Settings</h3>\n                <div className='flex space-x-6'>\n                  <label className='flex items-center'>\n                    <input\n                      type='checkbox'\n                      checked={campaignForm.trackOpens}\n                      onChange={e =>\n                        setCampaignForm(prev => ({ ...prev, trackOpens: e.target.checked }))\n                      }\n                      className='mr-2'\n                    />\n                    Track Email Opens\n                  </label>\n                  <label className='flex items-center'>\n                    <input\n                      type='checkbox'\n                      checked={campaignForm.trackClicks}\n                      onChange={e =>\n                        setCampaignForm(prev => ({ ...prev, trackClicks: e.target.checked }))\n                      }\n                      className='mr-2'\n                    />\n                    Track Link Clicks\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className='p-6 border-t flex items-center justify-between'>\n              <button\n                onClick={() => {\n                  setShowCreateCampaign(false);\n                  resetCampaignForm();\n                }}\n                className='px-4 py-2 text-gray-600 hover:text-gray-800'\n              >\n                Cancel\n              </button>\n              <div className='flex space-x-3'>\n                <button\n                  onClick={handleCreateCampaign}\n                  disabled={\n                    loading ||\n                    !campaignForm.name ||\n                    !campaignForm.templateId ||\n                    campaignForm.recipients.length === 0\n                  }\n                  className='px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center'\n                >\n                  {loading ? (\n                    <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2'></div>\n                  ) : (\n                    <DocumentTextIcon className='h-4 w-4 mr-2' />\n                  )}\n                  {loading\n                    ? 'Creating...'\n                    : campaignForm.scheduledAt\n                      ? 'Create & Schedule'\n                      : 'Create Campaign'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Campaign Details Modal */}\n      {selectedCampaign && campaignDetails && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50'>\n          <div className='bg-white rounded-lg max-w-4xl w-full max-h-screen overflow-y-auto'>\n            <div className='p-6 border-b flex items-center justify-between'>\n              <h2 className='text-xl font-bold'>{campaignDetails.name}</h2>\n              <button\n                onClick={() => {\n                  setSelectedCampaign(null);\n                  setCampaignDetails(null);\n                }}\n                className='text-gray-400 hover:text-gray-600'\n              >\n                Ô£ò\n              </button>\n            </div>\n\n            <div className='p-6'>\n              {/* Campaign Stats */}\n              <div className='grid grid-cols-2 md:grid-cols-4 gap-4 mb-6'>\n                <div className='bg-blue-50 p-4 rounded-lg'>\n                  <div className='text-2xl font-bold text-blue-600'>\n                    {campaignDetails.stats.total_recipients}\n                  </div>\n                  <div className='text-sm text-gray-600'>Recipients</div>\n                </div>\n                <div className='bg-green-50 p-4 rounded-lg'>\n                  <div className='text-2xl font-bold text-green-600'>\n                    {campaignDetails.stats.sent}\n                  </div>\n                  <div className='text-sm text-gray-600'>Sent</div>\n                </div>\n                <div className='bg-yellow-50 p-4 rounded-lg'>\n                  <div className='text-2xl font-bold text-yellow-600'>\n                    {campaignDetails.stats.unique_opens}\n                  </div>\n                  <div className='text-sm text-gray-600'>Opens</div>\n                </div>\n                <div className='bg-purple-50 p-4 rounded-lg'>\n                  <div className='text-2xl font-bold text-purple-600'>\n                    {campaignDetails.stats.unique_clicks}\n                  </div>\n                  <div className='text-sm text-gray-600'>Clicks</div>\n                </div>\n              </div>\n\n              {/* Rates */}\n              <div className='grid grid-cols-2 md:grid-cols-4 gap-4'>\n                <div className='text-center'>\n                  <div className='text-lg font-semibold'>\n                    {campaignDetails.stats.delivery_rate}%\n                  </div>\n                  <div className='text-sm text-gray-600'>Delivery Rate</div>\n                </div>\n                <div className='text-center'>\n                  <div className='text-lg font-semibold'>{campaignDetails.stats.open_rate}%</div>\n                  <div className='text-sm text-gray-600'>Open Rate</div>\n                </div>\n                <div className='text-center'>\n                  <div className='text-lg font-semibold'>{campaignDetails.stats.click_rate}%</div>\n                  <div className='text-sm text-gray-600'>Click Rate</div>\n                </div>\n                <div className='text-center'>\n                  <div className='text-lg font-semibold'>\n                    {campaignDetails.stats.click_through_rate}%\n                  </div>\n                  <div className='text-sm text-gray-600'>CTR</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmailCampaignManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailManager.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":6,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":444,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the &quot;Campaigns\" tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the &ldquo;Campaigns\" tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the &#34;Campaigns\" tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the &rdquo;Campaigns\" tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":444,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the \"Campaigns&quot; tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the \"Campaigns&ldquo; tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the \"Campaigns&#34; tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17291,17492],"text":"\n                  Switch to the \"Campaigns&rdquo; tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":544,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the &quot;Campaigns\" tab.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the &ldquo;Campaigns\" tab.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the &#34;Campaigns\" tab.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the &rdquo;Campaigns\" tab.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":544,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the \"Campaigns&quot; tab.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the \"Campaigns&ldquo; tab.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the \"Campaigns&#34; tab.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[21576,21748],"text":"\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the \"Campaigns&rdquo; tab.\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  EnvelopeIcon as Mail,\n  PaperAirplaneIcon as Send,\n  CogIcon as Settings,\n  DocumentTextIcon as FileText,\n  ClockIcon as Clock,\n  CheckCircleIcon as CheckCircle,\n  ExclamationTriangleIcon as AlertTriangle,\n  SparklesIcon,\n  UserGroupIcon,\n  ChartBarIcon,\n} from '@heroicons/react/24/outline';\nimport emailService from '@lib/emailService';\nimport EmailCampaignManager from './EmailCampaignManager';\nimport EmailProviderSettings from './EmailProviderSettings';\nimport EmailSignatureManager from './EmailSignatureManager';\nimport { supabase } from '@lib/supabaseClient';\nimport Logger from '@utils/Logger';\nimport { useTranslation } from 'react-i18next';\n\nconst EmailManager = () => {\n  const { t } = useTranslation('email');\n  const [activeTab, setActiveTab] = useState('send');\n  const [invoices, setInvoices] = useState([]);\n  const [selectedInvoice, setSelectedInvoice] = useState('');\n  const [recipientEmail, setRecipientEmail] = useState('');\n  const [customMessage, setCustomMessage] = useState('');\n  const [emailActivity, setEmailActivity] = useState([]);\n  const [templates, setTemplates] = useState({});\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [testEmail, setTestEmail] = useState('');\n\n  useEffect(() => {\n    loadInvoices();\n    loadEmailActivity();\n    loadTemplates();\n  }, []);\n\n  const loadInvoices = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('invoices')\n        .select(\n          `\n          id,\n          invoice_number,\n          total_amount,\n          status,\n          issue_date,\n          clients:client_id (\n            name,\n            email\n          )\n        `,\n        )\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setInvoices(data || []);\n    } catch (error) {\n      Logger.error('Error loading invoices:', error);\n    }\n  };\n\n  const loadEmailActivity = async () => {\n    try {\n      const result = await emailService.getEmailActivity();\n      if (result.success) {\n        setEmailActivity(result.data);\n      }\n    } catch (error) {\n      Logger.error('Error loading email activity:', error);\n    }\n  };\n\n  const loadTemplates = () => {\n    const templates = emailService.getTemplates();\n    setTemplates(templates);\n    if (Object.keys(templates).length > 0) {\n      setSelectedTemplate(Object.keys(templates)[0]);\n    }\n  };\n\n  const handleSendInvoice = async () => {\n    if (!selectedInvoice || !recipientEmail) {\n      alert(t('alerts.selectInvoiceAndEmail'));\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await emailService.sendInvoice(\n        selectedInvoice,\n        recipientEmail,\n        customMessage || null,\n        true,\n      );\n\n      if (result.success) {\n        alert(t('alerts.emailSentSuccess'));\n        setCustomMessage('');\n        loadEmailActivity();\n      } else {\n        alert(t('alerts.sendError', { error: result.error }));\n      }\n    } catch (error) {\n      Logger.error('Error sending invoice:', error);\n      alert(t('alerts.genericSendError'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSendReminder = async (invoiceId, reminderType) => {\n    setLoading(true);\n    try {\n      const result = await emailService.sendPaymentReminder(invoiceId, reminderType);\n\n      if (result.success) {\n        alert(t('alerts.reminderSentSuccess'));\n        loadEmailActivity();\n      } else {\n        alert(t('alerts.sendError', { error: result.error }));\n      }\n    } catch (error) {\n      Logger.error('Error sending reminder:', error);\n      alert(t('alerts.genericReminderError'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTestEmail = async () => {\n    if (!testEmail) {\n      alert(t('alerts.enterTestEmail'));\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await emailService.testEmailConfiguration(testEmail);\n\n      if (result.success) {\n        alert(t('alerts.testSentSuccess'));\n      } else {\n        alert(t('alerts.testError', { error: result.error }));\n      }\n    } catch (error) {\n      Logger.error('Error testing email:', error);\n      alert(t('alerts.genericTestError'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'sent':\n        return <CheckCircle className='h-4 w-4 text-green-500' />;\n      case 'failed':\n        return <AlertTriangle className='h-4 w-4 text-red-500' />;\n      default:\n        return <Clock className='h-4 w-4 text-yellow-500' />;\n    }\n  };\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'sent':\n        return 'text-green-600 bg-green-100';\n      case 'failed':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-yellow-600 bg-yellow-100';\n    }\n  };\n\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString('it-IT', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // Removed unused sendClientEmail function\n\n  return (\n    <div className='space-y-6 p-6'>\n      {/* Header */}\n      <div>\n        <h1 className='text-2xl font-bold flex items-center'>\n          <Mail className='h-6 w-6 mr-2' />\n          {t('title')}\n        </h1>\n        <p className='text-gray-600'>{t('subtitle')}</p>\n      </div>\n\n      {/* Tabs */}\n      <div className='bg-white rounded-lg shadow'>\n        <div className='border-b border-gray-200'>\n          <nav className='flex space-x-8 px-6'>\n            {[\n              { id: 'send', label: t('tabs.send'), icon: Send },\n              { id: 'campaigns', label: 'Campaigns', icon: UserGroupIcon },\n              { id: 'templates', label: 'Templates', icon: SparklesIcon },\n              { id: 'signatures', label: 'Signatures', icon: SparklesIcon },\n              { id: 'activity', label: t('tabs.activity'), icon: Clock },\n              { id: 'analytics', label: 'Analytics', icon: ChartBarIcon },\n              { id: 'providers', label: 'Providers', icon: Settings },\n              { id: 'settings', label: t('tabs.settings'), icon: Settings },\n            ].map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <tab.icon className='h-4 w-4' />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className='p-6'>\n          {/* Send Email Tab */}\n          {activeTab === 'send' && (\n            <div className='space-y-6'>\n              <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>\n                {/* Send Invoice */}\n                <div className='border rounded-lg p-6'>\n                  <h3 className='text-lg font-medium mb-4'>{t('sendInvoice.title')}</h3>\n\n                  <div className='space-y-4'>\n                    <div>\n                      <label\n                        htmlFor='invoice-select'\n                        className='block text-sm font-medium text-gray-700'\n                      >\n                        {t('sendInvoice.selectInvoice')}\n                      </label>\n                      <select\n                        id='invoice-select'\n                        value={selectedInvoice}\n                        onChange={e => {\n                          const invId = e.target.value;\n                          setSelectedInvoice(invId);\n                          const inv = invoices.find(i => i.id === parseInt(invId));\n                          if (inv) {\n                            setRecipientEmail(inv.clients.email);\n                          }\n                        }}\n                        className='mt-1 block w-full border-gray-300 rounded-md shadow-sm'\n                      >\n                        <option value=''>{t('sendInvoice.selectPlaceholder')}</option>\n                        {invoices.map(invoice => (\n                          <option key={invoice.id} value={String(invoice.id)}>\n                            {invoice.invoice_number} - {invoice.clients.name} - Ôé¼\n                            {parseFloat(invoice.total_amount).toFixed(2)}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <div>\n                      <label\n                        htmlFor='recipient-email'\n                        className='block text-sm font-medium text-gray-700'\n                      >\n                        {t('sendInvoice.recipientEmail')}\n                      </label>\n                      <input\n                        type='email'\n                        id='recipient-email'\n                        value={recipientEmail}\n                        onChange={e => setRecipientEmail(e.target.value)}\n                        placeholder={t('sendInvoice.recipientPlaceholder')}\n                        className='mt-1 block w-full border-gray-300 rounded-md shadow-sm'\n                      />\n                    </div>\n                    <div>\n                      <label\n                        htmlFor='custom-message'\n                        className='block text-sm font-medium text-gray-700'\n                      >\n                        {t('sendInvoice.customMessage')}\n                      </label>\n                      <textarea\n                        id='custom-message'\n                        rows='4'\n                        value={customMessage}\n                        onChange={e => setCustomMessage(e.target.value)}\n                        placeholder={t('sendInvoice.messagePlaceholder')}\n                        className='mt-1 block w-full border-gray-300 rounded-md shadow-sm'\n                      ></textarea>\n                    </div>\n                  </div>\n                  <button\n                    onClick={handleSendInvoice}\n                    disabled={loading || !selectedInvoice || !recipientEmail}\n                    className='mt-6 w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center'\n                  >\n                    {loading ? (\n                      <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white'></div>\n                    ) : (\n                      <>\n                        <Send className='h-4 w-4 mr-2' />\n                        {t('sendInvoice.sendButton')}\n                      </>\n                    )}\n                  </button>\n                </div>\n\n                {/* Send Reminders */}\n                <div className='border rounded-lg p-6'>\n                  <h3 className='text-lg font-medium mb-4'>{t('sendReminder.title')}</h3>\n                  <div className='space-y-4'>\n                    <p className='text-sm text-gray-600'>{t('sendReminder.description')}</p>\n\n                    {invoices\n                      .filter(inv => inv.status === 'sent' || inv.status === 'overdue')\n                      .map(invoice => (\n                        <div key={invoice.id} className='border rounded p-4'>\n                          <div className='flex justify-between items-start mb-2'>\n                            <div>\n                              <div className='font-medium'>{invoice.invoice_number}</div>\n                              <div className='text-sm text-gray-500'>{invoice.clients.name}</div>\n                              <div className='text-sm text-gray-500'>\n                                Ôé¼{parseFloat(invoice.total_amount).toFixed(2)}\n                              </div>\n                            </div>\n                            <span\n                              className={`px-2 py-1 rounded text-xs ${\n                                invoice.status === 'overdue'\n                                  ? 'bg-red-100 text-red-800'\n                                  : 'bg-yellow-100 text-yellow-800'\n                              }`}\n                            >\n                              {t(`status.${invoice.status}`)}\n                            </span>\n                          </div>\n\n                          <div className='flex space-x-2'>\n                            <button\n                              onClick={() => handleSendReminder(invoice.id, 'gentle')}\n                              disabled={loading}\n                              className='text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded hover:bg-blue-200'\n                            >\n                              {t('sendReminder.firstReminder')}\n                            </button>\n                            {invoice.status === 'overdue' && (\n                              <button\n                                onClick={() => handleSendReminder(invoice.id, 'firm')}\n                                disabled={loading}\n                                className='text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded hover:bg-orange-200'\n                              >\n                                {t('sendReminder.secondReminder')}\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Activity Log Tab */}\n          {activeTab === 'activity' && (\n            <div>\n              <h3 className='text-lg font-medium mb-4'>{t('activityLog.title')}</h3>\n              <div className='overflow-x-auto'>\n                <table className='min-w-full divide-y divide-gray-200'>\n                  <thead className='bg-gray-50'>\n                    <tr>\n                      <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                        {t('activityLog.recipient')}\n                      </th>\n                      <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                        {t('activityLog.subject')}\n                      </th>\n                      <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                        {t('activityLog.date')}\n                      </th>\n                      <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                        {t('activityLog.status')}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className='bg-white divide-y divide-gray-200'>\n                    {emailActivity.map((activity, index) => (\n                      <tr key={index} className='border-b hover:bg-gray-50'>\n                        <td className='px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900'>\n                          {activity.recipient}\n                        </td>\n                        <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>\n                          {activity.subject}\n                        </td>\n                        <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>\n                          {formatDate(activity.sent_at)}\n                        </td>\n                        <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>\n                          <div className='flex items-center space-x-2'>\n                            {getStatusIcon(activity.status)}\n                            <span className={`capitalize ${getStatusColor(activity.status)}`}>\n                              {t(`status.${activity.status}`)}\n                            </span>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* Campaigns Tab */}\n          {activeTab === 'campaigns' && <EmailCampaignManager />}\n\n          {/* Advanced Templates Tab */}\n          {activeTab === 'templates' && (\n            <div className='space-y-6'>\n              <div className='flex items-center justify-between'>\n                <h3 className='text-lg font-medium'>Advanced Email Templates</h3>\n                <p className='text-sm text-gray-600'>\n                  Create and manage professional email templates with WYSIWYG editor\n                </p>\n              </div>\n              <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>\n                <div className='flex items-center'>\n                  <SparklesIcon className='h-5 w-5 text-blue-600 mr-2' />\n                  <p className='text-blue-800 font-medium'>Advanced Template Management</p>\n                </div>\n                <p className='text-blue-700 text-sm mt-1'>\n                  Switch to the \"Campaigns\" tab to access the full template editor with WYSIWYG\n                  editing, variable management, and email client compatibility testing.\n                </p>\n              </div>\n\n              {/* Legacy Templates View */}\n              <div className='border-t pt-6'>\n                <h4 className='text-md font-medium mb-4'>Legacy Templates (Read-Only)</h4>\n                <div>\n                  <label\n                    htmlFor='template-select'\n                    className='block text-sm font-medium text-gray-700'\n                  >\n                    {t('templates.selectTemplate')}\n                  </label>\n                  <select\n                    id='template-select'\n                    value={selectedTemplate}\n                    onChange={e => setSelectedTemplate(e.target.value)}\n                    className='mt-1 block w-full border-gray-300 rounded-md shadow-sm'\n                  >\n                    {Object.keys(templates).map(key => (\n                      <option key={key} value={key}>\n                        {key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                {selectedTemplate && (\n                  <div className='border rounded-lg p-6 space-y-4 mt-4'>\n                    <div>\n                      <label\n                        htmlFor='template-subject'\n                        className='block text-sm font-medium text-gray-700'\n                      >\n                        {t('templates.subject')}\n                      </label>\n                      <input\n                        type='text'\n                        id='template-subject'\n                        value={templates[selectedTemplate]?.subject || ''}\n                        readOnly\n                        className='mt-1 block w-full border-gray-300 rounded-md shadow-sm bg-gray-50'\n                      />\n                    </div>\n                    <div>\n                      <label\n                        htmlFor='template-body'\n                        className='block text-sm font-medium text-gray-700'\n                      >\n                        {t('templates.body')}\n                      </label>\n                      <textarea\n                        id='template-body'\n                        value={templates[selectedTemplate]?.body || ''}\n                        readOnly\n                        rows='12'\n                        className='mt-1 block w-full border-gray-300 rounded-md shadow-sm bg-gray-50'\n                      ></textarea>\n                    </div>\n                  </div>\n                )}\n                <div className='mt-4'>\n                  <h4 className='font-medium text-gray-800'>{t('templates.placeholders')}</h4>\n                  <div className='flex flex-wrap gap-2 mt-2'>\n                    {[\n                      '{client_name}',\n                      '{company_name}',\n                      '{invoice_number}',\n                      '{total_amount}',\n                      '{issue_date}',\n                      '{due_date}',\n                    ].map((placeholder, index) => (\n                      <span\n                        key={index}\n                        className='px-2 py-1 bg-gray-100 text-gray-800 rounded text-xs'\n                      >\n                        {placeholder}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Signatures Tab */}\n          {activeTab === 'signatures' && <EmailSignatureManager />}\n\n          {/* Analytics Tab */}\n          {activeTab === 'analytics' && (\n            <div className='space-y-6'>\n              <h3 className='text-lg font-medium'>Email Analytics</h3>\n              <div className='bg-purple-50 border border-purple-200 rounded-lg p-4'>\n                <div className='flex items-center'>\n                  <ChartBarIcon className='h-5 w-5 text-purple-600 mr-2' />\n                  <p className='text-purple-800 font-medium'>Advanced Analytics</p>\n                </div>\n                <p className='text-purple-700 text-sm mt-1'>\n                  Detailed campaign analytics, open rates, click tracking, and performance metrics\n                  are available in the \"Campaigns\" tab.\n                </p>\n              </div>\n\n              {/* Basic Stats */}\n              <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n                <div className='bg-white border rounded-lg p-4'>\n                  <div className='text-2xl font-bold text-blue-600'>{emailActivity.length}</div>\n                  <div className='text-sm text-gray-600'>Total Emails</div>\n                </div>\n                <div className='bg-white border rounded-lg p-4'>\n                  <div className='text-2xl font-bold text-green-600'>\n                    {emailActivity.filter(a => a.status === 'sent').length}\n                  </div>\n                  <div className='text-sm text-gray-600'>Successfully Sent</div>\n                </div>\n                <div className='bg-white border rounded-lg p-4'>\n                  <div className='text-2xl font-bold text-red-600'>\n                    {emailActivity.filter(a => a.status === 'failed').length}\n                  </div>\n                  <div className='text-sm text-gray-600'>Failed</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Providers Tab */}\n          {activeTab === 'providers' && <EmailProviderSettings />}\n\n          {/* Settings Tab */}\n          {activeTab === 'settings' && (\n            <div className='space-y-6'>\n              <h3 className='text-lg font-medium'>{t('settings.title')}</h3>\n              <div className='border rounded-lg p-6'>\n                <p className='text-gray-600 mb-4'>{t('settings.configure')}</p>\n                {/* SMTP configuration form would go here */}\n              </div>\n\n              <div className='border rounded-lg p-6'>\n                <h4 className='text-md font-medium mb-4'>{t('settings.testTitle')}</h4>\n                <div className='flex gap-4'>\n                  <input\n                    type='email'\n                    value={testEmail}\n                    onChange={e => setTestEmail(e.target.value)}\n                    placeholder={t('settings.testPlaceholder')}\n                    className='flex-grow border-gray-300 rounded-md shadow-sm'\n                  />\n                  <button\n                    onClick={handleTestEmail}\n                    disabled={loading}\n                    className='bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 disabled:bg-green-300'\n                  >\n                    {t('settings.sendTestButton')}\n                  </button>\n                </div>\n              </div>\n              <div className='border rounded-lg p-6'>\n                <h4 className='font-medium mb-4'>{t('settings.systemInfo')}</h4>\n                <div className='space-y-2 text-sm'>\n                  <div className='flex justify-between'>\n                    <span>{t('settings.provider')}:</span>\n                    <span className='text-gray-600'>Mock Service (Demo)</span>\n                  </div>\n                  <div className='flex justify-between'>\n                    <span>{t('settings.status')}:</span>\n                    <span className='text-green-600'>{t('settings.active')}</span>\n                  </div>\n                  <div className='flex justify-between'>\n                    <span>{t('settings.emailsSentToday')}:</span>\n                    <span className='text-gray-600'>\n                      {\n                        emailActivity.filter(\n                          a => new Date(a.sent_at).toDateString() === new Date().toDateString(),\n                        ).length\n                      }\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailProviderSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ClockIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChartBarIcon' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  CogIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  CloudIcon,\n  ServerIcon,\n  KeyIcon,\n  GlobeAltIcon,\n  ClockIcon,\n  ChartBarIcon,\n  InformationCircleIcon,\n} from '@heroicons/react/24/outline';\nimport emailService from '@lib/emailService';\nimport { useTranslation } from 'react-i18next';\n\nconst EmailProviderSettings = () => {\n  const { t } = useTranslation('email');\n  const [providers, setProviders] = useState([]);\n  const [activeProvider, setActiveProvider] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [testEmail, setTestEmail] = useState('');\n  const [testResults, setTestResults] = useState({});\n  const [showConfigModal, setShowConfigModal] = useState(false);\n  const [selectedProvider, setSelectedProvider] = useState(null);\n\n  // Configuration forms for each provider\n  const [configurations, setConfigurations] = useState({\n    sendgrid: {\n      apiKey: '',\n      fromEmail: '',\n      fromName: '',\n    },\n    ses: {\n      accessKeyId: '',\n      secretAccessKey: '',\n      region: 'us-east-1',\n      fromEmail: '',\n      fromName: '',\n    },\n    mailgun: {\n      apiKey: '',\n      domain: '',\n      fromEmail: '',\n      fromName: '',\n    },\n    postmark: {\n      serverToken: '',\n      fromEmail: '',\n      fromName: '',\n    },\n    smtp: {\n      host: '',\n      port: 587,\n      secure: false,\n      user: '',\n      password: '',\n      fromEmail: '',\n      fromName: '',\n    },\n  });\n\n  useEffect(() => {\n    loadProviders();\n    loadActiveProvider();\n  }, []);\n\n  const loadProviders = () => {\n    const allProviders = emailService.getAllProviders();\n    setProviders(allProviders);\n  };\n\n  const loadActiveProvider = () => {\n    const current = emailService.getProviderInfo();\n    setActiveProvider(current);\n  };\n\n  const handleTestProvider = async providerId => {\n    if (!testEmail) {\n      alert('Please enter a test email address');\n      return;\n    }\n\n    setLoading(true);\n    setTestResults(prev => ({ ...prev, [providerId]: { testing: true } }));\n\n    try {\n      const result = await emailService.testEmailConfiguration(testEmail, providerId);\n\n      setTestResults(prev => ({\n        ...prev,\n        [providerId]: {\n          testing: false,\n          success: result.success,\n          message: result.success ? 'Test email sent successfully!' : result.error,\n          provider: result.provider,\n          note: result.note,\n        },\n      }));\n\n      if (result.success) {\n        loadProviders();\n      }\n    } catch (error) {\n      setTestResults(prev => ({\n        ...prev,\n        [providerId]: {\n          testing: false,\n          success: false,\n          message: error.message,\n        },\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSwitchProvider = async providerId => {\n    const success = emailService.setActiveProvider(providerId);\n    if (success) {\n      loadActiveProvider();\n      loadProviders();\n      alert(`Switched to ${providerId} successfully!`);\n    } else {\n      alert('Failed to switch provider');\n    }\n  };\n\n  const handleConfigureProvider = providerId => {\n    setSelectedProvider(providerId);\n    setShowConfigModal(true);\n  };\n\n  const handleSaveConfiguration = () => {\n    // In a real implementation, this would save to environment variables or a secure store\n    alert('Configuration saved! Please restart the application for changes to take effect.');\n    setShowConfigModal(false);\n    setSelectedProvider(null);\n    loadProviders();\n  };\n\n  const getProviderIcon = providerId => {\n    const icons = {\n      sendgrid: CloudIcon,\n      ses: ServerIcon,\n      mailgun: GlobeAltIcon,\n      postmark: CloudIcon,\n      smtp: ServerIcon,\n      mock: InformationCircleIcon,\n    };\n\n    const IconComponent = icons[providerId] || CloudIcon;\n    return <IconComponent className='h-6 w-6' />;\n  };\n\n  const getProviderColor = provider => {\n    if (provider.active) return 'border-blue-500 bg-blue-50';\n    if (provider.configured) return 'border-green-500 bg-green-50';\n    return 'border-gray-300 bg-gray-50';\n  };\n\n  const getStatusIcon = provider => {\n    if (provider.active) {\n      return <CheckCircleIcon className='h-5 w-5 text-blue-600' />;\n    }\n    if (provider.configured) {\n      return <CheckCircleIcon className='h-5 w-5 text-green-600' />;\n    }\n    return <ExclamationTriangleIcon className='h-5 w-5 text-yellow-600' />;\n  };\n\n  const renderConfigurationForm = () => {\n    if (!selectedProvider) return null;\n\n    const config = configurations[selectedProvider];\n\n    return (\n      <div className='space-y-4'>\n        {selectedProvider === 'sendgrid' && (\n          <>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>\n                SendGrid API Key\n              </label>\n              <input\n                type='password'\n                value={config.apiKey}\n                onChange={e =>\n                  setConfigurations(prev => ({\n                    ...prev,\n                    sendgrid: { ...prev.sendgrid, apiKey: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='SG.xxxxxxxxxxxxxx'\n              />\n            </div>\n          </>\n        )}\n\n        {selectedProvider === 'ses' && (\n          <>\n            <div className='grid grid-cols-2 gap-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>\n                  Access Key ID\n                </label>\n                <input\n                  type='text'\n                  value={config.accessKeyId}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      ses: { ...prev.ses, accessKeyId: e.target.value },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='AKIAIOSFODNN7EXAMPLE'\n                />\n              </div>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>\n                  Secret Access Key\n                </label>\n                <input\n                  type='password'\n                  value={config.secretAccessKey}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      ses: { ...prev.ses, secretAccessKey: e.target.value },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\n                />\n              </div>\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>AWS Region</label>\n              <select\n                value={config.region}\n                onChange={e =>\n                  setConfigurations(prev => ({\n                    ...prev,\n                    ses: { ...prev.ses, region: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              >\n                <option value='us-east-1'>US East (N. Virginia)</option>\n                <option value='us-west-2'>US West (Oregon)</option>\n                <option value='eu-west-1'>Europe (Ireland)</option>\n                <option value='ap-southeast-1'>Asia Pacific (Singapore)</option>\n              </select>\n            </div>\n          </>\n        )}\n\n        {selectedProvider === 'mailgun' && (\n          <>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>\n                Mailgun API Key\n              </label>\n              <input\n                type='password'\n                value={config.apiKey}\n                onChange={e =>\n                  setConfigurations(prev => ({\n                    ...prev,\n                    mailgun: { ...prev.mailgun, apiKey: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='key-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n              />\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>Domain</label>\n              <input\n                type='text'\n                value={config.domain}\n                onChange={e =>\n                  setConfigurations(prev => ({\n                    ...prev,\n                    mailgun: { ...prev.mailgun, domain: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='sandbox-xxx.mailgun.org'\n              />\n            </div>\n          </>\n        )}\n\n        {selectedProvider === 'postmark' && (\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-1'>Server Token</label>\n            <input\n              type='password'\n              value={config.serverToken}\n              onChange={e =>\n                setConfigurations(prev => ({\n                  ...prev,\n                  postmark: { ...prev.postmark, serverToken: e.target.value },\n                }))\n              }\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              placeholder='xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n            />\n          </div>\n        )}\n\n        {selectedProvider === 'smtp' && (\n          <>\n            <div className='grid grid-cols-2 gap-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>SMTP Host</label>\n                <input\n                  type='text'\n                  value={config.host}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      smtp: { ...prev.smtp, host: e.target.value },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='smtp.gmail.com'\n                />\n              </div>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>Port</label>\n                <input\n                  type='number'\n                  value={config.port}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      smtp: { ...prev.smtp, port: parseInt(e.target.value) },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='587'\n                />\n              </div>\n            </div>\n            <div className='grid grid-cols-2 gap-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>Username</label>\n                <input\n                  type='text'\n                  value={config.user}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      smtp: { ...prev.smtp, user: e.target.value },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='your-email@gmail.com'\n                />\n              </div>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>Password</label>\n                <input\n                  type='password'\n                  value={config.password}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      smtp: { ...prev.smtp, password: e.target.value },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='your-app-password'\n                />\n              </div>\n            </div>\n            <div>\n              <label className='flex items-center'>\n                <input\n                  type='checkbox'\n                  checked={config.secure}\n                  onChange={e =>\n                    setConfigurations(prev => ({\n                      ...prev,\n                      smtp: { ...prev.smtp, secure: e.target.checked },\n                    }))\n                  }\n                  className='mr-2'\n                />\n                Use SSL/TLS\n              </label>\n            </div>\n          </>\n        )}\n\n        {/* Common fields for all providers */}\n        <div className='border-t pt-4'>\n          <h4 className='font-medium text-gray-900 mb-3'>Default Sender Information</h4>\n          <div className='grid grid-cols-2 gap-4'>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>From Email</label>\n              <input\n                type='email'\n                value={config.fromEmail}\n                onChange={e =>\n                  setConfigurations(prev => ({\n                    ...prev,\n                    [selectedProvider]: { ...prev[selectedProvider], fromEmail: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='noreply@yourcompany.com'\n              />\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>From Name</label>\n              <input\n                type='text'\n                value={config.fromName}\n                onChange={e =>\n                  setConfigurations(prev => ({\n                    ...prev,\n                    [selectedProvider]: { ...prev[selectedProvider], fromName: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='Your Company Name'\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className='space-y-6 p-6'>\n      {/* Header */}\n      <div>\n        <h1 className='text-2xl font-bold flex items-center'>\n          <CogIcon className='h-6 w-6 mr-2' />\n          Email Provider Settings\n        </h1>\n        <p className='text-gray-600'>Configure and manage email service providers</p>\n      </div>\n\n      {/* Test Email Section */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h3 className='text-lg font-medium mb-4'>Test Configuration</h3>\n        <div className='flex space-x-3'>\n          <input\n            type='email'\n            value={testEmail}\n            onChange={e => setTestEmail(e.target.value)}\n            placeholder='Enter test email address'\n            className='flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n          />\n          <button\n            onClick={() => handleTestProvider(activeProvider?.id)}\n            disabled={loading || !testEmail || !activeProvider}\n            className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed'\n          >\n            {loading ? 'Testing...' : 'Test Active Provider'}\n          </button>\n        </div>\n      </div>\n\n      {/* Providers Grid */}\n      <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n        {providers.map(provider => (\n          <div\n            key={provider.id}\n            className={`bg-white rounded-lg shadow border-2 ${getProviderColor(provider)} p-6`}\n          >\n            <div className='flex items-start justify-between mb-4'>\n              <div className='flex items-center'>\n                {getProviderIcon(provider.id)}\n                <div className='ml-3'>\n                  <h3 className='text-lg font-medium'>{provider.name}</h3>\n                  <div className='flex items-center mt-1'>\n                    {getStatusIcon(provider)}\n                    <span className='ml-1 text-sm text-gray-600'>\n                      {provider.active\n                        ? 'Active'\n                        : provider.configured\n                          ? 'Configured'\n                          : 'Not Configured'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className='flex space-x-2'>\n                <button\n                  onClick={() => handleConfigureProvider(provider.id)}\n                  className='p-2 text-gray-400 hover:text-gray-600'\n                  title='Configure'\n                >\n                  <KeyIcon className='h-4 w-4' />\n                </button>\n                {provider.configured && !provider.active && (\n                  <button\n                    onClick={() => handleSwitchProvider(provider.id)}\n                    className='px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700'\n                  >\n                    Activate\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* Provider Details */}\n            <div className='space-y-2 text-sm text-gray-600'>\n              <div className='flex justify-between'>\n                <span>Auth Type:</span>\n                <span className='font-medium'>{provider.authType}</span>\n              </div>\n              {provider.limits?.daily && (\n                <div className='flex justify-between'>\n                  <span>Daily Limit:</span>\n                  <span className='font-medium'>{provider.limits.daily.toLocaleString()}</span>\n                </div>\n              )}\n              {provider.limits?.monthly && (\n                <div className='flex justify-between'>\n                  <span>Monthly Limit:</span>\n                  <span className='font-medium'>{provider.limits.monthly.toLocaleString()}</span>\n                </div>\n              )}\n              <div className='flex justify-between'>\n                <span>Delivery Time:</span>\n                <span className='font-medium'>\n                  {emailService.getEstimatedDeliveryTime(provider.id)}\n                </span>\n              </div>\n            </div>\n\n            {/* Test Results */}\n            {testResults[provider.id] && (\n              <div\n                className={`mt-4 p-3 rounded-md ${\n                  testResults[provider.id].success\n                    ? 'bg-green-50 border border-green-200'\n                    : 'bg-red-50 border border-red-200'\n                }`}\n              >\n                <div className='flex items-center'>\n                  {testResults[provider.id].success ? (\n                    <CheckCircleIcon className='h-4 w-4 text-green-600 mr-2' />\n                  ) : (\n                    <ExclamationTriangleIcon className='h-4 w-4 text-red-600 mr-2' />\n                  )}\n                  <span\n                    className={`text-sm ${\n                      testResults[provider.id].success ? 'text-green-800' : 'text-red-800'\n                    }`}\n                  >\n                    {testResults[provider.id].message}\n                  </span>\n                </div>\n                {testResults[provider.id].note && (\n                  <p className='text-xs text-gray-600 mt-1'>{testResults[provider.id].note}</p>\n                )}\n              </div>\n            )}\n\n            {/* Test Button */}\n            <button\n              onClick={() => handleTestProvider(provider.id)}\n              disabled={loading || !testEmail}\n              className='w-full mt-4 px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed text-sm'\n            >\n              {testResults[provider.id]?.testing ? 'Testing...' : 'Test Provider'}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {/* Configuration Modal */}\n      {showConfigModal && selectedProvider && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50'>\n          <div className='bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto'>\n            <div className='p-6 border-b'>\n              <h2 className='text-xl font-bold'>\n                Configure {providers.find(p => p.id === selectedProvider)?.name}\n              </h2>\n              <p className='text-gray-600 mt-1'>\n                Set up your email provider credentials and settings\n              </p>\n            </div>\n\n            <div className='p-6'>\n              {renderConfigurationForm()}\n\n              <div className='bg-yellow-50 border border-yellow-200 rounded-md p-4 mt-6'>\n                <div className='flex'>\n                  <ExclamationTriangleIcon className='h-5 w-5 text-yellow-400 mr-2' />\n                  <div className='text-sm text-yellow-800'>\n                    <p className='font-medium'>Important Security Note</p>\n                    <p className='mt-1'>\n                      In production, these credentials should be stored as environment variables or\n                      in a secure configuration management system. This interface is for\n                      demonstration purposes.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className='p-6 border-t flex items-center justify-between'>\n              <button\n                onClick={() => {\n                  setShowConfigModal(false);\n                  setSelectedProvider(null);\n                }}\n                className='px-4 py-2 text-gray-600 hover:text-gray-800'\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveConfiguration}\n                className='px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\n              >\n                Save Configuration\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Configuration Notice */}\n      <div className='bg-blue-50 border border-blue-200 rounded-lg p-6'>\n        <div className='flex'>\n          <InformationCircleIcon className='h-5 w-5 text-blue-400 mr-3 mt-0.5' />\n          <div className='text-sm text-blue-800'>\n            <p className='font-medium'>Email Provider Configuration</p>\n            <p className='mt-1'>\n              To configure email providers, set the appropriate environment variables in your .env\n              file:\n            </p>\n            <ul className='mt-2 space-y-1 text-xs font-mono'>\n              <li>ÔÇó REACT_APP_SENDGRID_API_KEY=your_sendgrid_api_key</li>\n              <li>ÔÇó REACT_APP_AWS_ACCESS_KEY_ID=your_aws_access_key</li>\n              <li>ÔÇó REACT_APP_MAILGUN_API_KEY=your_mailgun_api_key</li>\n              <li>ÔÇó REACT_APP_POSTMARK_SERVER_TOKEN=your_postmark_token</li>\n            </ul>\n            <p className='mt-2'>\n              Currently using mock provider for development. Configure a real provider for\n              production use.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailProviderSettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailQueueManager.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refreshInterval' is assigned a value but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  ClockIcon,\n  PlayIcon,\n  PauseIcon,\n  ArrowPathIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  CalendarIcon,\n  ChartBarIcon,\n  CogIcon,\n  BoltIcon,\n} from '@heroicons/react/24/outline';\nimport emailQueueService from '@lib/emailQueueService';\nimport { useTranslation } from 'react-i18next';\n\nconst EmailQueueManager = () => {\n  const { t } = useTranslation('email');\n  const [queueStatus, setQueueStatus] = useState(null);\n  const [queueMetrics, setQueueMetrics] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [refreshInterval, setRefreshInterval] = useState(null);\n\n  useEffect(() => {\n    loadQueueData();\n\n    // Auto-refresh every 30 seconds\n    const interval = setInterval(loadQueueData, 30000);\n    setRefreshInterval(interval);\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, []);\n\n  const loadQueueData = async () => {\n    try {\n      const [status, metrics] = await Promise.all([\n        Promise.resolve(emailQueueService.getQueueStatus()),\n        emailQueueService.getQueueMetrics(),\n      ]);\n\n      setQueueStatus(status);\n      setQueueMetrics(metrics.success ? metrics.data : null);\n    } catch (error) {\n      console.error('Error loading queue data:', error);\n    }\n  };\n\n  const handleStartQueue = () => {\n    emailQueueService.startQueue();\n    loadQueueData();\n  };\n\n  const handleStopQueue = () => {\n    emailQueueService.stopQueue();\n    loadQueueData();\n  };\n\n  const handleRetryFailed = async () => {\n    if (!confirm('Retry all failed campaigns?')) return;\n\n    setLoading(true);\n    try {\n      const result = await emailQueueService.retryFailedCampaigns();\n      if (result.success) {\n        alert('Failed campaigns retry initiated');\n        loadQueueData();\n      } else {\n        alert(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleProcessNow = async () => {\n    if (!confirm('Process queue manually now?')) return;\n\n    setLoading(true);\n    try {\n      await emailQueueService.processQueue();\n      alert('Queue processed successfully');\n      loadQueueData();\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusIndicator = (isRunning, isProcessing) => {\n    if (isProcessing) {\n      return (\n        <div className='flex items-center text-blue-600'>\n          <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2'></div>\n          Processing\n        </div>\n      );\n    }\n\n    if (isRunning) {\n      return (\n        <div className='flex items-center text-green-600'>\n          <CheckCircleIcon className='h-4 w-4 mr-2' />\n          Running\n        </div>\n      );\n    }\n\n    return (\n      <div className='flex items-center text-red-600'>\n        <ExclamationTriangleIcon className='h-4 w-4 mr-2' />\n        Stopped\n      </div>\n    );\n  };\n\n  return (\n    <div className='space-y-6 p-6'>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h1 className='text-2xl font-bold flex items-center'>\n            <ClockIcon className='h-6 w-6 mr-2' />\n            Email Queue Manager\n          </h1>\n          <p className='text-gray-600'>Monitor and control scheduled email campaigns</p>\n        </div>\n\n        <div className='flex space-x-3'>\n          <button\n            onClick={() => loadQueueData()}\n            className='px-3 py-2 text-gray-600 hover:text-gray-800 border rounded-lg'\n          >\n            <ArrowPathIcon className='h-4 w-4' />\n          </button>\n\n          {queueStatus?.isRunning ? (\n            <button\n              onClick={handleStopQueue}\n              className='px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center'\n            >\n              <PauseIcon className='h-4 w-4 mr-2' />\n              Stop Queue\n            </button>\n          ) : (\n            <button\n              onClick={handleStartQueue}\n              className='px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center'\n            >\n              <PlayIcon className='h-4 w-4 mr-2' />\n              Start Queue\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Queue Status */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-lg font-medium mb-4'>Queue Status</h2>\n\n        <div className='grid grid-cols-1 md:grid-cols-4 gap-4'>\n          <div className='bg-gray-50 p-4 rounded-lg'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <div className='text-sm text-gray-600'>Status</div>\n                {queueStatus && getStatusIndicator(queueStatus.isRunning, queueStatus.isProcessing)}\n              </div>\n              <CogIcon className='h-8 w-8 text-gray-400' />\n            </div>\n          </div>\n\n          <div className='bg-blue-50 p-4 rounded-lg'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <div className='text-2xl font-bold text-blue-600'>\n                  {queueMetrics?.totalScheduled || 0}\n                </div>\n                <div className='text-sm text-gray-600'>Total Scheduled</div>\n              </div>\n              <CalendarIcon className='h-8 w-8 text-blue-400' />\n            </div>\n          </div>\n\n          <div className='bg-orange-50 p-4 rounded-lg'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <div className='text-2xl font-bold text-orange-600'>\n                  {queueMetrics?.overdue || 0}\n                </div>\n                <div className='text-sm text-gray-600'>Overdue</div>\n              </div>\n              <ExclamationTriangleIcon className='h-8 w-8 text-orange-400' />\n            </div>\n          </div>\n\n          <div className='bg-green-50 p-4 rounded-lg'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <div className='text-2xl font-bold text-green-600'>\n                  {queueStatus?.stats?.processed || 0}\n                </div>\n                <div className='text-sm text-gray-600'>Processed</div>\n              </div>\n              <CheckCircleIcon className='h-8 w-8 text-green-400' />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Queue Actions */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-lg font-medium mb-4'>Queue Actions</h2>\n\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n          <button\n            onClick={handleProcessNow}\n            disabled={loading || queueStatus?.isProcessing}\n            className='p-4 border-2 border-dashed border-blue-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 disabled:opacity-50 disabled:cursor-not-allowed'\n          >\n            <BoltIcon className='h-8 w-8 text-blue-500 mx-auto mb-2' />\n            <div className='font-medium text-blue-700'>Process Now</div>\n            <div className='text-sm text-gray-600'>Manually trigger queue processing</div>\n          </button>\n\n          <button\n            onClick={handleRetryFailed}\n            disabled={loading}\n            className='p-4 border-2 border-dashed border-orange-300 rounded-lg hover:border-orange-500 hover:bg-orange-50 disabled:opacity-50 disabled:cursor-not-allowed'\n          >\n            <ArrowPathIcon className='h-8 w-8 text-orange-500 mx-auto mb-2' />\n            <div className='font-medium text-orange-700'>Retry Failed</div>\n            <div className='text-sm text-gray-600'>Retry all failed campaigns</div>\n          </button>\n\n          <button\n            onClick={() => loadQueueData()}\n            className='p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-500 hover:bg-gray-50'\n          >\n            <ChartBarIcon className='h-8 w-8 text-gray-500 mx-auto mb-2' />\n            <div className='font-medium text-gray-700'>Refresh Data</div>\n            <div className='text-sm text-gray-600'>Update queue statistics</div>\n          </button>\n        </div>\n      </div>\n\n      {/* Next Campaign */}\n      {queueMetrics?.nextCampaign && (\n        <div className='bg-white rounded-lg shadow p-6'>\n          <h2 className='text-lg font-medium mb-4'>Next Scheduled Campaign</h2>\n\n          <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>\n            <div className='flex items-center justify-between'>\n              <div>\n                <h3 className='font-medium text-blue-900'>{queueMetrics.nextCampaign.name}</h3>\n                <p className='text-sm text-blue-700 mt-1'>\n                  Scheduled for: {new Date(queueMetrics.nextCampaign.scheduled_at).toLocaleString()}\n                </p>\n                <p className='text-xs text-blue-600 mt-1'>\n                  Recipients: {queueMetrics.nextCampaign.recipients?.length || 0}\n                </p>\n              </div>\n              <CalendarIcon className='h-8 w-8 text-blue-400' />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Processing Statistics */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-lg font-medium mb-4'>Processing Statistics</h2>\n\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n          <div className='text-center'>\n            <div className='text-2xl font-bold text-green-600'>\n              {queueStatus?.stats?.processed || 0}\n            </div>\n            <div className='text-sm text-gray-600'>Successfully Processed</div>\n          </div>\n\n          <div className='text-center'>\n            <div className='text-2xl font-bold text-red-600'>{queueStatus?.stats?.failed || 0}</div>\n            <div className='text-sm text-gray-600'>Failed</div>\n          </div>\n\n          <div className='text-center'>\n            <div className='text-sm text-gray-600'>Last Processed</div>\n            <div className='font-medium'>\n              {queueStatus?.stats?.lastProcessed\n                ? new Date(queueStatus.stats.lastProcessed).toLocaleString()\n                : 'Never'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* System Information */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-lg font-medium mb-4'>System Information</h2>\n\n        <div className='space-y-3 text-sm'>\n          <div className='flex justify-between'>\n            <span className='text-gray-600'>Queue Processor:</span>\n            <span className={queueStatus?.isRunning ? 'text-green-600' : 'text-red-600'}>\n              {queueStatus?.isRunning ? 'Active' : 'Inactive'}\n            </span>\n          </div>\n\n          <div className='flex justify-between'>\n            <span className='text-gray-600'>Check Interval:</span>\n            <span className='text-gray-900'>60 seconds</span>\n          </div>\n\n          <div className='flex justify-between'>\n            <span className='text-gray-600'>Next Check:</span>\n            <span className='text-gray-900'>\n              {queueStatus?.nextCheck\n                ? new Date(queueStatus.nextCheck).toLocaleTimeString()\n                : 'N/A'}\n            </span>\n          </div>\n\n          <div className='flex justify-between'>\n            <span className='text-gray-600'>Auto-refresh:</span>\n            <span className='text-green-600'>Every 30 seconds</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailQueueManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailSignatureManager.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BuildingOfficeIcon' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  PencilIcon,\n  PlusIcon,\n  TrashIcon,\n  EyeIcon,\n  StarIcon,\n  DocumentDuplicateIcon,\n  SparklesIcon,\n  UserIcon,\n  BuildingOfficeIcon,\n} from '@heroicons/react/24/outline';\nimport { StarIcon as StarIconSolid } from '@heroicons/react/24/solid';\nimport emailSignatureService from '@lib/emailSignatureService';\n\nconst EmailSignatureManager = () => {\n  const [signatures, setSignatures] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showPreviewModal, setShowPreviewModal] = useState(false);\n  const [editingSignature, setEditingSignature] = useState(null);\n  const [previewSignature, setPreviewSignature] = useState(null);\n  const [selectedTemplate, setSelectedTemplate] = useState('professional');\n\n  const [signatureForm, setSignatureForm] = useState({\n    name: '',\n    template_type: 'professional',\n    variables: {\n      name: '',\n      title: '',\n      company: '',\n      email: '',\n      phone: '',\n      website: '',\n    },\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      const [signaturesResult, templatesResult] = await Promise.all([\n        emailSignatureService.getSignatures(),\n        emailSignatureService.getTemplates(),\n      ]);\n\n      if (signaturesResult.success) {\n        setSignatures(signaturesResult.data);\n      }\n\n      if (templatesResult.success) {\n        setTemplates(templatesResult.data);\n      }\n    } catch (error) {\n      console.error('Error loading signature data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateSignature = async () => {\n    if (!signatureForm.name.trim()) {\n      alert('Please enter a signature name');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const template = templates.find(t => t.id === signatureForm.template_type);\n      if (!template) {\n        alert('Invalid template selected');\n        return;\n      }\n\n      const signatureData = {\n        name: signatureForm.name,\n        html_content: template.html,\n        variables: signatureForm.variables,\n        template_type: signatureForm.template_type,\n        is_default: signatures.length === 0, // First signature is default\n      };\n\n      const result = await emailSignatureService.createSignature(signatureData);\n\n      if (result.success) {\n        setSignatures(prev => [...prev, result.data]);\n        resetForm();\n        setShowCreateModal(false);\n      } else {\n        alert(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePreview = signature => {\n    setPreviewSignature(signature);\n    setShowPreviewModal(true);\n  };\n\n  const resetForm = () => {\n    setSignatureForm({\n      name: '',\n      template_type: 'professional',\n      variables: {\n        name: '',\n        title: '',\n        company: '',\n        email: '',\n        phone: '',\n        website: '',\n      },\n    });\n    setEditingSignature(null);\n  };\n\n  const updateFormVariable = (key, value) => {\n    setSignatureForm(prev => ({\n      ...prev,\n      variables: {\n        ...prev.variables,\n        [key]: value,\n      },\n    }));\n  };\n\n  const generatePreviewHtml = () => {\n    if (!selectedTemplate) return '';\n\n    const template = templates.find(t => t.id === selectedTemplate);\n    if (!template) return '';\n\n    return emailSignatureService.generateSignatureHtml(\n      { html_content: template.html, variables: signatureForm.variables },\n      signatureForm.variables,\n    );\n  };\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h2 className='text-xl font-semibold text-gray-900'>Email Signatures</h2>\n          <p className='text-gray-600'>Manage your email signatures and branding</p>\n        </div>\n        <button\n          onClick={() => setShowCreateModal(true)}\n          className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center'\n        >\n          <PlusIcon className='h-4 w-4 mr-2' />\n          New Signature\n        </button>\n      </div>\n\n      {/* Signatures List */}\n      {loading ? (\n        <div className='text-center py-8'>\n          <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto'></div>\n          <p className='mt-2 text-gray-600'>Loading signatures...</p>\n        </div>\n      ) : signatures.length === 0 ? (\n        <div className='text-center py-8 bg-gray-50 rounded-lg'>\n          <SparklesIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n          <h3 className='text-lg font-medium text-gray-900 mb-2'>No signatures yet</h3>\n          <p className='text-gray-600 mb-4'>Create your first email signature to get started</p>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\n          >\n            Create Signature\n          </button>\n        </div>\n      ) : (\n        <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n          {signatures.map(signature => (\n            <div\n              key={signature.id}\n              className='bg-white border rounded-lg p-4 hover:shadow-md transition-shadow'\n            >\n              <div className='flex items-start justify-between mb-3'>\n                <div className='flex-1'>\n                  <div className='flex items-center'>\n                    <h3 className='font-medium text-gray-900'>{signature.name}</h3>\n                    {signature.is_default && (\n                      <StarIconSolid className='h-4 w-4 text-yellow-500 ml-2' />\n                    )}\n                  </div>\n                  <p className='text-sm text-gray-500 capitalize'>\n                    {signature.template_type} template\n                  </p>\n                </div>\n              </div>\n\n              {/* Preview */}\n              <div className='border rounded p-2 mb-3 bg-gray-50 max-h-24 overflow-hidden'>\n                <div\n                  className='text-xs'\n                  dangerouslySetInnerHTML={{\n                    __html: emailSignatureService.generateSignatureHtml(signature),\n                  }}\n                />\n              </div>\n\n              {/* Actions */}\n              <div className='flex items-center justify-between'>\n                <div className='flex space-x-2'>\n                  <button\n                    onClick={() => handlePreview(signature)}\n                    className='p-1 text-gray-400 hover:text-gray-600'\n                    title='Preview'\n                  >\n                    <EyeIcon className='h-4 w-4' />\n                  </button>\n                  <button\n                    onClick={() => {\n                      setEditingSignature(signature);\n                      setSignatureForm({\n                        name: signature.name,\n                        template_type: signature.template_type,\n                        variables: signature.variables,\n                      });\n                      setShowCreateModal(true);\n                    }}\n                    className='p-1 text-gray-400 hover:text-gray-600'\n                    title='Edit'\n                  >\n                    <PencilIcon className='h-4 w-4' />\n                  </button>\n                  <button\n                    onClick={() => {\n                      // Handle duplicate\n                      alert('Duplicate functionality would clone this signature');\n                    }}\n                    className='p-1 text-gray-400 hover:text-gray-600'\n                    title='Duplicate'\n                  >\n                    <DocumentDuplicateIcon className='h-4 w-4' />\n                  </button>\n                </div>\n\n                <div className='flex space-x-2'>\n                  {!signature.is_default && (\n                    <button\n                      onClick={() => {\n                        // Handle set as default\n                        alert('Set as default functionality');\n                      }}\n                      className='p-1 text-gray-400 hover:text-yellow-500'\n                      title='Set as default'\n                    >\n                      <StarIcon className='h-4 w-4' />\n                    </button>\n                  )}\n                  <button\n                    onClick={() => {\n                      if (confirm('Delete this signature?')) {\n                        // Handle delete\n                        alert('Delete functionality would remove this signature');\n                      }\n                    }}\n                    className='p-1 text-red-400 hover:text-red-600'\n                    title='Delete'\n                  >\n                    <TrashIcon className='h-4 w-4' />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Create/Edit Modal */}\n      {showCreateModal && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg shadow-xl max-w-4xl w-full m-4 max-h-[90vh] overflow-y-auto'>\n            <div className='p-6 border-b'>\n              <h3 className='text-lg font-medium'>\n                {editingSignature ? 'Edit Signature' : 'Create New Signature'}\n              </h3>\n            </div>\n\n            <div className='p-6 grid grid-cols-1 lg:grid-cols-2 gap-6'>\n              {/* Form */}\n              <div className='space-y-4'>\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    Signature Name\n                  </label>\n                  <input\n                    type='text'\n                    value={signatureForm.name}\n                    onChange={e => setSignatureForm(prev => ({ ...prev, name: e.target.value }))}\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    placeholder='My Professional Signature'\n                  />\n                </div>\n\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>Template</label>\n                  <select\n                    value={signatureForm.template_type}\n                    onChange={e => {\n                      setSignatureForm(prev => ({ ...prev, template_type: e.target.value }));\n                      setSelectedTemplate(e.target.value);\n                    }}\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  >\n                    {templates.map(template => (\n                      <option key={template.id} value={template.id}>\n                        {template.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Variables */}\n                <div className='space-y-3'>\n                  <h4 className='font-medium text-gray-900'>Signature Information</h4>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      Full Name\n                    </label>\n                    <input\n                      type='text'\n                      value={signatureForm.variables.name}\n                      onChange={e => updateFormVariable('name', e.target.value)}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='John Doe'\n                    />\n                  </div>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      Job Title\n                    </label>\n                    <input\n                      type='text'\n                      value={signatureForm.variables.title}\n                      onChange={e => updateFormVariable('title', e.target.value)}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='Senior Developer'\n                    />\n                  </div>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>Company</label>\n                    <input\n                      type='text'\n                      value={signatureForm.variables.company}\n                      onChange={e => updateFormVariable('company', e.target.value)}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='Acme Corporation'\n                    />\n                  </div>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>Email</label>\n                    <input\n                      type='email'\n                      value={signatureForm.variables.email}\n                      onChange={e => updateFormVariable('email', e.target.value)}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='john@acme.com'\n                    />\n                  </div>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>Phone</label>\n                    <input\n                      type='text'\n                      value={signatureForm.variables.phone}\n                      onChange={e => updateFormVariable('phone', e.target.value)}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='+1 (555) 123-4567'\n                    />\n                  </div>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>Website</label>\n                    <input\n                      type='url'\n                      value={signatureForm.variables.website}\n                      onChange={e => updateFormVariable('website', e.target.value)}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='https://acme.com'\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Preview */}\n              <div className='space-y-4'>\n                <h4 className='font-medium text-gray-900'>Preview</h4>\n                <div className='border rounded-lg p-4 bg-gray-50 min-h-[300px]'>\n                  <div dangerouslySetInnerHTML={{ __html: generatePreviewHtml() }} />\n                </div>\n              </div>\n            </div>\n\n            <div className='p-6 border-t flex items-center justify-between'>\n              <button\n                onClick={() => {\n                  setShowCreateModal(false);\n                  resetForm();\n                }}\n                className='px-4 py-2 text-gray-600 hover:text-gray-800'\n              >\n                Cancel\n              </button>\n\n              <button\n                onClick={handleCreateSignature}\n                disabled={loading || !signatureForm.name.trim()}\n                className='px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed'\n              >\n                {loading ? 'Saving...' : editingSignature ? 'Update Signature' : 'Create Signature'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Preview Modal */}\n      {showPreviewModal && previewSignature && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg shadow-xl max-w-2xl w-full m-4'>\n            <div className='p-6 border-b'>\n              <h3 className='text-lg font-medium'>Signature Preview</h3>\n              <p className='text-gray-600'>{previewSignature.name}</p>\n            </div>\n\n            <div className='p-6'>\n              <div className='border rounded-lg p-4 bg-gray-50'>\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: emailSignatureService.generateSignatureHtml(previewSignature),\n                  }}\n                />\n              </div>\n            </div>\n\n            <div className='p-6 border-t flex justify-end'>\n              <button\n                onClick={() => setShowPreviewModal(false)}\n                className='px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700'\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmailSignatureManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\email\\EmailTemplateEditor.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlusIcon' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrashIcon' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":20,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":362,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click &quot;Variables\" to insert placeholders.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click &ldquo;Variables\" to insert placeholders.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click &#34;Variables\" to insert placeholders.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click &rdquo;Variables\" to insert placeholders.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":362,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click \"Variables&quot; to insert placeholders.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click \"Variables&ldquo; to insert placeholders.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click \"Variables&#34; to insert placeholders.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12259,12374],"text":"\n                  Use the toolbar to format your email. Click \"Variables&rdquo; to insert placeholders.\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {\n  DocumentTextIcon,\n  EyeIcon,\n  CodeBracketIcon,\n  PlusIcon,\n  TrashIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  SparklesIcon,\n  CloudArrowUpIcon,\n} from '@heroicons/react/24/outline';\nimport emailTemplateService from '@lib/emailTemplateService';\nimport EmailAttachmentManager from './EmailAttachmentManager';\nimport { useTranslation } from 'react-i18next';\n\nconst EmailTemplateEditor = ({ template = null, onSave, onCancel }) => {\n  const { t } = useTranslation('email');\n  const quillRef = useRef(null);\n\n  const [formData, setFormData] = useState({\n    id: null,\n    name: '',\n    description: '',\n    subject: '',\n    htmlContent: '',\n    category: 'custom',\n    variables: [],\n    attachments: [],\n  });\n\n  const [previewMode, setPreviewMode] = useState(false);\n  const [showVariables, setShowVariables] = useState(false);\n  const [validation, setValidation] = useState({ isValid: true, issues: [] });\n  const [loading, setLoading] = useState(false);\n  const [availableVariables] = useState(emailTemplateService.getAvailableVariables());\n  const [testVariables, setTestVariables] = useState({});\n\n  useEffect(() => {\n    if (template) {\n      setFormData({\n        id: template.id || null,\n        name: template.name || '',\n        description: template.description || '',\n        subject: template.subject || '',\n        htmlContent: template.html_content || template.html || '',\n        category: template.category || 'custom',\n        variables: template.variables || [],\n      });\n    }\n  }, [template]);\n\n  useEffect(() => {\n    // Initialize test variables with sample data\n    const testData = {};\n    availableVariables.forEach(variable => {\n      testData[variable.name] = getSampleData(variable.name);\n    });\n    setTestVariables(testData);\n  }, [availableVariables]);\n\n  useEffect(() => {\n    // Validate template whenever content changes\n    if (formData.htmlContent) {\n      const validationResult = emailTemplateService.validateTemplate(formData.htmlContent);\n      setValidation(validationResult);\n    }\n  }, [formData.htmlContent]);\n\n  const getSampleData = variable => {\n    const samples = {\n      client_name: 'John Smith',\n      company_name: 'Nexa Manager',\n      company_email: 'info@nexamanager.com',\n      company_phone: '+1 (555) 123-4567',\n      invoice_number: 'INV-2024-001',\n      invoice_date: '2024-01-15',\n      due_date: '2024-02-15',\n      total_amount: 'Ôé¼1,250.00',\n      payment_amount: 'Ôé¼1,250.00',\n      payment_date: '2024-01-20',\n      payment_method: 'Bank Transfer',\n      days_overdue: '5',\n      quote_number: 'QUO-2024-001',\n      issue_date: '2024-01-15',\n      expiry_date: '2024-02-15',\n      content: 'This is sample content for your email template.',\n      subscriber_name: 'Jane Doe',\n      unsubscribe_link: 'https://nexamanager.com/unsubscribe',\n    };\n    return samples[variable] || `{${variable}}`;\n  };\n\n  const quillModules = {\n    toolbar: [\n      [{ header: [1, 2, 3, false] }],\n      ['bold', 'italic', 'underline', 'strike'],\n      [{ color: [] }, { background: [] }],\n      [{ align: [] }],\n      ['blockquote', 'code-block'],\n      [{ list: 'ordered' }, { list: 'bullet' }],\n      ['link', 'image'],\n      [{ indent: '-1' }, { indent: '+1' }],\n      ['clean'],\n    ],\n    clipboard: {\n      matchVisual: false,\n    },\n  };\n\n  const quillFormats = [\n    'header',\n    'bold',\n    'italic',\n    'underline',\n    'strike',\n    'color',\n    'background',\n    'align',\n    'blockquote',\n    'code-block',\n    'list',\n    'bullet',\n    'link',\n    'image',\n    'indent',\n  ];\n\n  const handleContentChange = content => {\n    setFormData(prev => ({\n      ...prev,\n      htmlContent: content,\n    }));\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const insertVariable = variable => {\n    const quill = quillRef.current?.getEditor();\n    if (quill) {\n      const range = quill.getSelection();\n      const placeholder = `{${variable.name}}`;\n      quill.insertText(range ? range.index : 0, placeholder);\n    }\n  };\n\n  const loadPredefinedTemplate = templateKey => {\n    const predefined = emailTemplateService.predefinedTemplates[templateKey];\n    if (predefined) {\n      setFormData(prev => ({\n        ...prev,\n        name: predefined.name,\n        description: predefined.description,\n        htmlContent: predefined.html,\n        variables: predefined.variables,\n      }));\n    }\n  };\n\n  const renderPreview = () => {\n    const rendered = emailTemplateService.renderTemplate(\n      {\n        subject: formData.subject,\n        html_content: formData.htmlContent,\n      },\n      testVariables,\n    );\n\n    if (rendered.success) {\n      return rendered.data;\n    }\n    return { subject: formData.subject, htmlContent: formData.htmlContent };\n  };\n\n  const handleSave = async () => {\n    if (!formData.name.trim()) {\n      alert('Please enter a template name');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await emailTemplateService.saveTemplate(formData);\n      if (result.success) {\n        onSave?.(result.data);\n      } else {\n        alert(`Error saving template: ${result.error}`);\n      }\n    } catch (error) {\n      alert(`Error saving template: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const previewData = renderPreview();\n\n  return (\n    <div className='max-w-6xl mx-auto p-6 space-y-6'>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h2 className='text-2xl font-bold flex items-center'>\n            <DocumentTextIcon className='h-6 w-6 mr-2' />\n            {template?.id ? 'Edit Email Template' : 'Create Email Template'}\n          </h2>\n          <p className='text-gray-600'>\n            Design professional email templates with variables and WYSIWYG editing\n          </p>\n        </div>\n        <div className='flex space-x-2'>\n          <button\n            onClick={() => setPreviewMode(!previewMode)}\n            className={`px-4 py-2 rounded-lg flex items-center ${\n              previewMode ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'\n            }`}\n          >\n            <EyeIcon className='h-4 w-4 mr-2' />\n            Preview\n          </button>\n          <button\n            onClick={() => setShowVariables(!showVariables)}\n            className={`px-4 py-2 rounded-lg flex items-center ${\n              showVariables ? 'bg-green-600 text-white' : 'bg-gray-100 text-gray-700'\n            }`}\n          >\n            <CodeBracketIcon className='h-4 w-4 mr-2' />\n            Variables\n          </button>\n        </div>\n      </div>\n\n      <div className='grid grid-cols-1 lg:grid-cols-4 gap-6'>\n        {/* Left Panel - Template Info */}\n        <div className='lg:col-span-1 space-y-4'>\n          {/* Basic Info */}\n          <div className='bg-white rounded-lg border p-4 space-y-4'>\n            <h3 className='font-semibold text-gray-900'>Template Information</h3>\n\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>Name *</label>\n              <input\n                type='text'\n                value={formData.name}\n                onChange={e => handleInputChange('name', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='Template name'\n              />\n            </div>\n\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>Description</label>\n              <textarea\n                value={formData.description}\n                onChange={e => handleInputChange('description', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                rows='3'\n                placeholder='Template description'\n              />\n            </div>\n\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>Subject Line</label>\n              <input\n                type='text'\n                value={formData.subject}\n                onChange={e => handleInputChange('subject', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='Email subject with {variables}'\n              />\n            </div>\n\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-1'>Category</label>\n              <select\n                value={formData.category}\n                onChange={e => handleInputChange('category', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              >\n                <option value='custom'>Custom</option>\n                <option value='invoice'>Invoice</option>\n                <option value='reminder'>Reminder</option>\n                <option value='newsletter'>Newsletter</option>\n                <option value='marketing'>Marketing</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Quick Templates */}\n          <div className='bg-white rounded-lg border p-4 space-y-3'>\n            <h3 className='font-semibold text-gray-900 flex items-center'>\n              <SparklesIcon className='h-4 w-4 mr-2' />\n              Quick Start\n            </h3>\n            {Object.entries(emailTemplateService.predefinedTemplates).map(([key, template]) => (\n              <button\n                key={key}\n                onClick={() => loadPredefinedTemplate(key)}\n                className='w-full text-left px-3 py-2 bg-gray-50 hover:bg-gray-100 rounded-md transition-colors'\n              >\n                <div className='font-medium text-sm'>{template.name}</div>\n                <div className='text-xs text-gray-500'>{template.description}</div>\n              </button>\n            ))}\n          </div>\n\n          {/* Attachments */}\n          <div className='bg-white rounded-lg border p-4 space-y-3'>\n            <h3 className='font-semibold text-gray-900 flex items-center'>\n              <CloudArrowUpIcon className='h-4 w-4 mr-2' />\n              Template Attachments\n            </h3>\n            <p className='text-sm text-gray-500'>\n              Add default attachments that will be included with this template\n            </p>\n            <EmailAttachmentManager\n              attachments={formData.attachments}\n              onAttachmentsChange={attachments => setFormData(prev => ({ ...prev, attachments }))}\n              maxFiles={5}\n            />\n          </div>\n\n          {/* Validation */}\n          {validation.issues.length > 0 && (\n            <div className='bg-yellow-50 border border-yellow-200 rounded-lg p-4'>\n              <h3 className='font-semibold text-yellow-800 flex items-center mb-2'>\n                <ExclamationTriangleIcon className='h-4 w-4 mr-2' />\n                Email Compatibility Issues\n              </h3>\n              <ul className='text-sm text-yellow-700 space-y-1'>\n                {validation.issues.map((issue, index) => (\n                  <li key={index}>ÔÇó {issue}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {validation.isValid && formData.htmlContent && (\n            <div className='bg-green-50 border border-green-200 rounded-lg p-4'>\n              <div className='font-semibold text-green-800 flex items-center'>\n                <CheckCircleIcon className='h-4 w-4 mr-2' />\n                Template is email-compatible\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Main Editor */}\n        <div className='lg:col-span-3'>\n          {!previewMode ? (\n            <div className='bg-white rounded-lg border'>\n              <div className='border-b p-4'>\n                <h3 className='font-semibold text-gray-900'>Email Content Editor</h3>\n                <p className='text-sm text-gray-500'>\n                  Use the toolbar to format your email. Click \"Variables\" to insert placeholders.\n                </p>\n              </div>\n              <div className='p-0'>\n                <ReactQuill\n                  ref={quillRef}\n                  value={formData.htmlContent}\n                  onChange={handleContentChange}\n                  modules={quillModules}\n                  formats={quillFormats}\n                  style={{ height: '500px' }}\n                  placeholder='Start writing your email template...'\n                />\n              </div>\n            </div>\n          ) : (\n            <div className='bg-white rounded-lg border'>\n              <div className='border-b p-4 flex items-center justify-between'>\n                <div>\n                  <h3 className='font-semibold text-gray-900'>Email Preview</h3>\n                  <p className='text-sm text-gray-500'>Preview with sample data</p>\n                </div>\n                <div className='text-sm text-gray-500'>\n                  Subject: {previewData.subject || 'No subject'}\n                </div>\n              </div>\n              <div className='p-6 bg-gray-50'>\n                <div\n                  className='bg-white border rounded-lg p-4 max-w-2xl mx-auto'\n                  dangerouslySetInnerHTML={{ __html: previewData.htmlContent }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Variables Panel */}\n      {showVariables && (\n        <div className='bg-white rounded-lg border p-4'>\n          <h3 className='font-semibold text-gray-900 mb-4 flex items-center'>\n            <CodeBracketIcon className='h-4 w-4 mr-2' />\n            Available Variables\n          </h3>\n          <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3'>\n            {availableVariables.map(variable => (\n              <button\n                key={variable.name}\n                onClick={() => insertVariable(variable)}\n                className='text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group'\n              >\n                <div className='font-mono text-sm text-blue-600 font-medium'>\n                  {variable.placeholder}\n                </div>\n                <div className='text-xs text-gray-500 mt-1'>{variable.description}</div>\n              </button>\n            ))}\n          </div>\n          <div className='mt-4 p-3 bg-blue-50 rounded-lg'>\n            <p className='text-sm text-blue-800'>\n              <strong>Tip:</strong> Click any variable to insert it at your cursor position.\n              Variables will be replaced with actual data when the email is sent.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className='flex items-center justify-between border-t pt-4'>\n        <button\n          onClick={onCancel}\n          className='px-6 py-2 text-gray-600 hover:text-gray-800 transition-colors'\n        >\n          Cancel\n        </button>\n        <div className='flex space-x-3'>\n          <button\n            onClick={handleSave}\n            disabled={loading || !formData.name.trim()}\n            className='px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center'\n          >\n            {loading ? (\n              <>\n                <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2'></div>\n                Saving...\n              </>\n            ) : (\n              <>\n                <CloudArrowUpIcon className='h-4 w-4 mr-2' />\n                Save Template\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailTemplateEditor;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\DigitalSignature.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\FinancialForecast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\InvoiceFormNew.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":4,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'template' is assigned a value but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateInvoiceNumber' and 'loadInitialData'. Either include them or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, isEditMode, loadInitialData, generateInvoiceNumber]","fix":{"range":[2135,2157],"text":"[user?.id, isEditMode, loadInitialData, generateInvoiceNumber]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { X, Eye, Download, Mail, Plus, Trash2, Calendar } from 'lucide-react';\nimport InvoiceService from '@lib/invoiceService';\nimport ClientService from '@lib/clientService';\nimport Logger from '@utils/Logger';\nimport { getUserIdForUuidTables } from '@utils/userIdConverter';\n\n/**\n * InvoiceForm Component\n * Comprehensive form for creating and editing invoices with the same design as QuoteForm\n */\nconst InvoiceForm = ({\n  invoice = null,\n  client = null,\n  template = null,\n  isEditMode = false,\n  onSave,\n  onCancel,\n  onError,\n  className = '',\n}) => {\n  const { t } = useTranslation('invoices');\n  const { user } = useUser();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [clients, setClients] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [pdfTemplates, setPdfTemplates] = useState([]);\n\n  // Default item structure\n  function getDefaultItem() {\n    return {\n      id: Date.now() + Math.random(),\n      description: '',\n      quantity: 1,\n      unit_price: 0,\n      tax_rate: 22,\n      total: 0,\n      sort_order: 1,\n    };\n  }\n\n  // Form state\n  const [formData, setFormData] = useState({\n    client_id: '',\n    template_id: '',\n    pdf_template_id: 'default',\n    invoice_number: '',\n    title: '',\n    description: '',\n    issue_date: new Date().toISOString().split('T')[0],\n    due_date: '',\n    subtotal: 0,\n    tax_rate: 22,\n    tax_amount: 0,\n    discount_percentage: 0,\n    discount_amount: 0,\n    total_amount: 0,\n    currency: 'EUR',\n    status: 'draft',\n    priority: 'medium',\n    notes: '',\n    internal_notes: '',\n    terms_and_conditions: '',\n    payment_terms: '30 days',\n    items: [getDefaultItem()],\n  });\n\n  // Load data on component mount\n  useEffect(() => {\n    if (user?.id) {\n      loadInitialData();\n      if (!isEditMode) {\n        generateInvoiceNumber();\n      }\n    }\n  }, [user?.id, isEditMode]);\n\n  // Pre-fill client if provided\n  useEffect(() => {\n    if (client) {\n      setFormData(prev => ({\n        ...prev,\n        client_id: client.id,\n      }));\n    }\n  }, [client]);\n\n  // Pre-fill invoice data if editing\n  useEffect(() => {\n    if (isEditMode && invoice) {\n      setFormData({\n        ...invoice,\n        issue_date: invoice.issue_date?.split('T')[0] || new Date().toISOString().split('T')[0],\n        due_date: invoice.due_date?.split('T')[0] || '',\n        items: invoice.items?.length > 0 ? invoice.items : [getDefaultItem()],\n      });\n    }\n  }, [isEditMode, invoice]);\n\n  const loadInitialData = async () => {\n    try {\n      setIsLoading(true);\n      const dbUserId = getUserIdForUuidTables(user.id);\n\n      // Load clients\n      Logger.info('Loading clients for user:', dbUserId);\n      const clientsResult = await ClientService.getClients(dbUserId);\n      Logger.info('Clients result:', clientsResult);\n      if (clientsResult.success) {\n        setClients(clientsResult.clients);\n        Logger.info('Clients loaded:', clientsResult.clients.length);\n      } else {\n        Logger.error('Failed to load clients:', clientsResult.error);\n      }\n\n      // Load templates\n      setTemplates([\n        { id: 'standard', name: 'Standard Invoice', description: 'Standard invoice template' },\n        { id: 'service', name: 'Service Invoice', description: 'Service-based invoice template' },\n        { id: 'product', name: 'Product Invoice', description: 'Product-based invoice template' },\n      ]);\n\n      // Load PDF templates\n      setPdfTemplates([\n        { id: 'default', name: 'Default Template', description: 'Standard PDF template' },\n        { id: 'modern', name: 'Modern Template', description: 'Modern design template' },\n        { id: 'classic', name: 'Classic Template', description: 'Classic business template' },\n      ]);\n    } catch (error) {\n      Logger.error('Failed to load initial data:', error);\n      onError?.(error.message || t('errors.loadFailed'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateInvoiceNumber = async () => {\n    try {\n      if (!isEditMode && user?.id) {\n        const dbUserId = getUserIdForUuidTables(user.id);\n        const invoiceNumber = await InvoiceService.generateInvoiceNumber(dbUserId);\n        setFormData(prev => ({\n          ...prev,\n          invoice_number: invoiceNumber,\n        }));\n      }\n    } catch (error) {\n      Logger.error('Failed to generate invoice number:', error);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear validation error for this field\n    if (validationErrors[field]) {\n      setValidationErrors(prev => ({\n        ...prev,\n        [field]: null,\n      }));\n    }\n\n    // Auto-calculate due date when issue date changes\n    if (field === 'issue_date' && value) {\n      const issueDate = new Date(value);\n      const dueDate = new Date(issueDate);\n      dueDate.setDate(dueDate.getDate() + 30);\n      setFormData(prev => ({\n        ...prev,\n        due_date: dueDate.toISOString().split('T')[0],\n      }));\n    }\n  };\n\n  const handleClientChange = clientId => {\n    const selectedClient = clients.find(c => c.id === clientId);\n    setFormData(prev => ({\n      ...prev,\n      client_id: clientId,\n      currency: selectedClient?.currency || 'EUR',\n    }));\n  };\n\n  const addItem = () => {\n    const newItem = {\n      ...getDefaultItem(),\n      id: Date.now() + Math.random(),\n      sort_order: formData.items.length + 1,\n    };\n\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, newItem],\n    }));\n  };\n\n  const removeItem = itemId => {\n    if (formData.items.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        items: prev.items.filter(item => item.id !== itemId),\n      }));\n    }\n  };\n\n  const updateItem = (itemId, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.map(item => {\n        if (item.id === itemId) {\n          const updatedItem = { ...item, [field]: value };\n\n          if (field === 'quantity' || field === 'unit_price') {\n            updatedItem.total = (updatedItem.quantity || 0) * (updatedItem.unit_price || 0);\n          }\n\n          return updatedItem;\n        }\n        return item;\n      }),\n    }));\n  };\n\n  // Calculate totals\n  useEffect(() => {\n    const subtotal = formData.items.reduce((sum, item) => sum + (item.total || 0), 0);\n    const discountAmount = (subtotal * (formData.discount_percentage || 0)) / 100;\n    const taxableAmount = subtotal - discountAmount;\n    const taxAmount = (taxableAmount * (formData.tax_rate || 0)) / 100;\n    const total = taxableAmount + taxAmount;\n\n    setFormData(prev => ({\n      ...prev,\n      subtotal,\n      discount_amount: discountAmount,\n      tax_amount: taxAmount,\n      total_amount: total,\n    }));\n  }, [formData.items, formData.discount_percentage, formData.tax_rate]);\n\n  const validateForm = () => {\n    const errors = {};\n\n    if (!formData.client_id) errors.client_id = t('form.clientRequired');\n    if (!formData.title) errors.title = t('form.titleRequired');\n    if (!formData.issue_date) errors.issue_date = t('form.issueDateRequired');\n    if (!formData.due_date) errors.due_date = t('form.dueDateRequired');\n    if (formData.items.length === 0) errors.items = t('form.atLeastOneItemRequired');\n\n    formData.items.forEach((item, index) => {\n      if (!item.description)\n        errors[`item_${index}_description`] = t('form.itemDescriptionRequired');\n      if (!item.quantity || item.quantity <= 0)\n        errors[`item_${index}_quantity`] = t('form.validQuantityRequired');\n      if (!item.unit_price || item.unit_price <= 0)\n        errors[`item_${index}_unit_price`] = t('form.validUnitPriceRequired');\n    });\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSave = async (asDraft = false) => {\n    try {\n      setIsSaving(true);\n\n      const dataToSave = {\n        ...formData,\n        status: asDraft ? 'draft' : formData.status,\n        user_id: getUserIdForUuidTables(user.id),\n      };\n\n      if (!asDraft && !validateForm()) {\n        return;\n      }\n\n      let result;\n      if (isEditMode && invoice) {\n        result = await InvoiceService.updateInvoice(\n          invoice.id,\n          dataToSave,\n          dataToSave.items,\n          dataToSave.user_id,\n        );\n      } else {\n        result = await InvoiceService.createInvoice(\n          dataToSave,\n          dataToSave.items,\n          dataToSave.user_id,\n        );\n      }\n\n      onSave?.(result);\n    } catch (error) {\n      Logger.error('Failed to save invoice:', error);\n      onError?.(error.message || t('errors.saveFailed'));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className='flex items-center justify-center p-8'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg ${className}`}>\n      {/* Header */}\n      <div className='border-b border-gray-200 p-6'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <h2 className='text-xl font-semibold text-gray-900'>\n              {isEditMode ? t('form.editInvoice') : t('form.createInvoice')}\n            </h2>\n            <p className='text-sm text-gray-600 mt-1'>\n              {isEditMode ? t('form.editDescription') : t('form.createDescription')}\n            </p>\n          </div>\n          <div className='flex items-center space-x-2'>\n            {formData.invoice_number && (\n              <span className='px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full'>\n                {formData.invoice_number}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className='p-6 space-y-6'>\n        {/* Basic Information Row */}\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Client Selection */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.client')} <span className='text-red-500'>*</span>\n            </label>\n            <select\n              value={formData.client_id}\n              onChange={e => handleClientChange(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.client_id ? 'border-red-500' : 'border-gray-300'\n              }`}\n            >\n              <option value=''>{t('form.selectClient')}</option>\n              {clients.map(client => (\n                <option key={client.id} value={client.id}>\n                  {client.full_name || client.company_name}\n                </option>\n              ))}\n            </select>\n            {validationErrors.client_id && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.client_id}</p>\n            )}\n          </div>\n\n          {/* Template Selection */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.template')}\n            </label>\n            <select\n              value={formData.template_id}\n              onChange={e => handleInputChange('template_id', e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            >\n              <option value=''>{t('form.selectTemplate')}</option>\n              {templates.map(template => (\n                <option key={template.id} value={template.id}>\n                  {t(`templates.${template.id}`, template.name)}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Title and Category Row */}\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Title */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.title')} <span className='text-red-500'>*</span>\n            </label>\n            <input\n              type='text'\n              value={formData.title}\n              onChange={e => handleInputChange('title', e.target.value)}\n              placeholder={t('form.titlePlaceholder')}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.title ? 'border-red-500' : 'border-gray-300'\n              }`}\n            />\n            {validationErrors.title && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.title}</p>\n            )}\n          </div>\n\n          {/* Category */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.category')}\n            </label>\n            <input\n              type='text'\n              value={formData.category || ''}\n              onChange={e => handleInputChange('category', e.target.value)}\n              placeholder={t('form.categoryPlaceholder')}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            />\n          </div>\n        </div>\n\n        {/* PDF Settings */}\n        <div className='border border-gray-200 rounded-lg p-4'>\n          <div className='flex items-center mb-4'>\n            <Eye className='w-5 h-5 text-gray-600 mr-2' />\n            <h3 className='text-lg font-medium text-gray-900'>{t('form.pdfSettings')}</h3>\n          </div>\n\n          <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n            {/* PDF Template */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.pdfTemplate')}\n              </label>\n              <select\n                value={formData.pdf_template_id}\n                onChange={e => handleInputChange('pdf_template_id', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              >\n                {pdfTemplates.map(template => (\n                  <option key={template.id} value={template.id}>\n                    {t(`pdfTemplates.${template.id}`, template.name)}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* PDF Actions */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.pdfActions')}\n              </label>\n              <div className='flex space-x-2'>\n                <button\n                  type='button'\n                  disabled={!formData.title || !formData.client_id}\n                  className='flex items-center px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed'\n                >\n                  <Eye className='w-4 h-4 mr-1' />\n                  {t('form.preview')}\n                </button>\n                <button\n                  type='button'\n                  disabled={!formData.title || !formData.client_id}\n                  className='flex items-center px-3 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 disabled:opacity-50 disabled:cursor-not-allowed'\n                >\n                  <Download className='w-4 h-4 mr-1' />\n                  {t('form.download')}\n                </button>\n                <button\n                  type='button'\n                  disabled={!formData.title || !formData.client_id}\n                  className='flex items-center px-3 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 disabled:opacity-50 disabled:cursor-not-allowed'\n                >\n                  <Mail className='w-4 h-4 mr-1' />\n                  {t('form.email')}\n                </button>\n              </div>\n              {(!formData.title || !formData.client_id) && (\n                <p className='text-sm text-gray-500 mt-1'>{t('form.pdfActionsRequire')}</p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className='block text-sm font-medium text-gray-700 mb-2'>\n            {t('form.description')}\n          </label>\n          <textarea\n            value={formData.description}\n            onChange={e => handleInputChange('description', e.target.value)}\n            placeholder={t('form.descriptionPlaceholder')}\n            rows={4}\n            className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n          />\n        </div>\n\n        {/* Dates Row */}\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6 mb-6'>\n          <div>\n            <label\n              htmlFor='issue_date'\n              className='block text-sm font-medium text-gray-700 mb-1 required'\n            >\n              {t('form.issue_date')}\n            </label>\n            <div className='relative'>\n              <input\n                type='date'\n                id='issue_date'\n                value={formData.issue_date}\n                onChange={e => handleInputChange('issue_date', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${validationErrors.issue_date ? 'border-red-500' : 'border-gray-300'}`}\n                required\n              />\n            </div>\n            {validationErrors.issue_date && (\n              <p className='text-red-500 text-xs mt-1'>{validationErrors.issue_date}</p>\n            )}\n          </div>\n          <div>\n            <label htmlFor='due_date' className='block text-sm font-medium text-gray-700 mb-1'>\n              {t('form.due_date')}\n            </label>\n            <div className='relative'>\n              <input\n                type='date'\n                id='due_date'\n                value={formData.due_date}\n                onChange={e => handleInputChange('due_date', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Items Section */}\n        <div className='border border-gray-200 rounded-lg p-4'>\n          <div className='flex items-center justify-between mb-4'>\n            <h3 className='text-lg font-medium text-gray-900'>{t('form.items')}</h3>\n            <button\n              type='button'\n              onClick={addItem}\n              className='flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\n            >\n              <Plus className='w-4 h-4 mr-1' />\n              {t('form.addItem')}\n            </button>\n          </div>\n\n          <div className='space-y-4'>\n            {formData.items.map((item, index) => (\n              <div\n                key={item.id}\n                className='grid grid-cols-12 gap-4 items-end p-4 bg-gray-50 rounded-lg'\n              >\n                {/* Description */}\n                <div className='col-span-6'>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('form.itemDescription')}\n                  </label>\n                  <input\n                    type='text'\n                    value={item.description}\n                    onChange={e => updateItem(item.id, 'description', e.target.value)}\n                    placeholder={t('form.itemDescriptionPlaceholder')}\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                      validationErrors[`item_${index}_description`]\n                        ? 'border-red-500'\n                        : 'border-gray-300'\n                    }`}\n                  />\n                </div>\n\n                {/* Quantity */}\n                <div className='col-span-2'>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('form.quantity')}\n                  </label>\n                  <input\n                    type='number'\n                    value={item.quantity}\n                    onChange={e => updateItem(item.id, 'quantity', parseFloat(e.target.value) || 0)}\n                    min='0'\n                    step='0.01'\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                      validationErrors[`item_${index}_quantity`]\n                        ? 'border-red-500'\n                        : 'border-gray-300'\n                    }`}\n                  />\n                </div>\n\n                {/* Unit Price */}\n                <div className='col-span-2'>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('form.unitPrice')}\n                  </label>\n                  <input\n                    type='number'\n                    value={item.unit_price}\n                    onChange={e =>\n                      updateItem(item.id, 'unit_price', parseFloat(e.target.value) || 0)\n                    }\n                    min='0'\n                    step='0.01'\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                      validationErrors[`item_${index}_unit_price`]\n                        ? 'border-red-500'\n                        : 'border-gray-300'\n                    }`}\n                  />\n                </div>\n\n                {/* Total */}\n                <div className='col-span-2'>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('form.total')}\n                  </label>\n                  <input\n                    type='text'\n                    value={`Ôé¼{(item.total || 0).toFixed(2)}`}\n                    readOnly\n                    className='w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 text-gray-700'\n                  />\n                </div>\n\n                {/* Remove Button */}\n                <div className='col-span-12 mt-2 flex justify-end'>\n                  <button\n                    type='button'\n                    onClick={() => removeItem(item.id)}\n                    disabled={formData.items.length === 1}\n                    className='p-2 text-red-600 hover:bg-red-50 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed'\n                  >\n                    <Trash2 className='w-4 h-4' />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Financial Summary */}\n          <div className='bg-gray-50 rounded-lg p-4 mt-6'>\n            <h3 className='text-lg font-medium text-gray-900 mb-4'>\n              {t('form.financialSummary', 'Financial Summary')}\n            </h3>\n\n            <div className='grid grid-cols-1 md:grid-cols-3 gap-4 mb-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>\n                  {t('form.globalDiscount', 'Global Discount')} (%)\n                </label>\n                <input\n                  type='number'\n                  value={formData.discount_percentage}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      discount_percentage: parseFloat(e.target.value) || 0,\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  min='0'\n                  max='100'\n                  step='0.01'\n                />\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>\n                  {t('form.taxRate', 'Aliquota IVA')} (%)\n                </label>\n                <input\n                  type='number'\n                  value={formData.tax_rate}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, tax_rate: parseFloat(e.target.value) || 0 }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  min='0'\n                  max='100'\n                  step='0.01'\n                />\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>\n                  {t('form.currency', 'Currency')}\n                </label>\n                <select\n                  value={formData.currency}\n                  onChange={e => setFormData(prev => ({ ...prev, currency: e.target.value }))}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                >\n                  <option value='EUR'>EUR (Ôé¼)</option>\n                  <option value='USD'>USD ($)</option>\n                  <option value='GBP'>GBP (┬ú)</option>\n                </select>\n              </div>\n            </div>\n\n            <div className='border-t border-gray-200 pt-4 space-y-2'>\n              <div className='flex justify-between text-sm'>\n                <span className='text-gray-600'>{t('form.subtotal')}:</span>\n                <span className='font-medium'>\n                  {formData.currency} {formData.subtotal.toFixed(2)}\n                </span>\n              </div>\n              {formData.discount_percentage > 0 && (\n                <div className='flex justify-between text-sm'>\n                  <span className='text-gray-600'>\n                    {t('form.discount')} ({formData.discount_percentage}%):\n                  </span>\n                  <span className='font-medium'>\n                    -{formData.currency} {formData.discount_amount.toFixed(2)}\n                  </span>\n                </div>\n              )}\n              <div className='flex justify-between text-sm'>\n                <span className='text-gray-600'>{t('form.tax')}:</span>\n                <span className='font-medium'>\n                  {formData.currency} {formData.tax_amount.toFixed(2)}\n                </span>\n              </div>\n              <div className='flex justify-between text-lg font-semibold text-gray-900 border-t border-gray-200 pt-2'>\n                <span>{t('form.total')}:</span>\n                <span>\n                  {formData.currency} {formData.total_amount.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className='flex justify-end space-x-4 pt-6 border-t'>\n          <button\n            type='button'\n            onClick={onCancel}\n            className='px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50'\n          >\n            {t('form.cancel')}\n          </button>\n          <button\n            type='button'\n            onClick={() => handleSave(true)}\n            disabled={isSaving}\n            className='px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 disabled:opacity-50'\n          >\n            {t('form.saveAsDraft')}\n          </button>\n          <button\n            type='button'\n            onClick={() => handleSave(false)}\n            disabled={isSaving}\n            className='px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50'\n          >\n            {isSaving\n              ? t('form.saving')\n              : isEditMode\n                ? t('form.updateInvoice')\n                : t('form.createInvoiceButton')}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InvoiceForm;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\InvoiceModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\PaymentDashboard.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadDashboardData' function makes the dependencies of useEffect Hook (at line 28) change on every render. To fix this, wrap the definition of 'loadDashboardData' in its own useCallback() Hook.","line":30,"column":9,"nodeType":"VariableDeclarator","endLine":56,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadDashboardData' in its own useCallback() Hook.","fix":{"range":[979,1823],"text":"useCallback(async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      // Calculate date range based on selected period\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - parseInt(selectedPeriod));\n\n      const [analyticsData, overdueData] = await Promise.all([\n        InvoiceService.getInvoiceAnalytics(userId, {\n          startDate: startDate.toISOString().split('T')[0],\n          endDate: endDate.toISOString().split('T')[0],\n        }),\n        InvoiceService.getOverdueInvoices(userId),\n      ]);\n\n      setAnalytics(analyticsData);\n      setOverdueInvoices(overdueData);\n    } catch (error) {\n      Logger.error('Error loading dashboard data:', error);\n      setError(error.message || 'Errore nel caricamento dei dati');\n    } finally {\n      setLoading(false);\n    }\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { InvoiceService } from '@lib/invoiceService';\nimport EnhancedKPICard from '@components/analytics/EnhancedKPICard';\nimport Logger from '@utils/Logger';\n\n/**\n * PaymentDashboard - Analytics and overview for invoice payments\n *\n * Features:\n * - Payment analytics and metrics\n * - Overdue invoices tracking\n * - Payment trends visualization\n * - Cash flow overview\n * - Quick actions for payment management\n */\nconst PaymentDashboard = ({ userId, onInvoiceSelect }) => {\n  const [analytics, setAnalytics] = useState(null);\n  const [overdueInvoices, setOverdueInvoices] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [selectedPeriod, setSelectedPeriod] = useState('30'); // days\n\n  // Load dashboard data\n  useEffect(() => {\n    if (userId) {\n      loadDashboardData();\n    }\n  }, [userId, selectedPeriod, loadDashboardData]);\n\n  const loadDashboardData = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      // Calculate date range based on selected period\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - parseInt(selectedPeriod));\n\n      const [analyticsData, overdueData] = await Promise.all([\n        InvoiceService.getInvoiceAnalytics(userId, {\n          startDate: startDate.toISOString().split('T')[0],\n          endDate: endDate.toISOString().split('T')[0],\n        }),\n        InvoiceService.getOverdueInvoices(userId),\n      ]);\n\n      setAnalytics(analyticsData);\n      setOverdueInvoices(overdueData);\n    } catch (error) {\n      Logger.error('Error loading dashboard data:', error);\n      setError(error.message || 'Errore nel caricamento dei dati');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount || 0);\n  };\n\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString('it-IT');\n  };\n\n  const getDaysOverdue = dueDate => {\n    const today = new Date();\n    const due = new Date(dueDate);\n    const diffTime = today - due;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getStatusColor = status => {\n    const colors = {\n      draft: 'bg-gray-100 text-gray-800',\n      issued: 'bg-blue-100 text-blue-800',\n      sent: 'bg-yellow-100 text-yellow-800',\n      paid: 'bg-green-100 text-green-800',\n      partially_paid: 'bg-orange-100 text-orange-800',\n      overdue: 'bg-red-100 text-red-800',\n      cancelled: 'bg-gray-100 text-gray-800',\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getStatusLabel = status => {\n    const labels = {\n      draft: 'Bozza',\n      issued: 'Emessa',\n      sent: 'Inviata',\n      paid: 'Pagata',\n      partially_paid: 'Parzialmente Pagata',\n      overdue: 'Scaduta',\n      cancelled: 'Annullata',\n    };\n    return labels[status] || status;\n  };\n\n  if (loading) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n        <span className='ml-2 text-gray-600'>Caricamento dashboard...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className='bg-red-50 border border-red-200 rounded-md p-4'>\n        <div className='text-red-800'>{error}</div>\n        <button\n          onClick={loadDashboardData}\n          className='mt-2 text-sm bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200'\n        >\n          Riprova\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      {/* Header with Period Selector */}\n      <div className='flex justify-between items-center'>\n        <h2 className='text-2xl font-bold text-gray-900'>Dashboard Pagamenti</h2>\n        <div className='flex items-center gap-2'>\n          <label className='text-sm text-gray-600'>Periodo:</label>\n          <select\n            value={selectedPeriod}\n            onChange={e => setSelectedPeriod(e.target.value)}\n            className='px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500'\n          >\n            <option value='7'>Ultimi 7 giorni</option>\n            <option value='30'>Ultimi 30 giorni</option>\n            <option value='90'>Ultimi 90 giorni</option>\n            <option value='365'>Ultimo anno</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Key Metrics Cards - Enhanced with EnhancedKPICard */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6'>\n        <EnhancedKPICard\n          title='Fatture Totali'\n          subtitle='Periodo selezionato'\n          value={analytics?.totalInvoices || 0}\n          icon='­ƒôä'\n          format='number'\n          color='blue'\n          trend={analytics?.invoiceTrend}\n        />\n\n        <EnhancedKPICard\n          title='Importo Totale'\n          subtitle='Valore complessivo'\n          value={analytics?.totalAmount || 0}\n          icon='­ƒÆ░'\n          format='currency'\n          color='green'\n          trend={analytics?.amountTrend}\n        />\n\n        <EnhancedKPICard\n          title='Incassato'\n          subtitle={`${analytics?.paymentRate ? `${analytics.paymentRate.toFixed(1)}%` : '0%'} del totale`}\n          value={analytics?.totalPaid || 0}\n          icon='Ô£à'\n          format='currency'\n          color='green'\n          trend={analytics?.paidTrend}\n        />\n\n        <EnhancedKPICard\n          title='In Sospeso'\n          subtitle='Da incassare'\n          value={(analytics?.totalAmount || 0) - (analytics?.totalPaid || 0)}\n          icon='ÔÅ│'\n          format='currency'\n          color='red'\n          trend={analytics?.outstandingTrend}\n        />\n      </div>\n\n      {/* Status Breakdown */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4'>Stato Fatture</h3>\n        <div className='grid grid-cols-2 md:grid-cols-4 gap-4'>\n          {analytics?.statusBreakdown &&\n            Object.entries(analytics.statusBreakdown).map(([status, count]) => (\n              <div key={status} className='text-center'>\n                <div\n                  className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(status)}`}\n                >\n                  {getStatusLabel(status)}\n                </div>\n                <div className='mt-2 text-2xl font-semibold text-gray-900'>{count}</div>\n              </div>\n            ))}\n        </div>\n      </div>\n\n      {/* Overdue Invoices */}\n      {overdueInvoices.length > 0 && (\n        <div className='bg-white rounded-lg shadow'>\n          <div className='px-6 py-4 border-b border-gray-200'>\n            <h3 className='text-lg font-medium text-gray-900'>\n              Fatture Scadute ({overdueInvoices.length})\n            </h3>\n          </div>\n          <div className='divide-y divide-gray-200'>\n            {overdueInvoices.slice(0, 5).map(invoice => (\n              <div\n                key={invoice.id}\n                className='p-6 hover:bg-gray-50 cursor-pointer'\n                onClick={() => onInvoiceSelect?.(invoice)}\n              >\n                <div className='flex items-center justify-between'>\n                  <div className='flex-1'>\n                    <div className='flex items-center gap-3'>\n                      <div className='font-medium text-gray-900'>{invoice.invoice_number}</div>\n                      <div className='text-sm text-gray-600'>{invoice.clients?.name}</div>\n                      <div className='bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium'>\n                        {getDaysOverdue(invoice.due_date)} giorni di ritardo\n                      </div>\n                    </div>\n                    <div className='mt-1 text-sm text-gray-500'>\n                      Scadenza: {formatDate(invoice.due_date)}\n                    </div>\n                  </div>\n                  <div className='text-right'>\n                    <div className='font-semibold text-gray-900'>\n                      {formatCurrency(invoice.balance || invoice.total_amount)}\n                    </div>\n                    <div className='text-sm text-gray-500'>da incassare</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          {overdueInvoices.length > 5 && (\n            <div className='px-6 py-3 border-t border-gray-200 text-center'>\n              <button className='text-blue-600 hover:text-blue-700 text-sm font-medium'>\n                Visualizza tutte le fatture scadute ({overdueInvoices.length - 5} altre)\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Monthly Breakdown */}\n      {analytics?.monthlyBreakdown && Object.keys(analytics.monthlyBreakdown).length > 0 && (\n        <div className='bg-white rounded-lg shadow p-6'>\n          <h3 className='text-lg font-medium text-gray-900 mb-4'>Andamento Mensile</h3>\n          <div className='space-y-3'>\n            {Object.entries(analytics.monthlyBreakdown)\n              .sort(([a], [b]) => b.localeCompare(a))\n              .slice(0, 6)\n              .map(([month, data]) => (\n                <div key={month} className='flex items-center justify-between py-2'>\n                  <div className='font-medium text-gray-900'>\n                    {new Date(month + '-01').toLocaleDateString('it-IT', {\n                      year: 'numeric',\n                      month: 'long',\n                    })}\n                  </div>\n                  <div className='flex items-center gap-6 text-sm'>\n                    <div className='text-center'>\n                      <div className='text-gray-600'>Fatture</div>\n                      <div className='font-semibold'>{data.count}</div>\n                    </div>\n                    <div className='text-center'>\n                      <div className='text-gray-600'>Fatturato</div>\n                      <div className='font-semibold'>{formatCurrency(data.amount)}</div>\n                    </div>\n                    <div className='text-center'>\n                      <div className='text-gray-600'>Incassato</div>\n                      <div className='font-semibold text-green-600'>\n                        {formatCurrency(data.paid)}\n                      </div>\n                    </div>\n                    <div className='text-center'>\n                      <div className='text-gray-600'>%</div>\n                      <div className='font-semibold'>\n                        {data.amount > 0 ? ((data.paid / data.amount) * 100).toFixed(1) : 0}%\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4'>Azioni Rapide</h3>\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n          <button className='flex items-center justify-center gap-2 bg-blue-50 text-blue-700 border border-blue-200 rounded-lg py-3 px-4 hover:bg-blue-100 transition-colors'>\n            <svg className='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth={2}\n                d='M12 6v6m0 0v6m0-6h6m-6 0H6'\n              />\n            </svg>\n            Nuova Fattura\n          </button>\n\n          <button\n            onClick={loadDashboardData}\n            className='flex items-center justify-center gap-2 bg-green-50 text-green-700 border border-green-200 rounded-lg py-3 px-4 hover:bg-green-100 transition-colors'\n          >\n            <svg className='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth={2}\n                d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15'\n              />\n            </svg>\n            Aggiorna Dati\n          </button>\n\n          <button className='flex items-center justify-center gap-2 bg-purple-50 text-purple-700 border border-purple-200 rounded-lg py-3 px-4 hover:bg-purple-100 transition-colors'>\n            <svg className='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth={2}\n                d='M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z'\n              />\n            </svg>\n            Report Dettagliato\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentDashboard;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\PaymentModal.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadPaymentHistory' function makes the dependencies of useEffect Hook (at line 56) change on every render. To fix this, wrap the definition of 'loadPaymentHistory' in its own useCallback() Hook.","line":58,"column":9,"nodeType":"VariableDeclarator","endLine":65,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadPaymentHistory' in its own useCallback() Hook.","fix":{"range":[2156,2382],"text":"useCallback(async () => {\n    try {\n      const payments = await InvoiceService.getPaymentHistory(invoice.id);\n      setPaymentHistory(payments);\n    } catch (error) {\n      Logger.error('Error loading payment history:', error);\n    }\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InvoiceService } from '@lib/invoiceService';\nimport Logger from '@utils/Logger';\n\n/**\n * PaymentModal - Component for recording invoice payments\n *\n * Features:\n * - Record full or partial payments\n * - Multiple payment methods support\n * - Payment validation and error handling\n * - Real-time balance calculation\n * - Payment history display\n */\nconst PaymentModal = ({ isOpen, onClose, invoice, onPaymentRecorded, existingPayments = [] }) => {\n  const { t } = useTranslation('invoices');\n  const [formData, setFormData] = useState({\n    amount: '',\n    payment_date: new Date().toISOString().split('T')[0],\n    payment_method: 'cash',\n    reference: '',\n    notes: '',\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [paymentHistory, setPaymentHistory] = useState(existingPayments);\n\n  // Payment method options\n  const paymentMethods = [\n    { value: 'cash', label: t('paymentMethods.cash'), icon: '­ƒÆÁ' },\n    { value: 'bank_transfer', label: t('paymentMethods.bank_transfer'), icon: '­ƒÅª' },\n    { value: 'credit_card', label: t('paymentMethods.credit_card'), icon: '­ƒÆ│' },\n    { value: 'debit_card', label: t('paymentMethods.debit_card'), icon: '­ƒÆ│' },\n    { value: 'check', label: t('paymentMethods.check'), icon: '­ƒôØ' },\n    { value: 'paypal', label: t('paymentMethods.paypal'), icon: '­ƒà┐´©Å' },\n    { value: 'stripe', label: t('paymentMethods.stripe'), icon: '­ƒÆÄ' },\n    { value: 'other', label: t('paymentMethods.other'), icon: '­ƒöä' },\n  ];\n\n  // Calculate payment summary\n  const totalPaid = paymentHistory.reduce(\n    (sum, payment) => sum + parseFloat(payment.amount || 0),\n    0,\n  );\n  const remainingBalance = parseFloat(invoice?.total_amount || 0) - totalPaid;\n  const newAmount = parseFloat(formData.amount || 0);\n  const newBalance = remainingBalance - newAmount;\n\n  // Load payment history when modal opens\n  useEffect(() => {\n    if (isOpen && invoice?.id) {\n      loadPaymentHistory();\n    }\n  }, [isOpen, invoice?.id, loadPaymentHistory]);\n\n  const loadPaymentHistory = async () => {\n    try {\n      const payments = await InvoiceService.getPaymentHistory(invoice.id);\n      setPaymentHistory(payments);\n    } catch (error) {\n      Logger.error('Error loading payment history:', error);\n    }\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n    setError('');\n  };\n\n  const validatePayment = () => {\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\n      return t('paymentModal.errorInvalidAmount');\n    }\n\n    if (parseFloat(formData.amount) > remainingBalance) {\n      return t('paymentModal.errorAmountExceeds', { balance: remainingBalance.toFixed(2) });\n    }\n\n    if (!formData.payment_date) {\n      return t('paymentModal.errorDateRequired');\n    }\n\n    const paymentDate = new Date(formData.payment_date);\n    const today = new Date();\n    if (paymentDate > today) {\n      return t('paymentModal.errorDateInFuture');\n    }\n\n    return null;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const validationError = validatePayment();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await InvoiceService.recordPayment(invoice.id, formData);\n\n      // Update payment history\n      await loadPaymentHistory();\n\n      // Notify parent component\n      if (onPaymentRecorded) {\n        onPaymentRecorded(result);\n      }\n\n      // Reset form\n      setFormData({\n        amount: '',\n        payment_date: new Date().toISOString().split('T')[0],\n        payment_method: 'cash',\n        reference: '',\n        notes: '',\n      });\n\n      // Show success message\n      alert(t('paymentModal.successMessage'));\n    } catch (error) {\n      Logger.error('Error recording payment:', error);\n      setError(error.message || t('paymentModal.errorMessage'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount || 0);\n  };\n\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString('it-IT');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>\n      <div className='bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto'>\n        {/* Header */}\n        <div className='flex justify-between items-center p-6 border-b border-gray-200'>\n          <div>\n            <h2 className='text-xl font-semibold text-gray-900'>{t('paymentModal.title')}</h2>\n            <p className='text-sm text-gray-600 mt-1'>\n              {t('paymentModal.subtitle', {\n                invoiceNumber: invoice?.invoice_number,\n                clientName: invoice?.clients?.name,\n              })}\n            </p>\n          </div>\n          <button onClick={onClose} className='text-gray-400 hover:text-gray-600 transition-colors'>\n            <svg className='w-6 h-6' fill='none' stroke='currentColor' viewBox='0 0 24 24'>\n              <path\n                strokeLinecap='round'\n                strokeLinejoin='round'\n                strokeWidth={2}\n                d='M6 18L18 6M6 6l12 12'\n              />\n            </svg>\n          </button>\n        </div>\n\n        <div className='p-6'>\n          <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>\n            {/* Payment Form */}\n            <div>\n              <h3 className='text-lg font-medium text-gray-900 mb-4'>\n                {t('paymentModal.newPayment')}\n              </h3>\n\n              {/* Payment Summary */}\n              <div className='bg-gray-50 rounded-lg p-4 mb-6'>\n                <div className='grid grid-cols-2 gap-4 text-sm'>\n                  <div>\n                    <span className='text-gray-600'>{t('paymentModal.totalInvoice')}</span>\n                    <div className='font-semibold'>{formatCurrency(invoice?.total_amount)}</div>\n                  </div>\n                  <div>\n                    <span className='text-gray-600'>{t('paymentModal.alreadyPaid')}</span>\n                    <div className='font-semibold text-green-600'>{formatCurrency(totalPaid)}</div>\n                  </div>\n                  <div>\n                    <span className='text-gray-600'>{t('paymentModal.remainingBalance')}</span>\n                    <div className='font-semibold text-orange-600'>\n                      {formatCurrency(remainingBalance)}\n                    </div>\n                  </div>\n                  {newAmount > 0 && (\n                    <div>\n                      <span className='text-gray-600'>{t('paymentModal.newBalance')}</span>\n                      <div\n                        className={`font-semibold ${newBalance <= 0 ? 'text-green-600' : 'text-orange-600'}`}\n                      >\n                        {formatCurrency(newBalance)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {error && (\n                <div className='bg-red-50 border border-red-200 rounded-md p-3 mb-4'>\n                  <div className='text-red-800 text-sm'>{error}</div>\n                </div>\n              )}\n\n              <form onSubmit={handleSubmit} className='space-y-4'>\n                {/* Amount */}\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('paymentModal.paymentAmount')}\n                  </label>\n                  <div className='relative'>\n                    <span className='absolute left-3 top-3 text-gray-500'>Ôé¼</span>\n                    <input\n                      type='number'\n                      name='amount'\n                      value={formData.amount}\n                      onChange={handleInputChange}\n                      step='0.01'\n                      min='0'\n                      max={remainingBalance}\n                      className='w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      placeholder='0.00'\n                      required\n                    />\n                  </div>\n                  <div className='mt-1 flex gap-2'>\n                    <button\n                      type='button'\n                      onClick={() =>\n                        setFormData(prev => ({ ...prev, amount: remainingBalance.toString() }))\n                      }\n                      className='text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200'\n                    >\n                      {t('paymentModal.fullBalance')}\n                    </button>\n                    <button\n                      type='button'\n                      onClick={() =>\n                        setFormData(prev => ({\n                          ...prev,\n                          amount: (remainingBalance / 2).toString(),\n                        }))\n                      }\n                      className='text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200'\n                    >\n                      {t('paymentModal.halfBalance')}\n                    </button>\n                  </div>\n                </div>\n\n                {/* Payment Date */}\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('paymentModal.paymentDate')}\n                  </label>\n                  <input\n                    type='date'\n                    name='payment_date'\n                    value={formData.payment_date}\n                    onChange={handleInputChange}\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    required\n                  />\n                </div>\n\n                {/* Payment Method */}\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('paymentModal.paymentMethod')}\n                  </label>\n                  <select\n                    name='payment_method'\n                    value={formData.payment_method}\n                    onChange={handleInputChange}\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  >\n                    {paymentMethods.map(method => (\n                      <option key={method.value} value={method.value}>\n                        {method.icon} {method.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Reference */}\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('paymentModal.reference')}\n                  </label>\n                  <input\n                    type='text'\n                    name='reference'\n                    value={formData.reference}\n                    onChange={handleInputChange}\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    placeholder={t('paymentModal.referencePlaceholder')}\n                  />\n                </div>\n\n                {/* Notes */}\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    {t('paymentModal.notes')}\n                  </label>\n                  <textarea\n                    name='notes'\n                    value={formData.notes}\n                    onChange={handleInputChange}\n                    rows='2'\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    placeholder={t('paymentModal.notesPlaceholder')}\n                  ></textarea>\n                </div>\n\n                <div className='pt-2'>\n                  <button\n                    type='submit'\n                    disabled={loading}\n                    className='w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-400 disabled:cursor-not-allowed'\n                  >\n                    {loading ? t('paymentModal.recordingPayment') : t('paymentModal.recordPayment')}\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            {/* Payment History */}\n            <div>\n              <h3 className='text-lg font-medium text-gray-900 mb-4'>\n                {t('paymentModal.paymentHistory')}\n              </h3>\n              <div className='border rounded-lg overflow-hidden'>\n                <table className='min-w-full divide-y divide-gray-200'>\n                  <thead className='bg-gray-50'>\n                    <tr>\n                      <th className='px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase'>\n                        {t('paymentModal.date')}\n                      </th>\n                      <th className='px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase'>\n                        {t('paymentModal.amount')}\n                      </th>\n                      <th className='px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase'>\n                        {t('paymentModal.method')}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className='bg-white divide-y divide-gray-200'>\n                    {paymentHistory.length === 0 ? (\n                      <tr>\n                        <td colSpan='3' className='px-4 py-4 text-center text-sm text-gray-500'>\n                          {t('paymentModal.noPayments')}\n                        </td>\n                      </tr>\n                    ) : (\n                      paymentHistory.map(payment => (\n                        <tr key={payment.id}>\n                          <td className='px-4 py-3 text-sm text-gray-700'>\n                            {formatDate(payment.payment_date)}\n                          </td>\n                          <td className='px-4 py-3 text-sm text-gray-900 font-medium'>\n                            {formatCurrency(payment.amount)}\n                          </td>\n                          <td className='px-4 py-3 text-sm text-gray-700'>\n                            {t(`paymentMethods.${payment.payment_method}`)}\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='p-4 bg-gray-50 border-t flex justify-end'>\n          <button\n            onClick={onClose}\n            className='px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50'\n          >\n            {t('paymentModal.close')}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteApprovalActions.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buttonStyle' is assigned a value but never used.","line":152,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { QuoteApprovalService } from '@lib/quoteApprovalService';\nimport Logger from '@utils/Logger';\nimport {\n  Send,\n  CheckCircle,\n  XCircle,\n  Clock,\n  RotateCcw,\n  Ban,\n  Edit,\n  Eye,\n  CheckSquare,\n} from 'lucide-react';\n\n/**\n * QuoteApprovalActions Component\n * Provides action buttons for quote status transitions\n */\nconst QuoteApprovalActions = ({ quote, onStatusUpdate, className = '' }) => {\n  const { t } = useTranslation();\n  const { user } = useUser();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedAction, setSelectedAction] = useState(null);\n\n  // Get available transitions for current status\n  const availableTransitions = QuoteApprovalService.getAvailableTransitions(quote.status);\n\n  // Action configuration with display properties\n  const actionConfig = {\n    sent: {\n      label: t('quotes.actions.send', 'Send Quote'),\n      icon: Send,\n      variant: 'primary',\n      confirmMessage: t(\n        'quotes.confirm.send',\n        'Are you sure you want to send this quote to the client?',\n      ),\n    },\n    accepted: {\n      label: t('quotes.actions.accept', 'Mark as Accepted'),\n      icon: CheckCircle,\n      variant: 'success',\n      confirmMessage: t('quotes.confirm.accept', 'Mark this quote as accepted?'),\n    },\n    rejected: {\n      label: t('quotes.actions.reject', 'Mark as Rejected'),\n      icon: XCircle,\n      variant: 'danger',\n      confirmMessage: t('quotes.confirm.reject', 'Mark this quote as rejected?'),\n    },\n    expired: {\n      label: t('quotes.actions.expire', 'Mark as Expired'),\n      icon: Clock,\n      variant: 'warning',\n      confirmMessage: t('quotes.confirm.expire', 'Mark this quote as expired?'),\n    },\n    converted: {\n      label: t('quotes.actions.convert', 'Convert to Invoice'),\n      icon: RotateCcw,\n      variant: 'primary',\n      confirmMessage: t('quotes.confirm.convert', 'Convert this quote to an invoice?'),\n    },\n    cancelled: {\n      label: t('quotes.actions.cancel', 'Cancel Quote'),\n      icon: Ban,\n      variant: 'danger',\n      confirmMessage: t('quotes.confirm.cancel', 'Are you sure you want to cancel this quote?'),\n    },\n    revision_requested: {\n      label: t('quotes.actions.request_revision', 'Request Revision'),\n      icon: Edit,\n      variant: 'warning',\n      confirmMessage: t('quotes.confirm.request_revision', 'Request revision for this quote?'),\n    },\n    viewed: {\n      label: t('quotes.actions.mark_viewed', 'Mark as Viewed'),\n      icon: CheckSquare,\n      variant: 'secondary',\n      confirmMessage: t('quotes.confirm.mark_viewed', 'Mark this quote as viewed by client?'),\n    },\n  };\n\n  // Button variant styles\n  const buttonVariants = {\n    primary: 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600',\n    success: 'bg-green-600 hover:bg-green-700 text-white border-green-600',\n    danger: 'bg-red-600 hover:bg-red-700 text-white border-red-600',\n    warning: 'bg-yellow-600 hover:bg-yellow-700 text-white border-yellow-600',\n    secondary: 'bg-gray-600 hover:bg-gray-700 text-white border-gray-600',\n  };\n\n  const handleStatusChange = async newStatus => {\n    if (!user?.id) {\n      Logger.error('User not authenticated');\n      return;\n    }\n\n    const action = actionConfig[newStatus];\n    if (action?.confirmMessage && !window.confirm(action.confirmMessage)) {\n      return;\n    }\n\n    setIsLoading(true);\n    setSelectedAction(newStatus);\n\n    try {\n      const updatedQuote = await QuoteApprovalService.updateQuoteStatus(\n        quote.id,\n        user.id,\n        newStatus,\n        {\n          notes: `Status changed to ${newStatus} via UI`,\n          automated: false,\n        },\n      );\n\n      Logger.info('Quote status updated successfully:', { quoteId: quote.id, newStatus });\n\n      if (onStatusUpdate) {\n        onStatusUpdate(updatedQuote);\n      }\n    } catch (error) {\n      Logger.error('Failed to update quote status:', error);\n      alert(\n        t('quotes.errors.status_update_failed', 'Failed to update quote status. Please try again.'),\n      );\n    } finally {\n      setIsLoading(false);\n      setSelectedAction(null);\n    }\n  };\n\n  if (availableTransitions.length === 0) {\n    return (\n      <div className={`text-sm text-gray-500 ${className}`}>\n        {t('quotes.no_actions_available', 'No actions available for this status')}\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className}`}>\n      <div className='flex flex-wrap gap-2'>\n        {availableTransitions.map(transition => {\n          const action = actionConfig[transition];\n          if (!action) return null;\n\n          const isProcessing = isLoading && selectedAction === transition;\n          const buttonStyle = buttonVariants[action.variant] || buttonVariants.secondary;\n          const IconComponent = action.icon;\n\n          return (\n            <button\n              key={transition}\n              onClick={() => handleStatusChange(transition)}\n              disabled={isLoading}\n              className='p-1 text-gray-400 hover:text-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n              title={action.label}\n            >\n              {isProcessing ? (\n                <svg className='animate-spin h-4 w-4' viewBox='0 0 24 24'>\n                  <circle\n                    className='opacity-25'\n                    cx='12'\n                    cy='12'\n                    r='10'\n                    stroke='currentColor'\n                    strokeWidth='4'\n                    fill='none'\n                  />\n                  <path\n                    className='opacity-75'\n                    fill='currentColor'\n                    d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'\n                  />\n                </svg>\n              ) : (\n                <IconComponent className='w-4 h-4' />\n              )}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Expiry warning for sent quotes */}\n      {quote.status === 'sent' && quote.acceptance_deadline && (\n        <div className='mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md'>\n          <div className='text-sm text-yellow-800'>\n            <strong>{t('quotes.expiry_warning.title', 'Expiry Date')}:</strong>{' '}\n            {t('quotes.expiry_warning.description', 'This quote will expire on')}{' '}\n            {new Date(quote.acceptance_deadline).toLocaleDateString()}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuoteApprovalActions;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteDetailModal.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showSignature' is assigned a value but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadQuoteDetails'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadQuoteDetails, quoteId, user.id]","fix":{"range":[1163,1190],"text":"[isOpen, loadQuoteDetails, quoteId, user.id]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'signatureData' is defined but never used.","line":73,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FileText, Zap, Clock, PenTool, CheckCircle } from 'lucide-react';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport QuoteStatusBadge from './QuoteStatusBadge';\nimport QuoteApprovalActions from './QuoteApprovalActions';\nimport QuoteStatusHistory from './QuoteStatusHistory';\nimport DigitalSignature from './DigitalSignature';\nimport { QuoteService } from '@lib/quoteService';\nimport Logger from '@utils/Logger';\n\n/**\n * QuoteDetailModal Component\n * Comprehensive modal for viewing quote details and managing approval workflow\n */\nconst QuoteDetailModal = ({ isOpen, onClose, quoteId, onQuoteUpdate, className = '' }) => {\n  const { t } = useTranslation();\n  const { user } = useUser();\n  const [quote, setQuote] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('details');\n  const [showSignature, setShowSignature] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && quoteId) {\n      loadQuoteDetails();\n    }\n  }, [isOpen, quoteId, user?.id]);\n\n  useEffect(() => {\n    const handleEscape = e => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = '';\n    };\n  }, [isOpen, onClose]);\n\n  const loadQuoteDetails = async () => {\n    if (!user?.id || !quoteId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const quoteData = await QuoteService.getQuote(quoteId, user.id);\n      setQuote(quoteData);\n    } catch (error) {\n      Logger.error('Failed to load quote details:', error);\n      setError(t('quotes.errors.load_failed', 'Failed to load quote details'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleStatusUpdate = updatedQuote => {\n    setQuote(updatedQuote);\n    if (onQuoteUpdate) {\n      onQuoteUpdate(updatedQuote);\n    }\n  };\n\n  const handleSignatureComplete = signatureData => {\n    setShowSignature(false);\n    // Refresh quote data to show updated signature status\n    loadQuoteDetails();\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount || 0);\n  };\n\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const tabs = [\n    { id: 'details', label: t('quotes.tabs.details', 'Details'), icon: FileText },\n    { id: 'actions', label: t('quotes.tabs.actions', 'Actions'), icon: Zap },\n    { id: 'history', label: t('quotes.tabs.history', 'History'), icon: Clock },\n    { id: 'signature', label: t('quotes.tabs.signature', 'Signature'), icon: PenTool },\n  ];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className='fixed inset-0 z-50 overflow-y-auto'>\n      {/* Backdrop */}\n      <div className='fixed inset-0 bg-black bg-opacity-50 transition-opacity' onClick={onClose} />\n\n      {/* Modal */}\n      <div className='flex min-h-full items-center justify-center p-4'>\n        <div\n          className={`relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden ${className}`}\n          onClick={e => e.stopPropagation()}\n        >\n          {/* Header */}\n          <div className='flex items-center justify-between p-6 border-b border-gray-200'>\n            <div className='flex items-center gap-3'>\n              <h2 className='text-xl font-semibold text-gray-900'>\n                {quote\n                  ? `${t('quotes.quote', 'Quote')} #${quote.quote_number}`\n                  : t('quotes.loading', 'Loading Quote...')}\n              </h2>\n              {quote && <QuoteStatusBadge status={quote.status} />}\n            </div>\n\n            <button\n              onClick={onClose}\n              className='text-gray-400 hover:text-gray-600 transition-colors'\n            >\n              <span className='sr-only'>{t('common.close', 'Close')}</span>\n              <svg className='h-6 w-6' fill='none' viewBox='0 0 24 24' stroke='currentColor'>\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  strokeWidth={2}\n                  d='M6 18L18 6M6 6l12 12'\n                />\n              </svg>\n            </button>\n          </div>\n\n          {/* Content */}\n          <div className='flex flex-col h-full max-h-[calc(90vh-140px)]'>\n            {/* Loading State */}\n            {isLoading && (\n              <div className='flex items-center justify-center py-12'>\n                <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n                <span className='ml-3 text-gray-600'>{t('common.loading', 'Loading...')}</span>\n              </div>\n            )}\n\n            {/* Error State */}\n            {error && (\n              <div className='p-6'>\n                <div className='bg-red-50 border border-red-200 rounded-md p-4'>\n                  <div className='text-sm text-red-800'>{error}</div>\n                  <button\n                    onClick={loadQuoteDetails}\n                    className='mt-2 text-sm text-red-600 hover:text-red-700 underline'\n                  >\n                    {t('common.retry', 'Retry')}\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {/* Quote Content */}\n            {quote && !isLoading && !error && (\n              <>\n                {/* Tabs */}\n                <div className='border-b border-gray-200'>\n                  <nav className='flex space-x-8 px-6'>\n                    {tabs.map(tab => (\n                      <button\n                        key={tab.id}\n                        onClick={() => setActiveTab(tab.id)}\n                        className={`\n                          py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2\n                          ${\n                            activeTab === tab.id\n                              ? 'border-blue-500 text-blue-600'\n                              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                          }\n                        `}\n                      >\n                        <tab.icon className='w-4 h-4' />\n                        {tab.label}\n                      </button>\n                    ))}\n                  </nav>\n                </div>\n\n                {/* Tab Content */}\n                <div className='flex-1 overflow-y-auto p-6'>\n                  {/* Details Tab */}\n                  {activeTab === 'details' && (\n                    <div className='space-y-6'>\n                      {/* Basic Info */}\n                      <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n                        <div>\n                          <h3 className='text-lg font-medium text-gray-900 mb-3'>\n                            {t('quotes.basic_info', 'Basic Information')}\n                          </h3>\n                          <dl className='space-y-2'>\n                            <div>\n                              <dt className='text-sm font-medium text-gray-500'>\n                                {t('quotes.client', 'Client')}\n                              </dt>\n                              <dd className='text-sm text-gray-900'>{quote.client_name}</dd>\n                            </div>\n                            <div>\n                              <dt className='text-sm font-medium text-gray-500'>\n                                {t('quotes.created_date', 'Created')}\n                              </dt>\n                              <dd className='text-sm text-gray-900'>\n                                {formatDate(quote.created_at)}\n                              </dd>\n                            </div>\n                            <div>\n                              <dt className='text-sm font-medium text-gray-500'>\n                                {t('quotes.valid_until', 'Valid Until')}\n                              </dt>\n                              <dd className='text-sm text-gray-900'>\n                                {formatDate(quote.valid_until)}\n                              </dd>\n                            </div>\n                            {quote.acceptance_deadline && (\n                              <div>\n                                <dt className='text-sm font-medium text-gray-500'>\n                                  {t('quotes.acceptance_deadline', 'Acceptance Deadline')}\n                                </dt>\n                                <dd className='text-sm text-gray-900'>\n                                  {formatDate(quote.acceptance_deadline)}\n                                </dd>\n                              </div>\n                            )}\n                          </dl>\n                        </div>\n\n                        <div>\n                          <h3 className='text-lg font-medium text-gray-900 mb-3'>\n                            {t('quotes.financial_summary', 'Financial Summary')}\n                          </h3>\n                          <dl className='space-y-2'>\n                            <div>\n                              <dt className='text-sm font-medium text-gray-500'>\n                                {t('quotes.subtotal', 'Subtotal')}\n                              </dt>\n                              <dd className='text-sm text-gray-900'>\n                                {formatCurrency(quote.subtotal)}\n                              </dd>\n                            </div>\n                            <div>\n                              <dt className='text-sm font-medium text-gray-500'>\n                                {t('quotes.tax', 'Tax')}\n                              </dt>\n                              <dd className='text-sm text-gray-900'>\n                                {formatCurrency(quote.tax_amount)}\n                              </dd>\n                            </div>\n                            <div className='border-t pt-2'>\n                              <dt className='text-sm font-medium text-gray-900'>\n                                {t('quotes.total', 'Total')}\n                              </dt>\n                              <dd className='text-lg font-bold text-gray-900'>\n                                {formatCurrency(quote.total)}\n                              </dd>\n                            </div>\n                          </dl>\n                        </div>\n                      </div>\n\n                      {/* Items */}\n                      {quote.items && quote.items.length > 0 && (\n                        <div>\n                          <h3 className='text-lg font-medium text-gray-900 mb-3'>\n                            {t('quotes.items', 'Quote Items')}\n                          </h3>\n                          <div className='overflow-x-auto'>\n                            <table className='min-w-full divide-y divide-gray-200'>\n                              <thead className='bg-gray-50'>\n                                <tr>\n                                  <th className='px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                                    {t('quotes.item.description', 'Description')}\n                                  </th>\n                                  <th className='px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                                    {t('quotes.item.quantity', 'Qty')}\n                                  </th>\n                                  <th className='px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                                    {t('quotes.item.unit_price', 'Unit Price')}\n                                  </th>\n                                  <th className='px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                                    {t('quotes.item.total', 'Total')}\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody className='bg-white divide-y divide-gray-200'>\n                                {quote.items.map((item, index) => (\n                                  <tr key={index}>\n                                    <td className='px-4 py-2 text-sm text-gray-900'>\n                                      {item.description}\n                                    </td>\n                                    <td className='px-4 py-2 text-sm text-gray-900 text-right'>\n                                      {item.quantity}\n                                    </td>\n                                    <td className='px-4 py-2 text-sm text-gray-900 text-right'>\n                                      {formatCurrency(item.unit_price)}\n                                    </td>\n                                    <td className='px-4 py-2 text-sm text-gray-900 text-right'>\n                                      {formatCurrency(item.total)}\n                                    </td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Notes */}\n                      {quote.notes && (\n                        <div>\n                          <h3 className='text-lg font-medium text-gray-900 mb-3'>\n                            {t('quotes.notes', 'Notes')}\n                          </h3>\n                          <div className='bg-gray-50 rounded-md p-4'>\n                            <p className='text-sm text-gray-700 whitespace-pre-wrap'>\n                              {quote.notes}\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Actions Tab */}\n                  {activeTab === 'actions' && (\n                    <QuoteApprovalActions quote={quote} onStatusUpdate={handleStatusUpdate} />\n                  )}\n\n                  {/* History Tab */}\n                  {activeTab === 'history' && <QuoteStatusHistory quoteId={quote.id} />}\n\n                  {/* Signature Tab */}\n                  {activeTab === 'signature' && (\n                    <div className='space-y-6'>\n                      {quote.digital_signature ? (\n                        <div>\n                          <h3 className='text-lg font-medium text-gray-900 mb-3'>\n                            {t('quotes.signature.existing', 'Digital Signature')}\n                          </h3>\n                          <div className='bg-green-50 border border-green-200 rounded-md p-4'>\n                            <div className='flex items-center gap-2 mb-2'>\n                              <CheckCircle className='w-5 h-5 text-green-600' />\n                              <span className='text-sm font-medium text-green-800'>\n                                {t('quotes.signature.completed', 'Quote has been digitally signed')}\n                              </span>\n                            </div>\n                            <div className='text-xs text-green-700'>\n                              {t('quotes.signature.signed_on', 'Signed on')}:{' '}\n                              {formatDate(quote.signature_date)}\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <DigitalSignature\n                          quoteId={quote.id}\n                          onSignatureComplete={handleSignatureComplete}\n                        />\n                      )}\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className='border-t border-gray-200 px-6 py-4 bg-gray-50'>\n            <div className='flex justify-end space-x-3'>\n              <button\n                onClick={onClose}\n                className='px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n              >\n                {t('common.close', 'Close')}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteDetailModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteEmailSender.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'handleModalOpen'. Either include it or remove the dependency array.","line":209,"column":6,"nodeType":"ArrayExpression","endLine":209,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [handleModalOpen, isOpen, quote]","fix":{"range":[5890,5905],"text":"[handleModalOpen, isOpen, quote]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, Transition } from '@headlessui/react';\nimport {\n  EnvelopeIcon,\n  XMarkIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  DocumentTextIcon,\n} from '@heroicons/react/24/outline';\nimport { Mail, Clock, CheckCircle } from 'lucide-react';\nimport emailService from '@lib/emailService';\nimport DOMPurify from 'dompurify';\nimport Logger from '@utils/Logger';\n\nconst QuoteEmailSender = ({ isOpen, onClose, quote, onEmailSent }) => {\n  const { t } = useTranslation('email');\n  // Configure DOMPurify for secure HTML sanitization\n  const sanitizeHtml = html => {\n    if (!html) return '';\n\n    // Configure DOMPurify to allow only safe HTML elements and attributes\n    // This prevents XSS attacks while preserving legitimate formatting\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li', 'a', 'span', 'div'],\n      ALLOWED_ATTR: ['href', 'target'],\n      ALLOWED_URI_REGEXP: /^(?:(?:https?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.\\-:]|$))/i,\n      ALLOW_DATA_ATTR: false,\n      ALLOW_UNKNOWN_PROTOCOLS: false,\n      FORBID_ATTR: ['style'], // Remove style attribute to prevent CSS-based XSS\n      FORBID_TAGS: ['script', 'iframe', 'object', 'embed', 'form', 'input'],\n      SANITIZE_DOM: true,\n      KEEP_CONTENT: true,\n    });\n  };\n  const [step, setStep] = useState(1); // 1: Setup, 2: Preview, 3: Sending, 4: Result\n  const [emailData, setEmailData] = useState({\n    recipientEmail: '',\n    recipientName: '',\n    templateType: 'quote_sent',\n    customMessage: '',\n    includeAttachment: true,\n    scheduledDate: null,\n  });\n  const [sendingResult, setSendingResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  // Reset state when modal opens\n  const handleModalOpen = () => {\n    if (isOpen && quote) {\n      setStep(1);\n      setEmailData(prev => ({\n        ...prev,\n        recipientEmail: quote.client_email || '',\n        recipientName: quote.client_name || quote.client || '',\n        customMessage: '',\n      }));\n      setErrors({});\n      setSendingResult(null);\n    }\n  };\n\n  // Email template options\n  const templateOptions = [\n    {\n      id: 'quote_sent',\n      name: t('quoteSender.templates.quote_sent.name'),\n      description: t('quoteSender.templates.quote_sent.description'),\n      icon: Mail,\n    },\n    {\n      id: 'quote_reminder',\n      name: t('quoteSender.templates.quote_reminder.name'),\n      description: t('quoteSender.templates.quote_reminder.description'),\n      icon: Clock,\n    },\n    {\n      id: 'quote_accepted',\n      name: t('quoteSender.templates.quote_accepted.name'),\n      description: t('quoteSender.templates.quote_accepted.description'),\n      icon: CheckCircle,\n    },\n  ];\n\n  // Validate email data\n  const validateEmailData = () => {\n    const newErrors = {};\n\n    if (!emailData.recipientEmail) {\n      newErrors.recipientEmail = t('quoteSender.validation.emailRequired');\n    } else if (!emailService.isValidEmail(emailData.recipientEmail)) {\n      newErrors.recipientEmail = t('quoteSender.validation.emailInvalid');\n    }\n\n    if (!emailData.recipientName.trim()) {\n      newErrors.recipientName = t('quoteSender.validation.nameRequired');\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle form input changes\n  const handleInputChange = (field, value) => {\n    setEmailData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear error when user types\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: '',\n      }));\n    }\n  };\n\n  // Proceed to next step\n  const handleNext = () => {\n    if (step === 1) {\n      if (validateEmailData()) {\n        setStep(2);\n      }\n    } else if (step === 2) {\n      handleSendEmail();\n    }\n  };\n\n  // Send the email\n  const handleSendEmail = async () => {\n    setStep(3);\n    setLoading(true);\n\n    try {\n      const result = await emailService.sendQuoteEmail(\n        quote,\n        emailData.recipientEmail,\n        emailData.templateType,\n        emailData.customMessage,\n      );\n\n      setSendingResult({\n        success: true,\n        messageId: result.messageId,\n        timestamp: result.timestamp,\n        recipient: result.recipient,\n      });\n\n      // Schedule reminders if it's a quote_sent template\n      if (emailData.templateType === 'quote_sent') {\n        emailService.scheduleReminders(quote);\n      }\n\n      setStep(4);\n\n      // Notify parent component\n      if (onEmailSent) {\n        onEmailSent(result);\n      }\n    } catch (error) {\n      Logger.error('Error sending email:', error);\n      setSendingResult({\n        success: false,\n        error: error.message,\n      });\n      setStep(4);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get preview of the email template\n  const getEmailPreview = () => {\n    if (!quote) return null;\n\n    const emailData_preview = {\n      quoteNumber: quote.quote_number || quote.number,\n      clientName: emailData.recipientName,\n      issueDate: quote.issue_date || quote.date,\n      expiryDate: quote.expiry_date || quote.expiryDate,\n      totalAmount: quote.total_amount || quote.amount,\n      companyName: t('companyDetails.name'),\n      companyEmail: t('companyDetails.email'),\n      companyPhone: t('companyDetails.phone'),\n      companyAddress: t('companyDetails.address'),\n    };\n\n    const template = emailService.getEmailTemplate(emailData.templateType, emailData_preview);\n    return template;\n  };\n\n  // Handle modal close\n  const handleClose = () => {\n    if (!loading) {\n      setStep(1);\n      setErrors({});\n      setSendingResult(null);\n      onClose();\n    }\n  };\n\n  // Trigger modal open effect\n  React.useEffect(() => {\n    if (isOpen) {\n      handleModalOpen();\n    }\n  }, [isOpen, quote]);\n\n  if (!quote) return null;\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={handleClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-black bg-opacity-25' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 overflow-y-auto'>\n          <div className='flex min-h-full items-center justify-center p-4 text-center'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 scale-95'\n              enterTo='opacity-100 scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 scale-100'\n              leaveTo='opacity-0 scale-95'\n            >\n              <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-lg bg-white text-left align-middle shadow-xl transition-all'>\n                {/* Header */}\n                <div className='bg-gradient-to-r from-blue-500 to-purple-600 px-6 py-4 text-white'>\n                  <div className='flex items-center justify-between'>\n                    <div className='flex items-center'>\n                      <EnvelopeIcon className='h-6 w-6 mr-2' />\n                      <Dialog.Title as='h3' className='text-lg font-medium'>\n                        {t('quoteSender.title')}\n                      </Dialog.Title>\n                    </div>\n                    <button\n                      type='button'\n                      className='text-white hover:text-gray-200 disabled:opacity-50'\n                      onClick={handleClose}\n                      disabled={loading}\n                    >\n                      <XMarkIcon className='h-6 w-6' />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Progress Steps */}\n                <div className='px-6 py-4 border-b'>\n                  <nav className='flex items-center justify-center space-x-4'>\n                    {[\n                      { id: 1, name: t('quoteSender.steps.setup') },\n                      { id: 2, name: t('quoteSender.steps.preview') },\n                      { id: 3, name: t('quoteSender.steps.send') },\n                      { id: 4, name: t('quoteSender.steps.result') },\n                    ].map(s => (\n                      <div key={s.id} className='flex items-center'>\n                        <div\n                          className={`\n                            ${step === s.id ? 'font-bold text-blue-600' : 'text-gray-500'}\n                          `}\n                        >\n                          {s.name}\n                        </div>\n                      </div>\n                    ))}\n                  </nav>\n                </div>\n\n                <div className='p-6'>\n                  {/* Step 1: Email Setup */}\n                  {step === 1 && (\n                    <div className='space-y-6'>\n                      {/* Recipient Email */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700'>\n                          {t('quoteSender.labels.recipientEmail')}\n                        </label>\n                        <div className='mt-1'>\n                          <input\n                            type='email'\n                            value={emailData.recipientEmail}\n                            onChange={e => handleInputChange('recipientEmail', e.target.value)}\n                            placeholder={t('quoteSender.placeholders.recipientEmail')}\n                            className={`w-full border rounded-md px-3 py-2 ${\n                              errors.recipientEmail ? 'border-red-500' : 'border-gray-300'\n                            }`}\n                          />\n                          {errors.recipientEmail && (\n                            <p className='text-sm text-red-600 mt-1'>{errors.recipientEmail}</p>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Recipient Name */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700'>\n                          {t('quoteSender.labels.recipientName')}\n                        </label>\n                        <div className='mt-1'>\n                          <input\n                            type='text'\n                            value={emailData.recipientName}\n                            onChange={e => handleInputChange('recipientName', e.target.value)}\n                            placeholder={t('quoteSender.placeholders.recipientName')}\n                            className={`w-full border rounded-md px-3 py-2 ${\n                              errors.recipientName ? 'border-red-500' : 'border-gray-300'\n                            }`}\n                          />\n                          {errors.recipientName && (\n                            <p className='text-sm text-red-600 mt-1'>{errors.recipientName}</p>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Template */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700 mb-1'>\n                          {t('quoteSender.labels.template')}\n                        </label>\n                        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n                          {templateOptions.map(template => (\n                            <div\n                              key={template.id}\n                              className={`\n                                w-full text-left p-4 rounded-lg border\n                                ${\n                                  emailData.templateType === template.id\n                                    ? 'bg-blue-50 border-blue-500'\n                                    : 'bg-white hover:bg-gray-50'\n                                }\n                              `}\n                              onClick={() => handleInputChange('templateType', template.id)}\n                            >\n                              <div className='flex items-start'>\n                                <template.icon className='w-6 h-6 mr-3 mt-1' />\n                                <div>\n                                  <p className='font-semibold'>{template.name}</p>\n                                  <p className='text-sm text-gray-500'>{template.description}</p>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Custom Message */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700'>\n                          {t('quoteSender.labels.customMessage')}\n                        </label>\n                        <textarea\n                          rows='4'\n                          value={emailData.customMessage}\n                          onChange={e => handleInputChange('customMessage', e.target.value)}\n                          placeholder={t('quoteSender.placeholders.customMessage')}\n                          className='w-full border border-gray-300 rounded-md px-3 py-2 mt-1'\n                        ></textarea>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Step 2: Email Preview */}\n                  {step === 2 && (\n                    <div>\n                      <h4 className='text-lg font-medium text-gray-900'>\n                        {t('quoteSender.preview.title')}\n                      </h4>\n                      <div className='mt-4 p-4 border rounded-md bg-gray-50 space-y-4'>\n                        <p>\n                          <span className='font-semibold'>{t('quoteSender.preview.subject')}</span>{' '}\n                          {getEmailPreview().subject}\n                        </p>\n                        <div className='border-t pt-4'>\n                          <p className='font-semibold'>{t('quoteSender.preview.body')}</p>\n                          <div\n                            className='prose prose-sm max-w-none mt-2'\n                            dangerouslySetInnerHTML={{\n                              __html: sanitizeHtml(getEmailPreview().html),\n                            }}\n                          />\n                        </div>\n                        {emailData.includeAttachment && (\n                          <div className='border-t pt-4'>\n                            <p className='font-semibold'>{t('quoteSender.preview.attachment')}</p>\n                            <div className='flex items-center gap-2 mt-2 text-sm text-gray-700'>\n                              <DocumentTextIcon className='w-5 h-5' />\n                              <span>\n                                {t('quoteSender.preview.quotePdf', {\n                                  quoteNumber: quote.quote_number || quote.number,\n                                })}\n                              </span>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Step 3: Sending */}\n                  {step === 3 && (\n                    <div className='text-center py-16'>\n                      <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto'></div>\n                      <h4 className='mt-4 text-lg font-medium text-gray-900'>\n                        {t('quoteSender.sending.title')}\n                      </h4>\n                      <p className='text-gray-600'>{t('quoteSender.sending.subtitle')}</p>\n                    </div>\n                  )}\n\n                  {/* Step 4: Result */}\n                  {step === 4 && sendingResult && (\n                    <div className='text-center py-10'>\n                      {sendingResult.success ? (\n                        <>\n                          <CheckCircleIcon className='w-16 h-16 text-green-500 mx-auto' />\n                          <h4 className='mt-4 text-xl font-semibold text-gray-900'>\n                            {t('quoteSender.result.successTitle')}\n                          </h4>\n                          <p className='mt-2 text-gray-600'>\n                            {t('quoteSender.result.successMessage', {\n                              recipient: sendingResult.recipient,\n                            })}\n                          </p>\n                          <div className='mt-4 text-sm text-gray-500 space-y-1'>\n                            <p>\n                              <span className='font-semibold'>\n                                {t('quoteSender.result.messageId')}\n                              </span>{' '}\n                              {sendingResult.messageId}\n                            </p>\n                            <p>\n                              <span className='font-semibold'>\n                                {t('quoteSender.result.timestamp')}\n                              </span>{' '}\n                              {new Date(sendingResult.timestamp).toLocaleString()}\n                            </p>\n                          </div>\n                        </>\n                      ) : (\n                        <>\n                          <ExclamationTriangleIcon className='w-16 h-16 text-red-500 mx-auto' />\n                          <h4 className='mt-4 text-xl font-semibold text-gray-900'>\n                            {t('quoteSender.result.errorTitle')}\n                          </h4>\n                          <p className='mt-2 text-gray-600'>\n                            {t('quoteSender.result.errorMessage')}\n                          </p>\n                          <p className='mt-2 text-sm text-red-600 bg-red-50 p-2 rounded'>\n                            <span className='font-semibold'>\n                              {t('quoteSender.result.errorDetails')}\n                            </span>{' '}\n                            {sendingResult.error}\n                          </p>\n                        </>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Footer Actions */}\n                <div className='bg-gray-50 px-6 py-4 flex justify-end gap-3'>\n                  {step > 1 && step < 4 && (\n                    <button\n                      type='button'\n                      className='px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50'\n                      onClick={() => setStep(step - 1)}\n                    >\n                      {t('quoteSender.buttons.back')}\n                    </button>\n                  )}\n\n                  {step < 3 && (\n                    <button\n                      type='button'\n                      className='px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700'\n                      onClick={handleNext}\n                    >\n                      {step === 1 ? t('quoteSender.buttons.next') : t('quoteSender.buttons.send')}\n                    </button>\n                  )}\n\n                  {step === 4 && (\n                    <>\n                      {!sendingResult.success && (\n                        <button\n                          type='button'\n                          className='px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50'\n                          onClick={() => setStep(1)}\n                        >\n                          {t('quoteSender.buttons.tryAgain')}\n                        </button>\n                      )}\n                      <button\n                        type='button'\n                        className='px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700'\n                        onClick={handleClose}\n                      >\n                        {sendingResult.success\n                          ? t('quoteSender.buttons.close')\n                          : t('quoteSender.buttons.sendAnother')}\n                      </button>\n                    </>\n                  )}\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n};\n\nexport default QuoteEmailSender;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteEmailSender.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteForm.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tag' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clientService' is defined but never used.","line":22,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLoading' is assigned a value but never used.","line":42,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'applyTemplate', 'generateQuoteNumber', 'getDefaultItem', 'loadClients', 'loadPdfTemplates', and 'loadTemplates'. Either include them or remove the dependency array.","line":139,"column":6,"nodeType":"ArrayExpression","endLine":139,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [quote, template, client, loadClients, loadTemplates, loadPdfTemplates, generateQuoteNumber, getDefaultItem, applyTemplate]","fix":{"range":[3250,3275],"text":"[quote, template, client, loadClients, loadTemplates, loadPdfTemplates, generateQuoteNumber, getDefaultItem, applyTemplate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateTotals'. Either include it or remove the dependency array.","line":159,"column":6,"nodeType":"ArrayExpression","endLine":159,"endColumn":71,"suggestions":[{"desc":"Update the dependencies array to be: [formData.items, formData.discount_percentage, formData.tax_rate, calculateTotals]","fix":{"range":[3926,3991],"text":"[formData.items, formData.discount_percentage, formData.tax_rate, calculateTotals]"}}]},{"ruleId":"no-undef","severity":2,"message":"'ClientService' is not defined.","line":184,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pdfBlob' is assigned a value but never used.","line":611,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":611,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Plus,\n  Trash2,\n  Copy,\n  FileText,\n  Calendar,\n  DollarSign,\n  Users,\n  Tag,\n  AlertCircle,\n  Info,\n  Save,\n  RefreshCw,\n  Download,\n  Eye,\n  Mail,\n} from 'lucide-react';\nimport { QuoteService } from '@lib/quoteService';\nimport { QuotePdfService } from '@lib/quotePdfService';\nimport clientService from '@lib/clientService';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport Logger from '@utils/Logger';\n\n/**\n * QuoteForm Component\n * Comprehensive form for creating and editing quotes with versioning, templates, and advanced features\n */\nconst QuoteForm = ({\n  quote = null, // For editing existing quotes\n  client = null, // Pre-selected client\n  template = null, // Template to use\n  isEditMode = false,\n  onSave,\n  onCancel,\n  onError,\n  className = '',\n}) => {\n  const { t } = useTranslation('quotes');\n  const { user } = useUser();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [clients, setClients] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [pdfTemplates, setPdfTemplates] = useState([]);\n  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    // Basic quote information\n    client_id: '',\n    template_id: '',\n    pdf_template_id: 'default', // Default PDF template\n    quote_number: '',\n    title: '',\n    description: '',\n\n    // Dates\n    issue_date: new Date().toISOString().split('T')[0],\n    due_date: '',\n    expiry_date: '',\n\n    // Financial\n    subtotal: 0,\n    tax_rate: 22, // Default Italian VAT\n    tax_amount: 0,\n    discount_percentage: 0,\n    discount_amount: 0,\n    total_amount: 0,\n    currency: 'EUR',\n\n    // Status and workflow\n    status: 'draft',\n    priority: 'medium',\n\n    // Enhanced features\n    notes: '',\n    internal_notes: '',\n    terms_and_conditions: '',\n    payment_terms: '30 days',\n    validity_period: 30,\n\n    // Versioning\n    version_number: 1,\n    parent_quote_id: null,\n\n    // Additional metadata\n    tags: [],\n    category: '',\n    project_name: '',\n    estimated_hours: 0,\n\n    // Quote items\n    items: [\n      {\n        id: Date.now(),\n        description: '',\n        category: '',\n        sku: '',\n        quantity: 1,\n        unit_price: 0,\n        discount_percentage: 0,\n        discount_amount: 0,\n        tax_rate: 22,\n        amount: 0,\n        is_optional: false,\n        notes: '',\n        sort_order: 1,\n      },\n    ],\n  });\n\n  // Initialize form data\n  useEffect(() => {\n    if (quote) {\n      // Editing existing quote\n      setFormData({\n        ...quote,\n        items: quote.quote_items || quote.items || [getDefaultItem()],\n      });\n    } else if (template) {\n      // Using template\n      applyTemplate(template);\n    } else if (client) {\n      // Pre-selected client\n      setFormData(prev => ({\n        ...prev,\n        client_id: client.id,\n      }));\n    }\n\n    // Load supporting data\n    loadClients();\n    loadTemplates();\n    loadPdfTemplates();\n    generateQuoteNumber();\n  }, [quote, template, client]);\n\n  // Calculate dates based on validity period\n  useEffect(() => {\n    if (formData.issue_date && formData.validity_period) {\n      const issueDate = new Date(formData.issue_date);\n      const expiryDate = new Date(issueDate);\n      expiryDate.setDate(expiryDate.getDate() + formData.validity_period);\n\n      setFormData(prev => ({\n        ...prev,\n        expiry_date: expiryDate.toISOString().split('T')[0],\n        due_date: prev.due_date || expiryDate.toISOString().split('T')[0],\n      }));\n    }\n  }, [formData.issue_date, formData.validity_period]);\n\n  // Recalculate totals when items change\n  useEffect(() => {\n    calculateTotals();\n  }, [formData.items, formData.discount_percentage, formData.tax_rate]);\n\n  const getDefaultItem = () => ({\n    id: Date.now() + Math.random(),\n    description: '',\n    category: '',\n    sku: '',\n    quantity: 1,\n    unit_price: 0,\n    discount_percentage: 0,\n    discount_amount: 0,\n    tax_rate: formData.tax_rate || 22,\n    amount: 0,\n    is_optional: false,\n    notes: '',\n    sort_order: formData.items?.length + 1 || 1,\n  });\n\n  const loadClients = async () => {\n    try {\n      if (!user?.id) {\n        Logger.warn('User not available for loading clients');\n        return;\n      }\n\n      const clientService = new ClientService();\n      const result = await clientService.getClients({\n        sortBy: 'full_name',\n        ascending: true,\n        limit: 100, // Load first 100 clients\n      });\n\n      if (result.error) {\n        Logger.error('Error loading clients:', result.error);\n        onError?.(t('errors.loadClientsFailed', 'Failed to load clients'));\n        return;\n      }\n\n      // Transform client data for the form\n      const transformedClients = result.data.map(client => ({\n        id: client.id,\n        name: client.full_name || client.name,\n        email: client.email,\n        phone: client.phone,\n        address: client.address,\n        city: client.city,\n        province: client.province,\n        postal_code: client.postal_code,\n        vat_number: client.vat_number,\n        fiscal_code: client.fiscal_code,\n      }));\n\n      setClients(transformedClients);\n    } catch (error) {\n      Logger.error('Failed to load clients:', error);\n      onError?.(t('errors.loadClientsFailed', 'Failed to load clients'));\n    }\n  };\n\n  const loadTemplates = async () => {\n    try {\n      // Load templates from localStorage (same approach as QuoteTemplateManager)\n      const savedTemplates = localStorage.getItem('quote-templates');\n      if (savedTemplates) {\n        const templates = JSON.parse(savedTemplates);\n        // Transform for QuoteForm usage\n        const transformedTemplates = templates.map(template => ({\n          id: template.id,\n          name: template.name,\n          description: template.description,\n          category: template.category || 'general',\n          is_default: template.isDefault || false,\n          title: template.name,\n          terms_and_conditions: template.terms || '',\n          payment_terms: 'Net 30 days',\n          validity_period: 30,\n          items: template.items || [],\n        }));\n        setTemplates(transformedTemplates);\n        return;\n      }\n\n      // Initialize default templates if none exist\n      const defaultTemplates = [\n        {\n          id: 1,\n          name: t('lifecycle.templates.systemMaintenance.name', 'System Maintenance'),\n          description: 'Standard system maintenance template',\n          category: 'service',\n          items: [\n            {\n              description: 'Monthly system monitoring',\n              quantity: 1,\n              unit_price: 150,\n              tax_rate: 22,\n            },\n            {\n              description: 'Emergency support',\n              quantity: 12,\n              unit_price: 50,\n              tax_rate: 22,\n            },\n          ],\n          terms: t(\n            'lifecycle.templates.systemMaintenance.terms',\n            'Emergency interventions within 4 hours of ticket opening.',\n          ),\n          isDefault: true,\n        },\n        {\n          id: 2,\n          name: t('lifecycle.templates.productSale.name', 'Product Sale'),\n          description: 'Standard product sale template',\n          category: 'product',\n          items: [\n            {\n              description: 'Product item',\n              quantity: 1,\n              unit_price: 250,\n              tax_rate: 22,\n            },\n            {\n              description: 'Installation service',\n              quantity: 1,\n              unit_price: 100,\n              tax_rate: 22,\n            },\n          ],\n          terms: t(\n            'lifecycle.templates.productSale.terms',\n            '24-month warranty on products, 12-month warranty on services.',\n          ),\n          isDefault: false,\n        },\n        {\n          id: 3,\n          name: t('lifecycle.templates.customProject.name', 'Custom Project'),\n          description: 'Custom project template',\n          category: 'consulting',\n          items: [\n            {\n              description: 'Project analysis',\n              quantity: 1,\n              unit_price: 500,\n              tax_rate: 22,\n            },\n            {\n              description: 'Development work',\n              quantity: 1,\n              unit_price: 1500,\n              tax_rate: 22,\n            },\n            {\n              description: 'Testing & delivery',\n              quantity: 1,\n              unit_price: 300,\n              tax_rate: 22,\n            },\n          ],\n          terms: t(\n            'lifecycle.templates.customProject.terms',\n            '50% payment at start, 50% on delivery.',\n          ),\n          isDefault: false,\n        },\n      ];\n\n      // Save to localStorage\n      localStorage.setItem('quote-templates', JSON.stringify(defaultTemplates));\n\n      // Transform for QuoteForm usage\n      const transformedTemplates = defaultTemplates.map(template => ({\n        id: template.id,\n        name: template.name,\n        description: template.description,\n        category: template.category || 'general',\n        is_default: template.isDefault || false,\n        title: template.name,\n        terms_and_conditions: template.terms || '',\n        payment_terms: 'Net 30 days',\n        validity_period: 30,\n        items: template.items || [],\n      }));\n\n      setTemplates(transformedTemplates);\n    } catch (error) {\n      Logger.error('Failed to load templates:', error);\n      onError?.(t('errors.loadTemplatesFailed', 'Failed to load templates'));\n    }\n  };\n\n  const loadPdfTemplates = () => {\n    try {\n      // Get PDF template configurations from the service\n      const templateConfigs = QuotePdfService.getTemplateConfigs();\n      const pdfTemplateList = Object.values(templateConfigs).map(config => ({\n        id: config.id,\n        name: config.name,\n        description: config.description,\n        colors: config.colors,\n      }));\n      setPdfTemplates(pdfTemplateList);\n    } catch (error) {\n      Logger.error('Failed to load PDF templates:', error);\n      onError?.(t('errors.loadPdfTemplatesFailed', 'Failed to load PDF templates'));\n    }\n  };\n\n  const generateQuoteNumber = async () => {\n    try {\n      if (!isEditMode && user?.id) {\n        const quoteNumber = await QuoteService.generateQuoteNumber(user.id);\n        setFormData(prev => ({\n          ...prev,\n          quote_number: quoteNumber,\n        }));\n      }\n    } catch (error) {\n      Logger.error('Failed to generate quote number:', error);\n    }\n  };\n\n  const applyTemplate = template => {\n    setFormData(prev => ({\n      ...prev,\n      template_id: template.id,\n      title: template.title,\n      description: template.description,\n      terms_and_conditions: template.terms_and_conditions,\n      payment_terms: template.payment_terms,\n      validity_period: template.validity_period,\n      items: template.items?.map((item, index) => ({\n        ...getDefaultItem(),\n        ...item,\n        id: Date.now() + index,\n        sort_order: index + 1,\n      })) || [getDefaultItem()],\n    }));\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear validation error for this field\n    if (validationErrors[field]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  const handleItemChange = (itemId, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.map(item => {\n        if (item.id === itemId) {\n          const updatedItem = { ...item, [field]: value };\n\n          // Recalculate item amount\n          if (\n            [\n              'quantity',\n              'unit_price',\n              'discount_percentage',\n              'discount_amount',\n              'tax_rate',\n            ].includes(field)\n          ) {\n            const quantity = parseFloat(updatedItem.quantity) || 0;\n            const unitPrice = parseFloat(updatedItem.unit_price) || 0;\n            const discountPercentage = parseFloat(updatedItem.discount_percentage) || 0;\n            const discountAmount = parseFloat(updatedItem.discount_amount) || 0;\n\n            let subtotal = quantity * unitPrice;\n            let totalDiscount = discountAmount + (subtotal * discountPercentage) / 100;\n            let afterDiscount = subtotal - totalDiscount;\n            let taxAmount = (afterDiscount * (parseFloat(updatedItem.tax_rate) || 0)) / 100;\n\n            updatedItem.amount = afterDiscount + taxAmount;\n          }\n\n          return updatedItem;\n        }\n        return item;\n      }),\n    }));\n  };\n\n  const addItem = () => {\n    const newItem = getDefaultItem();\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, newItem],\n    }));\n  };\n\n  const removeItem = itemId => {\n    if (formData.items.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        items: prev.items.filter(item => item.id !== itemId),\n      }));\n    }\n  };\n\n  const duplicateItem = itemId => {\n    const itemToDuplicate = formData.items.find(item => item.id === itemId);\n    if (itemToDuplicate) {\n      const duplicatedItem = {\n        ...itemToDuplicate,\n        id: Date.now() + Math.random(),\n        sort_order: formData.items.length + 1,\n      };\n      setFormData(prev => ({\n        ...prev,\n        items: [...prev.items, duplicatedItem],\n      }));\n    }\n  };\n\n  const calculateTotals = () => {\n    const itemsSubtotal = formData.items.reduce((sum, item) => {\n      const quantity = parseFloat(item.quantity) || 0;\n      const unitPrice = parseFloat(item.unit_price) || 0;\n      const discountPercentage = parseFloat(item.discount_percentage) || 0;\n      const discountAmount = parseFloat(item.discount_amount) || 0;\n\n      let subtotal = quantity * unitPrice;\n      let totalDiscount = discountAmount + (subtotal * discountPercentage) / 100;\n\n      return sum + (subtotal - totalDiscount);\n    }, 0);\n\n    const globalDiscount = parseFloat(formData.discount_percentage) || 0;\n    const globalDiscountAmount = parseFloat(formData.discount_amount) || 0;\n\n    const subtotalAfterGlobalDiscount =\n      itemsSubtotal - globalDiscountAmount - (itemsSubtotal * globalDiscount) / 100;\n    const taxAmount = (subtotalAfterGlobalDiscount * (parseFloat(formData.tax_rate) || 0)) / 100;\n    const totalAmount = subtotalAfterGlobalDiscount + taxAmount;\n\n    setFormData(prev => ({\n      ...prev,\n      subtotal: itemsSubtotal,\n      tax_amount: taxAmount,\n      total_amount: totalAmount,\n    }));\n  };\n\n  const validateForm = () => {\n    const errors = {};\n\n    if (!formData.client_id) errors.client_id = t('validation.clientRequired');\n    if (!formData.title) errors.title = t('validation.titleRequired');\n    if (!formData.issue_date) errors.issue_date = t('validation.issueDateRequired');\n    if (!formData.due_date) errors.due_date = t('validation.dueDateRequired');\n    if (!formData.expiry_date) errors.expiry_date = t('validation.expiryDateRequired');\n\n    // Validate date logic\n    const issueDate = new Date(formData.issue_date);\n    const dueDate = new Date(formData.due_date);\n    const expiryDate = new Date(formData.expiry_date);\n\n    if (dueDate < issueDate) {\n      errors.due_date = t('validation.dueDateAfterIssue');\n    }\n\n    if (expiryDate < issueDate) {\n      errors.expiry_date = t('validation.expiryDateAfterIssue');\n    }\n\n    // Validate items\n    const itemErrors = [];\n    formData.items.forEach((item, index) => {\n      const itemError = {};\n      if (!item.description) itemError.description = t('validation.itemDescriptionRequired');\n      if (!item.quantity || item.quantity <= 0)\n        itemError.quantity = t('validation.itemQuantityRequired');\n      if (!item.unit_price || item.unit_price < 0)\n        itemError.unit_price = t('validation.itemPriceRequired');\n\n      if (Object.keys(itemError).length > 0) {\n        itemErrors[index] = itemError;\n      }\n    });\n\n    if (itemErrors.length > 0) {\n      errors.items = itemErrors;\n    }\n\n    if (formData.total_amount <= 0) {\n      errors.total_amount = t('validation.totalAmountRequired');\n    }\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handlePdfPreview = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsGeneratingPdf(true);\n    try {\n      const pdfService = new QuotePdfService();\n      await pdfService.generateAndPreview(formData, {\n        templateId: formData.pdf_template_id,\n        userId: user?.id,\n      });\n    } catch (error) {\n      Logger.error('Failed to generate PDF preview:', error);\n      onError?.(t('errors.pdfPreviewFailed', 'Failed to generate PDF preview'));\n    } finally {\n      setIsGeneratingPdf(false);\n    }\n  };\n\n  const handlePdfDownload = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsGeneratingPdf(true);\n    try {\n      const pdfService = new QuotePdfService();\n      await pdfService.generateAndDownload(formData, {\n        templateId: formData.pdf_template_id,\n        userId: user?.id,\n      });\n    } catch (error) {\n      Logger.error('Failed to download PDF:', error);\n      onError?.(t('errors.pdfDownloadFailed', 'Failed to download PDF'));\n    } finally {\n      setIsGeneratingPdf(false);\n    }\n  };\n\n  const handleEmailQuote = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsGeneratingPdf(true);\n    try {\n      // Generate PDF first\n      const pdfService = new QuotePdfService();\n      const pdfBlob = await pdfService.generateBlob(formData, {\n        templateId: formData.pdf_template_id,\n        userId: user?.id,\n      });\n\n      // Here you would integrate with your email service\n      // For now, we'll just show a success message\n      Logger.info('PDF generated for email attachment');\n      onError?.(\n        t(\n          'success.pdfGeneratedForEmail',\n          'PDF generated successfully. Email integration coming soon.',\n        ),\n      );\n    } catch (error) {\n      Logger.error('Failed to generate PDF for email:', error);\n      onError?.(t('errors.emailPdfFailed', 'Failed to generate PDF for email'));\n    } finally {\n      setIsGeneratingPdf(false);\n    }\n  };\n\n  const handleSave = async (asDraft = false) => {\n    try {\n      setIsSaving(true);\n\n      // Update status if saving as draft\n      const dataToSave = {\n        ...formData,\n        status: asDraft ? 'draft' : formData.status,\n      };\n\n      if (!asDraft && !validateForm()) {\n        return;\n      }\n\n      let result;\n      if (isEditMode && quote) {\n        result = await QuoteService.updateQuote(quote.id, dataToSave);\n      } else {\n        result = await QuoteService.createQuote(dataToSave);\n      }\n\n      onSave?.(result);\n    } catch (error) {\n      Logger.error('Failed to save quote:', error);\n      onError?.(error.message || t('errors.saveFailed'));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <div className={`bg-white rounded-lg ${className}`}>\n      {/* Header */}\n      <div className='border-b border-gray-200 p-6'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <h2 className='text-xl font-semibold text-gray-900'>\n              {isEditMode ? t('form.editQuote') : t('form.createQuote')}\n            </h2>\n            <p className='text-sm text-gray-600 mt-1'>\n              {isEditMode ? t('form.editDescription') : t('form.createDescription')}\n            </p>\n          </div>\n          <div className='flex items-center space-x-2'>\n            {formData.quote_number && (\n              <span className='px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full'>\n                {formData.quote_number}\n              </span>\n            )}\n            {isEditMode && (\n              <span className='px-3 py-1 bg-gray-100 text-gray-800 text-sm font-medium rounded-full'>\n                v{formData.version_number}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className='p-6 space-y-6'>\n        {/* Basic Information */}\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Client Selection */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.client')} <span className='text-red-500'>*</span>\n            </label>\n            <select\n              value={formData.client_id}\n              onChange={e => handleInputChange('client_id', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.client_id ? 'border-red-500' : 'border-gray-300'\n              }`}\n            >\n              <option value=''>{t('form.selectClient')}</option>\n              {clients.map(client => (\n                <option key={client.id} value={client.id}>\n                  {client.name}\n                </option>\n              ))}\n            </select>\n            {validationErrors.client_id && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.client_id}</p>\n            )}\n          </div>\n\n          {/* Template Selection */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.template')}\n            </label>\n            <select\n              value={formData.template_id}\n              onChange={e => {\n                const selectedTemplate = templates.find(t => t.id === e.target.value);\n                if (selectedTemplate) {\n                  applyTemplate(selectedTemplate);\n                } else {\n                  handleInputChange('template_id', e.target.value);\n                }\n              }}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            >\n              <option value=''>{t('form.selectTemplate')}</option>\n              {templates.map(template => (\n                <option key={template.id} value={template.id}>\n                  {template.title}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Quote Title */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.title')} <span className='text-red-500'>*</span>\n            </label>\n            <input\n              type='text'\n              value={formData.title}\n              onChange={e => handleInputChange('title', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.title ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder={t('form.titlePlaceholder')}\n            />\n            {validationErrors.title && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.title}</p>\n            )}\n          </div>\n\n          {/* Category */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.category')}\n            </label>\n            <input\n              type='text'\n              value={formData.category}\n              onChange={e => handleInputChange('category', e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('form.categoryPlaceholder')}\n            />\n          </div>\n        </div>\n\n        {/* PDF Template and Actions */}\n        <div className='bg-gray-50 rounded-lg p-4'>\n          <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n            <FileText className='w-5 h-5 mr-2' />\n            {t('form.pdfSettings', 'PDF Settings')}\n          </h3>\n\n          <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n            {/* PDF Template Selection */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.pdfTemplate', 'PDF Template')}\n              </label>\n              <select\n                value={formData.pdf_template_id}\n                onChange={e => handleInputChange('pdf_template_id', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              >\n                {pdfTemplates.map(template => (\n                  <option key={template.id} value={template.id}>\n                    {template.name}\n                  </option>\n                ))}\n              </select>\n              {pdfTemplates.find(t => t.id === formData.pdf_template_id) && (\n                <p className='text-sm text-gray-600 mt-1'>\n                  {pdfTemplates.find(t => t.id === formData.pdf_template_id).description}\n                </p>\n              )}\n            </div>\n\n            {/* PDF Actions */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.pdfActions', 'PDF Actions')}\n              </label>\n              <div className='flex flex-wrap gap-2'>\n                <button\n                  type='button'\n                  onClick={handlePdfPreview}\n                  disabled={isGeneratingPdf || !formData.title || !formData.client_id}\n                  className='flex items-center space-x-2 px-3 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n                >\n                  {isGeneratingPdf ? (\n                    <RefreshCw className='w-4 h-4 animate-spin' />\n                  ) : (\n                    <Eye className='w-4 h-4' />\n                  )}\n                  <span className='text-sm'>{t('form.preview', 'Preview')}</span>\n                </button>\n\n                <button\n                  type='button'\n                  onClick={handlePdfDownload}\n                  disabled={isGeneratingPdf || !formData.title || !formData.client_id}\n                  className='flex items-center space-x-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n                >\n                  {isGeneratingPdf ? (\n                    <RefreshCw className='w-4 h-4 animate-spin' />\n                  ) : (\n                    <Download className='w-4 h-4' />\n                  )}\n                  <span className='text-sm'>{t('form.download', 'Download')}</span>\n                </button>\n\n                <button\n                  type='button'\n                  onClick={handleEmailQuote}\n                  disabled={isGeneratingPdf || !formData.title || !formData.client_id}\n                  className='flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n                >\n                  {isGeneratingPdf ? (\n                    <RefreshCw className='w-4 h-4 animate-spin' />\n                  ) : (\n                    <Mail className='w-4 h-4' />\n                  )}\n                  <span className='text-sm'>{t('form.email', 'Email')}</span>\n                </button>\n              </div>\n              <p className='text-xs text-gray-500 mt-2'>\n                {t('form.pdfActionsNote', 'PDF actions require title and client to be selected')}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className='block text-sm font-medium text-gray-700 mb-2'>\n            {t('form.description')}\n          </label>\n          <textarea\n            value={formData.description}\n            onChange={e => handleInputChange('description', e.target.value)}\n            rows={3}\n            className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            placeholder={t('form.descriptionPlaceholder')}\n          />\n        </div>\n\n        {/* Dates */}\n        <div className='grid grid-cols-1 md:grid-cols-4 gap-6'>\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.issueDate')} <span className='text-red-500'>*</span>\n            </label>\n            <input\n              type='date'\n              value={formData.issue_date}\n              onChange={e => handleInputChange('issue_date', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.issue_date ? 'border-red-500' : 'border-gray-300'\n              }`}\n            />\n            {validationErrors.issue_date && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.issue_date}</p>\n            )}\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.dueDate')} <span className='text-red-500'>*</span>\n            </label>\n            <input\n              type='date'\n              value={formData.due_date}\n              onChange={e => handleInputChange('due_date', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.due_date ? 'border-red-500' : 'border-gray-300'\n              }`}\n            />\n            {validationErrors.due_date && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.due_date}</p>\n            )}\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.expiryDate')} <span className='text-red-500'>*</span>\n            </label>\n            <input\n              type='date'\n              value={formData.expiry_date}\n              onChange={e => handleInputChange('expiry_date', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                validationErrors.expiry_date ? 'border-red-500' : 'border-gray-300'\n              }`}\n            />\n            {validationErrors.expiry_date && (\n              <p className='text-red-500 text-sm mt-1'>{validationErrors.expiry_date}</p>\n            )}\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.validityPeriod')}\n            </label>\n            <div className='flex'>\n              <input\n                type='number'\n                value={formData.validity_period}\n                onChange={e => handleInputChange('validity_period', parseInt(e.target.value))}\n                className='w-full px-3 py-2 border border-gray-300 rounded-l-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                min='1'\n              />\n              <span className='px-3 py-2 bg-gray-100 border border-l-0 border-gray-300 rounded-r-lg text-sm text-gray-600'>\n                {t('form.days')}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Quote Items */}\n        <div>\n          <div className='flex items-center justify-between mb-4'>\n            <h3 className='text-lg font-medium text-gray-900'>{t('form.items')}</h3>\n            <button\n              type='button'\n              onClick={addItem}\n              className='flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n            >\n              <Plus className='w-4 h-4' />\n              <span>{t('form.addItem')}</span>\n            </button>\n          </div>\n\n          <div className='space-y-4'>\n            {formData.items.map((item, index) => (\n              <div key={item.id} className='border border-gray-200 rounded-lg p-4'>\n                <div className='grid grid-cols-1 md:grid-cols-6 gap-4'>\n                  {/* Description */}\n                  <div className='md:col-span-2'>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('form.itemDescription')} <span className='text-red-500'>*</span>\n                    </label>\n                    <input\n                      type='text'\n                      value={item.description}\n                      onChange={e => handleItemChange(item.id, 'description', e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.items?.[index]?.description\n                          ? 'border-red-500'\n                          : 'border-gray-300'\n                      }`}\n                      placeholder={t('form.itemDescriptionPlaceholder')}\n                    />\n                    {validationErrors.items?.[index]?.description && (\n                      <p className='text-red-500 text-xs mt-1'>\n                        {validationErrors.items[index].description}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Quantity */}\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('form.quantity')} <span className='text-red-500'>*</span>\n                    </label>\n                    <input\n                      type='number'\n                      value={item.quantity}\n                      onChange={e =>\n                        handleItemChange(item.id, 'quantity', parseFloat(e.target.value))\n                      }\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.items?.[index]?.quantity\n                          ? 'border-red-500'\n                          : 'border-gray-300'\n                      }`}\n                      min='0'\n                      step='0.01'\n                    />\n                    {validationErrors.items?.[index]?.quantity && (\n                      <p className='text-red-500 text-xs mt-1'>\n                        {validationErrors.items[index].quantity}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Unit Price */}\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('form.unitPrice')} <span className='text-red-500'>*</span>\n                    </label>\n                    <input\n                      type='number'\n                      value={item.unit_price}\n                      onChange={e =>\n                        handleItemChange(item.id, 'unit_price', parseFloat(e.target.value))\n                      }\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.items?.[index]?.unit_price\n                          ? 'border-red-500'\n                          : 'border-gray-300'\n                      }`}\n                      min='0'\n                      step='0.01'\n                    />\n                    {validationErrors.items?.[index]?.unit_price && (\n                      <p className='text-red-500 text-xs mt-1'>\n                        {validationErrors.items[index].unit_price}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Discount */}\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('form.discount')} (%)\n                    </label>\n                    <input\n                      type='number'\n                      value={item.discount_percentage}\n                      onChange={e =>\n                        handleItemChange(item.id, 'discount_percentage', parseFloat(e.target.value))\n                      }\n                      className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                      min='0'\n                      max='100'\n                      step='0.01'\n                    />\n                  </div>\n\n                  {/* Amount */}\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 mb-1'>\n                      {t('form.amount')}\n                    </label>\n                    <input\n                      type='number'\n                      value={item.amount.toFixed(2)}\n                      readOnly\n                      className='w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600'\n                    />\n                  </div>\n                </div>\n\n                {/* Item Actions */}\n                <div className='flex items-center justify-between mt-4'>\n                  <div className='flex items-center space-x-4'>\n                    <label className='flex items-center'>\n                      <input\n                        type='checkbox'\n                        checked={item.is_optional}\n                        onChange={e => handleItemChange(item.id, 'is_optional', e.target.checked)}\n                        className='rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                      />\n                      <span className='ml-2 text-sm text-gray-600'>{t('form.optionalItem')}</span>\n                    </label>\n                  </div>\n\n                  <div className='flex items-center space-x-2'>\n                    <button\n                      type='button'\n                      onClick={() => duplicateItem(item.id)}\n                      className='p-2 text-gray-400 hover:text-gray-600 transition-colors'\n                      title={t('form.duplicateItem')}\n                    >\n                      <Copy className='w-4 h-4' />\n                    </button>\n                    <button\n                      type='button'\n                      onClick={() => removeItem(item.id)}\n                      disabled={formData.items.length <= 1}\n                      className='p-2 text-gray-400 hover:text-red-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n                      title={t('form.removeItem')}\n                    >\n                      <Trash2 className='w-4 h-4' />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Financial Summary */}\n        <div className='bg-gray-50 rounded-lg p-4'>\n          <h3 className='text-lg font-medium text-gray-900 mb-4'>{t('form.financialSummary')}</h3>\n\n          <div className='grid grid-cols-1 md:grid-cols-3 gap-4 mb-4'>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.globalDiscount')} (%)\n              </label>\n              <input\n                type='number'\n                value={formData.discount_percentage}\n                onChange={e =>\n                  handleInputChange('discount_percentage', parseFloat(e.target.value) || 0)\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                min='0'\n                max='100'\n                step='0.01'\n              />\n            </div>\n\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.taxRate')} (%)\n              </label>\n              <input\n                type='number'\n                value={formData.tax_rate}\n                onChange={e => handleInputChange('tax_rate', parseFloat(e.target.value) || 0)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                min='0'\n                max='100'\n                step='0.01'\n              />\n            </div>\n\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                {t('form.currency')}\n              </label>\n              <select\n                value={formData.currency}\n                onChange={e => handleInputChange('currency', e.target.value)}\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              >\n                <option value='EUR'>EUR (Ôé¼)</option>\n                <option value='USD'>USD ($)</option>\n                <option value='GBP'>GBP (┬ú)</option>\n              </select>\n            </div>\n          </div>\n\n          <div className='border-t border-gray-200 pt-4 space-y-2'>\n            <div className='flex justify-between text-sm'>\n              <span className='text-gray-600'>{t('form.subtotal')}:</span>\n              <span className='font-medium'>\n                {formData.currency} {formData.subtotal.toFixed(2)}\n              </span>\n            </div>\n            <div className='flex justify-between text-sm'>\n              <span className='text-gray-600'>{t('form.tax')}:</span>\n              <span className='font-medium'>\n                {formData.currency} {formData.tax_amount.toFixed(2)}\n              </span>\n            </div>\n            <div className='flex justify-between text-lg font-semibold text-gray-900 border-t border-gray-200 pt-2'>\n              <span>{t('form.total')}:</span>\n              <span>\n                {formData.currency} {formData.total_amount.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Additional Information */}\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.notes')}\n            </label>\n            <textarea\n              value={formData.notes}\n              onChange={e => handleInputChange('notes', e.target.value)}\n              rows={3}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('form.notesPlaceholder')}\n            />\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.termsAndConditions')}\n            </label>\n            <textarea\n              value={formData.terms_and_conditions}\n              onChange={e => handleInputChange('terms_and_conditions', e.target.value)}\n              rows={3}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('form.termsPlaceholder')}\n            />\n          </div>\n        </div>\n\n        {/* Status and Priority */}\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-6'>\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.status')}\n            </label>\n            <select\n              value={formData.status}\n              onChange={e => handleInputChange('status', e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            >\n              <option value='draft'>{t('status.draft')}</option>\n              <option value='pending'>{t('status.pending')}</option>\n              <option value='sent'>{t('status.sent')}</option>\n              <option value='accepted'>{t('status.accepted')}</option>\n              <option value='rejected'>{t('status.rejected')}</option>\n              <option value='expired'>{t('status.expired')}</option>\n            </select>\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.priority')}\n            </label>\n            <select\n              value={formData.priority}\n              onChange={e => handleInputChange('priority', e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            >\n              <option value='low'>{t('priority.low')}</option>\n              <option value='medium'>{t('priority.medium')}</option>\n              <option value='high'>{t('priority.high')}</option>\n              <option value='urgent'>{t('priority.urgent')}</option>\n            </select>\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('form.paymentTerms')}\n            </label>\n            <select\n              value={formData.payment_terms}\n              onChange={e => handleInputChange('payment_terms', e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            >\n              <option value='immediate'>{t('paymentTerms.immediate')}</option>\n              <option value='15 days'>{t('paymentTerms.15days')}</option>\n              <option value='30 days'>{t('paymentTerms.30days')}</option>\n              <option value='45 days'>{t('paymentTerms.45days')}</option>\n              <option value='60 days'>{t('paymentTerms.60days')}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer Actions */}\n      <div className='border-t border-gray-200 px-6 py-4'>\n        <div className='flex items-center justify-between'>\n          <div className='flex items-center space-x-2'>\n            {validationErrors.total_amount && (\n              <div className='flex items-center text-red-600 text-sm'>\n                <AlertCircle className='w-4 h-4 mr-1' />\n                <span>{validationErrors.total_amount}</span>\n              </div>\n            )}\n          </div>\n\n          <div className='flex items-center space-x-3'>\n            <button\n              type='button'\n              onClick={onCancel}\n              disabled={isSaving}\n              className='px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50'\n            >\n              {t('form.cancel')}\n            </button>\n\n            <button\n              type='button'\n              onClick={() => handleSave(true)}\n              disabled={isSaving}\n              className='flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50'\n            >\n              <Save className='w-4 h-4' />\n              <span>{t('form.saveAsDraft')}</span>\n            </button>\n\n            <button\n              type='button'\n              onClick={() => handleSave(false)}\n              disabled={isSaving}\n              className='flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50'\n            >\n              {isSaving ? (\n                <RefreshCw className='w-4 h-4 animate-spin' />\n              ) : (\n                <Save className='w-4 h-4' />\n              )}\n              <span>{isEditMode ? t('form.updateQuote') : t('form.createQuote')}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteForm;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteLifecycleManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteModal.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [handleClose, isOpen]","fix":{"range":[1311,1319],"text":"[handleClose, isOpen]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { X, AlertCircle, CheckCircle, Loader } from 'lucide-react';\nimport QuoteForm from './QuoteForm';\nimport Logger from '@utils/Logger';\n\n/**\n * QuoteModal Component\n * Modal wrapper for creating and editing quotes using the QuoteForm component\n */\nconst QuoteModal = ({\n  isOpen,\n  onClose,\n  quote = null, // For editing existing quotes\n  client = null, // Pre-selected client\n  template = null, // Template to use\n  onQuoteCreated,\n  onQuoteUpdated,\n  className = '',\n}) => {\n  const { t } = useTranslation('quotes');\n  const [notification, setNotification] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const isEditMode = !!quote;\n\n  // Clear notification after 5 seconds\n  useEffect(() => {\n    if (notification) {\n      const timer = setTimeout(() => {\n        setNotification(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [notification]);\n\n  // Handle escape key to close modal\n  useEffect(() => {\n    const handleEscape = e => {\n      if (e.key === 'Escape' && isOpen) {\n        handleClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen]);\n\n  // Prevent scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n\n  const handleClose = () => {\n    if (!isLoading) {\n      setNotification(null);\n      onClose();\n    }\n  };\n\n  const handleSave = async quoteData => {\n    try {\n      setIsLoading(true);\n\n      if (isEditMode) {\n        await onQuoteUpdated?.(quoteData);\n        setNotification({\n          type: 'success',\n          message: t('notifications.quoteUpdated', 'Quote updated successfully'),\n        });\n      } else {\n        await onQuoteCreated?.(quoteData);\n        setNotification({\n          type: 'success',\n          message: t('notifications.quoteCreated', 'Quote created successfully'),\n        });\n      }\n\n      // Close modal after a brief delay to show success message\n      setTimeout(() => {\n        handleClose();\n      }, 1500);\n    } catch (error) {\n      Logger.error('Error in QuoteModal handleSave:', error);\n      setNotification({\n        type: 'error',\n        message: error.message || t('notifications.saveFailed', 'Failed to save quote'),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleError = errorMessage => {\n    setNotification({\n      type: 'error',\n      message: errorMessage,\n    });\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className='fixed inset-0 z-50 overflow-y-auto'>\n      {/* Background overlay */}\n      <div\n        className='fixed inset-0 bg-black bg-opacity-50 transition-opacity'\n        onClick={handleClose}\n      />\n\n      {/* Modal container */}\n      <div className='flex min-h-full items-center justify-center p-4'>\n        <div\n          className={`relative w-full max-w-4xl bg-white rounded-xl shadow-2xl transform transition-all ${className}`}\n          onClick={e => e.stopPropagation()}\n        >\n          {/* Loading overlay */}\n          {isLoading && (\n            <div className='absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10 rounded-xl'>\n              <div className='flex flex-col items-center'>\n                <Loader className='w-8 h-8 animate-spin text-blue-600 mb-2' />\n                <span className='text-sm text-gray-600'>\n                  {isEditMode\n                    ? t('loading.updating', 'Updating quote...')\n                    : t('loading.creating', 'Creating quote...')}\n                </span>\n              </div>\n            </div>\n          )}\n\n          {/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={isLoading}\n            className='absolute top-4 right-4 z-20 p-2 rounded-full hover:bg-gray-100 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n          >\n            <X className='w-5 h-5 text-gray-500' />\n          </button>\n\n          {/* Notification */}\n          {notification && (\n            <div\n              className={`absolute top-4 left-4 right-16 z-20 p-4 rounded-lg border ${\n                notification.type === 'success'\n                  ? 'bg-green-50 border-green-200 text-green-800'\n                  : 'bg-red-50 border-red-200 text-red-800'\n              }`}\n            >\n              <div className='flex items-center'>\n                {notification.type === 'success' ? (\n                  <CheckCircle className='w-5 h-5 mr-2' />\n                ) : (\n                  <AlertCircle className='w-5 h-5 mr-2' />\n                )}\n                <span className='text-sm font-medium'>{notification.message}</span>\n              </div>\n            </div>\n          )}\n\n          {/* Modal content */}\n          <div className='max-h-[90vh] overflow-y-auto'>\n            <QuoteForm\n              quote={quote}\n              client={client}\n              template={template}\n              isEditMode={isEditMode}\n              onSave={handleSave}\n              onCancel={handleClose}\n              onError={handleError}\n              className='border-0 shadow-none'\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteSearchFilter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteStatusBadge.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteStatusHistory.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadStatusHistory'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [loadStatusHistory, quoteId, user.id]","fix":{"range":[827,846],"text":"[loadStatusHistory, quoteId, user.id]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":156,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5564,5565],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5564,5565],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5564,5565],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5564,5565],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":156,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5578,5579],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5578,5579],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5578,5579],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5578,5579],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { QuoteApprovalService } from '@lib/quoteApprovalService';\nimport QuoteStatusBadge from './QuoteStatusBadge';\nimport Logger from '@utils/Logger';\nimport { Plus, CheckCircle, XCircle, Clock, Send, Ban, RotateCcw, FileText } from 'lucide-react';\n\n/**\n * QuoteStatusHistory Component\n * Displays the status change history for a quote\n */\nconst QuoteStatusHistory = ({ quoteId, className = '' }) => {\n  const { t } = useTranslation();\n  const { user } = useUser();\n  const [history, setHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadStatusHistory();\n  }, [quoteId, user?.id]);\n\n  const loadStatusHistory = async () => {\n    if (!user?.id || !quoteId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const historyData = await QuoteApprovalService.getQuoteStatusHistory(quoteId, user.id);\n      setHistory(historyData || []);\n    } catch (error) {\n      Logger.error('Failed to load quote status history:', error);\n      setError(t('quotes.errors.history_load_failed', 'Failed to load status history'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getChangeIcon = (oldStatus, newStatus) => {\n    if (!oldStatus) return Plus; // New quote\n    if (newStatus === 'accepted') return CheckCircle;\n    if (newStatus === 'rejected') return XCircle;\n    if (newStatus === 'expired') return Clock;\n    if (newStatus === 'sent') return Send;\n    if (newStatus === 'cancelled') return Ban;\n    if (newStatus === 'converted') return RotateCcw;\n    return FileText;\n  };\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-3 ${className}`}>\n        <h3 className='text-lg font-medium text-gray-900'>\n          {t('quotes.status_history.title', 'Status History')}\n        </h3>\n        <div className='flex items-center justify-center py-8'>\n          <div className='animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600'></div>\n          <span className='ml-2 text-sm text-gray-600'>{t('common.loading', 'Loading...')}</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`space-y-3 ${className}`}>\n        <h3 className='text-lg font-medium text-gray-900'>\n          {t('quotes.status_history.title', 'Status History')}\n        </h3>\n        <div className='p-4 bg-red-50 border border-red-200 rounded-md'>\n          <div className='text-sm text-red-800'>{error}</div>\n          <button\n            onClick={loadStatusHistory}\n            className='mt-2 text-sm text-red-600 hover:text-red-700 underline'\n          >\n            {t('common.retry', 'Retry')}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (history.length === 0) {\n    return (\n      <div className={`space-y-3 ${className}`}>\n        <h3 className='text-lg font-medium text-gray-900'>\n          {t('quotes.status_history.title', 'Status History')}\n        </h3>\n        <div className='text-sm text-gray-500 py-4'>\n          {t('quotes.status_history.no_history', 'No status changes recorded yet.')}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-3 ${className}`}>\n      <h3 className='text-lg font-medium text-gray-900'>\n        {t('quotes.status_history.title', 'Status History')}\n      </h3>\n\n      <div className='space-y-3'>\n        {history.map((entry, index) => (\n          <div\n            key={entry.id || index}\n            className='flex items-start space-x-3 p-3 bg-gray-50 border border-gray-200 rounded-md'\n          >\n            {/* Icon */}\n            <div className='flex-shrink-0 mt-0.5'>\n              {React.createElement(getChangeIcon(entry.old_status, entry.new_status), {\n                className: 'w-5 h-5 text-gray-600',\n              })}\n            </div>\n\n            {/* Content */}\n            <div className='flex-1 min-w-0'>\n              <div className='flex items-center gap-2 mb-1'>\n                {/* Status badges */}\n                {entry.old_status && (\n                  <>\n                    <QuoteStatusBadge status={entry.old_status} />\n                    <span className='text-gray-400'>ÔåÆ</span>\n                  </>\n                )}\n                <QuoteStatusBadge status={entry.new_status} />\n\n                {/* Automated flag */}\n                {entry.automated && (\n                  <span className='inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800'>\n                    {t('quotes.status_history.automated', 'Auto')}\n                  </span>\n                )}\n              </div>\n\n              {/* Details */}\n              <div className='text-sm text-gray-600'>\n                <div className='flex items-center gap-2 mb-1'>\n                  <span className='font-medium'>\n                    {entry.old_status\n                      ? t('quotes.status_history.changed', 'Status changed')\n                      : t('quotes.status_history.created', 'Quote created')}\n                  </span>\n                  <span>ÔÇó</span>\n                  <span>{formatDate(entry.created_at)}</span>\n                </div>\n\n                {/* Notes */}\n                {entry.notes && (\n                  <div className='mt-1 text-xs text-gray-500 italic'>\"{entry.notes}\"</div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Refresh button */}\n      <div className='flex justify-end'>\n        <button\n          onClick={loadStatusHistory}\n          className='text-sm text-blue-600 hover:text-blue-700 underline'\n        >\n          {t('common.refresh', 'Refresh')}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteStatusHistory;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteTemplateManager.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTemplates'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, currentUser, t, loadTemplates]","fix":{"range":[1027,1051],"text":"[isOpen, currentUser, t, loadTemplates]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { Fragment } from 'react';\nimport {\n  PlusIcon,\n  TrashIcon,\n  PencilIcon,\n  EyeIcon,\n  XMarkIcon,\n  DocumentTextIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline';\nimport Logger from '@utils/Logger';\nimport { useTranslation } from 'react-i18next';\n\nconst QuoteTemplateManager = ({ isOpen, onClose, onSelectTemplate, currentUser }) => {\n  const { t } = useTranslation('quotes');\n  const [templates, setTemplates] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showPreviewModal, setShowPreviewModal] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [error, setError] = useState('');\n\n  // Load templates when component opens\n  useEffect(() => {\n    if (isOpen && currentUser) {\n      loadTemplates();\n    }\n  }, [isOpen, currentUser, t]);\n\n  const loadTemplates = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      // Try to load from local storage first (for persistence)\n      const savedTemplates = localStorage.getItem('quote-templates');\n      if (savedTemplates) {\n        setTemplates(JSON.parse(savedTemplates));\n        setLoading(false);\n        return;\n      }\n\n      // Default templates if none saved\n      const defaultTemplates = [\n        {\n          id: 1,\n          name: t('templateManager.defaultTemplates.standardConsulting.name'),\n          description: t('templateManager.defaultTemplates.standardConsulting.description'),\n          category: t('templateManager.defaultTemplates.standardConsulting.category'),\n          items: [\n            {\n              description: t('templateManager.defaultTemplates.standardConsulting.items.item1'),\n              quantity: 1,\n              unitPrice: 80,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.standardConsulting.items.item2'),\n              quantity: 4,\n              unitPrice: 60,\n              taxRate: 22,\n            },\n          ],\n          notes: t('templateManager.defaultTemplates.standardConsulting.notes'),\n          terms: t('templateManager.defaultTemplates.standardConsulting.terms'),\n          createdAt: new Date().toISOString(),\n          isDefault: true,\n        },\n        {\n          id: 2,\n          name: t('templateManager.defaultTemplates.softwareDevelopment.name'),\n          description: t('templateManager.defaultTemplates.softwareDevelopment.description'),\n          category: t('templateManager.defaultTemplates.softwareDevelopment.category'),\n          items: [\n            {\n              description: t('templateManager.defaultTemplates.softwareDevelopment.items.item1'),\n              quantity: 20,\n              unitPrice: 70,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.softwareDevelopment.items.item2'),\n              quantity: 80,\n              unitPrice: 65,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.softwareDevelopment.items.item3'),\n              quantity: 16,\n              unitPrice: 55,\n              taxRate: 22,\n            },\n          ],\n          notes: t('templateManager.defaultTemplates.softwareDevelopment.notes'),\n          terms: t('templateManager.defaultTemplates.softwareDevelopment.terms'),\n          createdAt: new Date().toISOString(),\n          isDefault: false,\n        },\n        {\n          id: 3,\n          name: t('templateManager.defaultTemplates.systemMaintenance.name'),\n          description: t('templateManager.defaultTemplates.systemMaintenance.description'),\n          category: t('templateManager.defaultTemplates.systemMaintenance.category'),\n          items: [\n            {\n              description: t('templateManager.defaultTemplates.systemMaintenance.items.item1'),\n              quantity: 12,\n              unitPrice: 150,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.systemMaintenance.items.item2'),\n              quantity: 12,\n              unitPrice: 50,\n              taxRate: 22,\n            },\n          ],\n          notes: t('templateManager.defaultTemplates.systemMaintenance.notes'),\n          terms: t('templateManager.defaultTemplates.systemMaintenance.terms'),\n          createdAt: new Date().toISOString(),\n          isDefault: false,\n        },\n        {\n          id: 4,\n          name: t('templateManager.defaultTemplates.productSale.name'),\n          description: t('templateManager.defaultTemplates.productSale.description'),\n          category: t('templateManager.defaultTemplates.productSale.category'),\n          items: [\n            {\n              description: t('templateManager.defaultTemplates.productSale.items.item1'),\n              quantity: 2,\n              unitPrice: 250,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.productSale.items.item2'),\n              quantity: 1,\n              unitPrice: 100,\n              taxRate: 22,\n            },\n          ],\n          notes: t('templateManager.defaultTemplates.productSale.notes'),\n          terms: t('templateManager.defaultTemplates.productSale.terms'),\n          createdAt: new Date().toISOString(),\n          isDefault: false,\n        },\n        {\n          id: 5,\n          name: t('templateManager.defaultTemplates.customProject.name'),\n          description: t('templateManager.defaultTemplates.customProject.description'),\n          category: t('templateManager.defaultTemplates.customProject.category'),\n          items: [\n            {\n              description: t('templateManager.defaultTemplates.customProject.items.item1'),\n              quantity: 1,\n              unitPrice: 500,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.customProject.items.item2'),\n              quantity: 1,\n              unitPrice: 1500,\n              taxRate: 22,\n            },\n            {\n              description: t('templateManager.defaultTemplates.customProject.items.item3'),\n              quantity: 1,\n              unitPrice: 300,\n              taxRate: 22,\n            },\n          ],\n          notes: t('templateManager.defaultTemplates.customProject.notes'),\n          terms: t('templateManager.defaultTemplates.customProject.terms'),\n          createdAt: new Date().toISOString(),\n          isDefault: false,\n        },\n      ];\n\n      // Save default templates to localStorage\n      localStorage.setItem('quote-templates', JSON.stringify(defaultTemplates));\n      setTemplates(defaultTemplates);\n    } catch (error) {\n      Logger.error('Error loading templates:', error);\n      setError(t('templateManager.loadError'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateTemplateTotal = template => {\n    const subtotal = template.items.reduce((sum, item) => {\n      return sum + item.quantity * item.unitPrice;\n    }, 0);\n\n    const taxAmount = template.items.reduce((sum, item) => {\n      const lineTotal = item.quantity * item.unitPrice;\n      return sum + lineTotal * (item.taxRate / 100);\n    }, 0);\n\n    return {\n      subtotal,\n      taxAmount,\n      total: subtotal + taxAmount,\n    };\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount);\n  };\n\n  const handleSelectTemplate = template => {\n    if (onSelectTemplate) {\n      onSelectTemplate(template);\n    }\n    onClose();\n  };\n\n  const handleCreateTemplate = () => {\n    setSelectedTemplate(null);\n    setShowCreateModal(true);\n  };\n\n  const handleEditTemplate = template => {\n    setSelectedTemplate(template);\n    setShowEditModal(true);\n  };\n\n  const handlePreviewTemplate = template => {\n    setSelectedTemplate(template);\n    setShowPreviewModal(true);\n  };\n\n  const handleDeleteTemplate = async templateId => {\n    if (window.confirm(t('templateManager.deleteConfirm'))) {\n      try {\n        const updatedTemplates = templates.filter(t => t.id !== templateId);\n        setTemplates(updatedTemplates);\n        // Save to localStorage\n        localStorage.setItem('quote-templates', JSON.stringify(updatedTemplates));\n        Logger.info('Template deleted:', templateId);\n      } catch (error) {\n        Logger.error('Error deleting template:', error);\n        setError(t('templateManager.deleteError'));\n      }\n    }\n  };\n\n  const handleSaveTemplate = async templateData => {\n    try {\n      let updatedTemplates;\n\n      if (selectedTemplate) {\n        // Update existing template\n        updatedTemplates = templates.map(t =>\n          t.id === selectedTemplate.id\n            ? { ...templateData, id: selectedTemplate.id, updatedAt: new Date().toISOString() }\n            : t,\n        );\n      } else {\n        // Create new template\n        const newTemplate = {\n          ...templateData,\n          id: Date.now(),\n          createdAt: new Date().toISOString(),\n          isDefault: false,\n        };\n        updatedTemplates = [...templates, newTemplate];\n      }\n\n      setTemplates(updatedTemplates);\n      // Save to localStorage\n      localStorage.setItem('quote-templates', JSON.stringify(updatedTemplates));\n\n      setShowCreateModal(false);\n      setShowEditModal(false);\n      setSelectedTemplate(null);\n    } catch (error) {\n      Logger.error('Error saving template:', error);\n      setError(t('templateManager.form.saveError'));\n    }\n  };\n\n  // Removed unused getCategoryColor function\n\n  // Removed unused handleDuplicateTemplate function\n\n  return (\n    <>\n      <Transition appear show={isOpen} as={Fragment}>\n        <Dialog as='div' className='relative z-50' onClose={onClose}>\n          <Transition.Child\n            as={Fragment}\n            enter='ease-out duration-300'\n            enterFrom='opacity-0'\n            enterTo='opacity-100'\n            leave='ease-in duration-200'\n            leaveFrom='opacity-100'\n            leaveTo='opacity-0'\n          >\n            <div className='fixed inset-0 bg-black bg-opacity-25' />\n          </Transition.Child>\n\n          <div className='fixed inset-0 overflow-y-auto'>\n            <div className='flex min-h-full items-center justify-center p-4 text-center'>\n              <Transition.Child\n                as={Fragment}\n                enter='ease-out duration-300'\n                enterFrom='opacity-0 scale-95'\n                enterTo='opacity-100 scale-100'\n                leave='ease-in duration-200'\n                leaveFrom='opacity-100 scale-100'\n                leaveTo='opacity-0 scale-95'\n              >\n                <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all'>\n                  <Dialog.Title\n                    as='h3'\n                    className='text-lg font-medium leading-6 text-gray-900 dark:text-white'\n                  >\n                    {t('templateManager.title')}\n                  </Dialog.Title>\n                  <div className='absolute top-0 right-0 pt-4 pr-4'>\n                    <button\n                      onClick={onClose}\n                      className='rounded-md bg-white dark:bg-gray-700 text-gray-400 hover:text-gray-500'\n                    >\n                      <XMarkIcon className='h-6 w-6' />\n                    </button>\n                  </div>\n                  <div className='mt-4'>\n                    <div className='flex justify-between items-center mb-4'>\n                      <button\n                        onClick={handleCreateTemplate}\n                        className='inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                      >\n                        <PlusIcon className='-ml-1 mr-2 h-5 w-5' />\n                        {t('templateManager.createNew')}\n                      </button>\n                      <div className='w-64'>\n                        <input\n                          type='text'\n                          placeholder={t('templateManager.searchPlaceholder')}\n                          className='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-sm'\n                          // onChange={...}\n                        />\n                      </div>\n                    </div>\n\n                    {loading && <p>{t('templateManager.loading')}</p>}\n                    {error && <p className='text-red-500'>{error}</p>}\n\n                    <div className='overflow-x-auto'>\n                      <table className='min-w-full divide-y divide-gray-200 dark:divide-gray-700'>\n                        <thead className='bg-gray-50 dark:bg-gray-700'>\n                          <tr>\n                            <th\n                              scope='col'\n                              className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'\n                            >\n                              {t('templateManager.form.nameLabel')}\n                            </th>\n                            <th\n                              scope='col'\n                              className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'\n                            >\n                              {t('templateManager.form.categoryLabel')}\n                            </th>\n                            <th\n                              scope='col'\n                              className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'\n                            >\n                              {t('templateManager.previewModal.total')}\n                            </th>\n                            <th scope='col' className='relative px-6 py-3'>\n                              <span className='sr-only'>Actions</span>\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className='bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700'>\n                          {templates.length > 0 ? (\n                            templates.map(template => (\n                              <tr key={template.id}>\n                                <td className='px-6 py-4 whitespace-nowrap'>\n                                  <div className='text-sm font-medium text-gray-900 dark:text-white'>\n                                    {template.name}\n                                  </div>\n                                  <div className='text-sm text-gray-500 dark:text-gray-400'>\n                                    {template.description}\n                                  </div>\n                                </td>\n                                <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400'>\n                                  {template.category}\n                                </td>\n                                <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n                                  {formatCurrency(calculateTemplateTotal(template).total)}\n                                </td>\n                                <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium'>\n                                  <div className='flex items-center justify-end space-x-2'>\n                                    <button\n                                      onClick={() => handleSelectTemplate(template)}\n                                      className='text-blue-600 hover:text-blue-800'\n                                      title={t('templateManager.select')}\n                                    >\n                                      <CheckCircleIcon className='h-5 w-5' />\n                                    </button>\n                                    <button\n                                      onClick={() => handlePreviewTemplate(template)}\n                                      className='text-gray-500 hover:text-gray-700'\n                                      title={t('templateManager.preview')}\n                                    >\n                                      <EyeIcon className='h-5 w-5' />\n                                    </button>\n                                    <button\n                                      onClick={() => handleEditTemplate(template)}\n                                      className='text-yellow-500 hover:text-yellow-700'\n                                      title={t('templateManager.edit')}\n                                    >\n                                      <PencilIcon className='h-5 w-5' />\n                                    </button>\n                                    <button\n                                      onClick={() => handleDeleteTemplate(template.id)}\n                                      className='text-red-500 hover:text-red-700'\n                                      title={t('templateManager.delete')}\n                                    >\n                                      <TrashIcon className='h-5 w-5' />\n                                    </button>\n                                  </div>\n                                </td>\n                              </tr>\n                            ))\n                          ) : (\n                            <tr>\n                              <td colSpan='4' className='px-6 py-12 text-center'>\n                                <DocumentTextIcon className='mx-auto h-12 w-12 text-gray-400' />\n                                <h3 className='mt-2 text-sm font-medium text-gray-900 dark:text-white'>\n                                  {t('templateManager.noTemplates')}\n                                </h3>\n                              </td>\n                            </tr>\n                          )}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </Dialog>\n      </Transition>\n\n      {showCreateModal && (\n        <TemplateFormModal\n          isOpen={showCreateModal}\n          onClose={() => setShowCreateModal(false)}\n          onSave={handleSaveTemplate}\n          isEditing={false}\n        />\n      )}\n\n      {showEditModal && (\n        <TemplateFormModal\n          isOpen={showEditModal}\n          onClose={() => setShowEditModal(false)}\n          onSave={handleSaveTemplate}\n          template={selectedTemplate}\n          isEditing={true}\n        />\n      )}\n\n      {showPreviewModal && (\n        <TemplatePreviewModal\n          isOpen={showPreviewModal}\n          onClose={() => setShowPreviewModal(false)}\n          template={selectedTemplate}\n        />\n      )}\n    </>\n  );\n};\n\n// Template Form Modal Component\nconst TemplateFormModal = ({ isOpen, onClose, onSave, template, isEditing }) => {\n  const { t } = useTranslation('quotes');\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    category: 'Servizi',\n    items: [{ description: '', quantity: 1, unitPrice: 0, taxRate: 22 }],\n    notes: '',\n    terms: '',\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (template) {\n        setFormData({\n          name: template.name || '',\n          description: template.description || '',\n          category: template.category || 'Servizi',\n          items: template.items || [{ description: '', quantity: 1, unitPrice: 0, taxRate: 22 }],\n          notes: template.notes || '',\n          terms: template.terms || '',\n        });\n      } else {\n        setFormData({\n          name: '',\n          description: '',\n          category: 'Servizi',\n          items: [{ description: '', quantity: 1, unitPrice: 0, taxRate: 22 }],\n          notes: '',\n          terms: '',\n        });\n      }\n    }\n  }, [isOpen, template]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleItemChange = (index, field, value) => {\n    const newItems = [...formData.items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    setFormData(prev => ({ ...prev, items: newItems }));\n  };\n\n  const addItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, { description: '', quantity: 1, unitPrice: 0, taxRate: 22 }],\n    }));\n  };\n\n  const removeItem = index => {\n    if (formData.items.length > 1) {\n      const newItems = formData.items.filter((_, i) => i !== index);\n      setFormData(prev => ({ ...prev, items: newItems }));\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!formData.name || !formData.description) {\n      alert(t('templateManager.form.nameRequired'));\n      return;\n    }\n\n    const validItems = formData.items.filter(\n      item => item.description && item.description.trim() !== '',\n    );\n\n    if (validItems.length === 0) {\n      alert(t('templateManager.form.itemRequired'));\n      return;\n    }\n\n    onSave({ ...formData, items: validItems });\n  };\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-black bg-opacity-25' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 overflow-y-auto'>\n          <div className='flex min-h-full items-center justify-center p-4'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 scale-95'\n              enterTo='opacity-100 scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 scale-100'\n              leaveTo='opacity-0 scale-95'\n            >\n              <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all'>\n                <div className='flex items-center justify-between mb-6'>\n                  <Dialog.Title className='text-lg font-medium text-gray-900 dark:text-white'>\n                    {isEditing\n                      ? t('templateManager.form.editTitle')\n                      : t('templateManager.form.createTitle')}\n                  </Dialog.Title>\n                  <button\n                    onClick={onClose}\n                    className='rounded-md bg-white dark:bg-gray-700 text-gray-400 hover:text-gray-500'\n                  >\n                    <XMarkIcon className='h-6 w-6' />\n                  </button>\n                </div>\n\n                <form onSubmit={handleSubmit} className='space-y-6'>\n                  {/* Basic Info */}\n                  <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1'>\n                        {t('templateManager.form.nameLabel')}\n                      </label>\n                      <input\n                        type='text'\n                        name='name'\n                        value={formData.name}\n                        onChange={handleChange}\n                        className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500'\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1'>\n                        {t('templateManager.form.categoryLabel')}\n                      </label>\n                      <select\n                        name='category'\n                        value={formData.category}\n                        onChange={handleChange}\n                        className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      >\n                        {[\n                          t('templateManager.form.categories.services'),\n                          t('templateManager.form.categories.development'),\n                          t('templateManager.form.categories.maintenance'),\n                          t('templateManager.form.categories.products'),\n                          t('templateManager.form.categories.other'),\n                        ].map(category => (\n                          <option key={category} value={category}>\n                            {category}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1'>\n                      {t('templateManager.form.descriptionLabel')}\n                    </label>\n                    <textarea\n                      name='description'\n                      value={formData.description}\n                      onChange={handleChange}\n                      rows={2}\n                      className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      required\n                    />\n                  </div>\n\n                  {/* Items */}\n                  <div>\n                    <div className='flex items-center justify-between mb-3'>\n                      <label className='block text-sm font-medium text-gray-700 dark:text-gray-300'>\n                        {t('templateManager.form.itemsLabel')}\n                      </label>\n                      <button\n                        type='button'\n                        onClick={addItem}\n                        className='inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200'\n                      >\n                        <PlusIcon className='h-4 w-4 mr-1' />\n                        {t('templateManager.form.addItem')}\n                      </button>\n                    </div>\n\n                    <div className='space-y-3'>\n                      {formData.items.map((item, index) => (\n                        <div key={index} className='grid grid-cols-12 gap-2 items-end'>\n                          <div className='col-span-5'>\n                            <input\n                              type='text'\n                              placeholder={t('templateManager.form.itemDescriptionPlaceholder')}\n                              value={item.description}\n                              onChange={e => handleItemChange(index, 'description', e.target.value)}\n                              className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500'\n                            />\n                          </div>\n                          <div className='col-span-2'>\n                            <input\n                              type='number'\n                              placeholder={t('templateManager.form.itemQtyPlaceholder')}\n                              value={item.quantity}\n                              onChange={e =>\n                                handleItemChange(index, 'quantity', parseFloat(e.target.value) || 0)\n                              }\n                              className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500'\n                            />\n                          </div>\n                          <div className='col-span-2'>\n                            <input\n                              type='number'\n                              placeholder={t('templateManager.form.itemPricePlaceholder')}\n                              step='0.01'\n                              value={item.unitPrice}\n                              onChange={e =>\n                                handleItemChange(\n                                  index,\n                                  'unitPrice',\n                                  parseFloat(e.target.value) || 0,\n                                )\n                              }\n                              className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500'\n                            />\n                          </div>\n                          <div className='col-span-2'>\n                            <input\n                              type='number'\n                              placeholder={t('templateManager.form.itemTaxPlaceholder')}\n                              value={item.taxRate}\n                              onChange={e =>\n                                handleItemChange(index, 'taxRate', parseFloat(e.target.value) || 0)\n                              }\n                              className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500'\n                            />\n                          </div>\n                          <div className='col-span-1'>\n                            {formData.items.length > 1 && (\n                              <button\n                                type='button'\n                                onClick={() => removeItem(index)}\n                                className='p-2 text-red-600 hover:text-red-700'\n                              >\n                                <TrashIcon className='h-4 w-4' />\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Notes and Terms */}\n                  <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1'>\n                        {t('templateManager.form.defaultNotesLabel')}\n                      </label>\n                      <textarea\n                        name='notes'\n                        value={formData.notes}\n                        onChange={handleChange}\n                        rows={3}\n                        className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1'>\n                        {t('templateManager.form.termsLabel')}\n                      </label>\n                      <textarea\n                        name='terms'\n                        value={formData.terms}\n                        onChange={handleChange}\n                        rows={3}\n                        className='block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className='flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700'>\n                    <button\n                      type='button'\n                      onClick={onClose}\n                      className='px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600'\n                    >\n                      {t('templateManager.form.cancel')}\n                    </button>\n                    <button\n                      type='submit'\n                      className='px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700'\n                    >\n                      {isEditing\n                        ? t('templateManager.form.update')\n                        : t('templateManager.form.create')}\n                    </button>\n                  </div>\n                </form>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n};\n\n// Template Preview Modal Component\nconst TemplatePreviewModal = ({ isOpen, onClose, template }) => {\n  const { t } = useTranslation('quotes');\n  if (!template) return null;\n\n  const calculateTotal = items => {\n    const subtotal = items.reduce((sum, item) => sum + item.quantity * item.unitPrice, 0);\n    const taxAmount = items.reduce((sum, item) => {\n      const lineTotal = item.quantity * item.unitPrice;\n      return sum + lineTotal * (item.taxRate / 100);\n    }, 0);\n    return { subtotal, taxAmount, total: subtotal + taxAmount };\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount);\n  };\n\n  const totals = calculateTotal(template.items);\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-black bg-opacity-25' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 overflow-y-auto'>\n          <div className='flex min-h-full items-center justify-center p-4'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 scale-95'\n              enterTo='opacity-100 scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 scale-100'\n              leaveTo='opacity-0 scale-95'\n            >\n              <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all'>\n                <div className='flex items-center justify-between mb-6'>\n                  <Dialog.Title className='text-lg font-medium text-gray-900 dark:text-white'>\n                    {t('templateManager.previewModal.title', { name: template.name })}\n                  </Dialog.Title>\n                  <button\n                    onClick={onClose}\n                    className='rounded-md bg-white dark:bg-gray-700 text-gray-400 hover:text-gray-500'\n                  >\n                    <XMarkIcon className='h-6 w-6' />\n                  </button>\n                </div>\n\n                <div className='space-y-6'>\n                  {/* Template Info */}\n                  <div className='bg-gray-50 dark:bg-gray-700 p-4 rounded-lg'>\n                    <h3 className='font-medium text-gray-900 dark:text-white mb-2'>\n                      {template.name}\n                    </h3>\n                    <p className='text-gray-600 dark:text-gray-400 mb-2'>{template.description}</p>\n                    <span className='inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'>\n                      {template.category}\n                    </span>\n                  </div>\n\n                  {/* Items Table */}\n                  <div>\n                    <h4 className='font-medium text-gray-900 dark:text-white mb-3'>\n                      {t('templateManager.previewModal.items')}\n                    </h4>\n                    <div className='overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg'>\n                      <table className='min-w-full divide-y divide-gray-300 dark:divide-gray-600'>\n                        <thead className='bg-gray-50 dark:bg-gray-700'>\n                          <tr>\n                            <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'>\n                              {t('templateManager.previewModal.description')}\n                            </th>\n                            <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'>\n                              {t('templateManager.previewModal.quantity')}\n                            </th>\n                            <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'>\n                              {t('templateManager.previewModal.unitPrice')}\n                            </th>\n                            <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'>\n                              {t('templateManager.previewModal.tax')}\n                            </th>\n                            <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider'>\n                              {t('templateManager.previewModal.total')}\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className='bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700'>\n                          {template.items.map((item, index) => (\n                            <tr key={index}>\n                              <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n                                {item.description}\n                              </td>\n                              <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n                                {item.quantity}\n                              </td>\n                              <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n                                {formatCurrency(item.unitPrice)}\n                              </td>\n                              <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white'>\n                                {item.taxRate}%\n                              </td>\n                              <td className='px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white'>\n                                {formatCurrency(item.quantity * item.unitPrice)}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n\n                  {/* Totals */}\n                  <div className='bg-gray-50 dark:bg-gray-700 p-4 rounded-lg'>\n                    <div className='space-y-2'>\n                      <div className='flex justify-between'>\n                        <span className='text-gray-600 dark:text-gray-400'>\n                          {t('templateManager.previewModal.subtotal')}\n                        </span>\n                        <span className='font-medium text-gray-900 dark:text-white'>\n                          {formatCurrency(totals.subtotal)}\n                        </span>\n                      </div>\n                      <div className='flex justify-between'>\n                        <span className='text-gray-600 dark:text-gray-400'>\n                          {t('templateManager.previewModal.taxAmount')}\n                        </span>\n                        <span className='font-medium text-gray-900 dark:text-white'>\n                          {formatCurrency(totals.taxAmount)}\n                        </span>\n                      </div>\n                      <div className='flex justify-between text-lg font-semibold border-t border-gray-200 dark:border-gray-600 pt-2'>\n                        <span className='text-gray-900 dark:text-white'>\n                          {t('templateManager.previewModal.grandTotal')}\n                        </span>\n                        <span className='text-gray-900 dark:text-white'>\n                          {formatCurrency(totals.total)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Notes and Terms */}\n                  {(template.notes || template.terms) && (\n                    <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                      {template.notes && (\n                        <div>\n                          <h4 className='font-medium text-gray-900 dark:text-white mb-2'>\n                            {t('templateManager.previewModal.notes')}\n                          </h4>\n                          <p className='text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 p-3 rounded-md'>\n                            {template.notes}\n                          </p>\n                        </div>\n                      )}\n                      {template.terms && (\n                        <div>\n                          <h4 className='font-medium text-gray-900 dark:text-white mb-2'>\n                            {t('templateManager.previewModal.terms')}\n                          </h4>\n                          <p className='text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 p-3 rounded-md'>\n                            {template.terms}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className='flex justify-end pt-6 border-t border-gray-200 dark:border-gray-700'>\n                  <button\n                    type='button'\n                    onClick={onClose}\n                    className='px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600'\n                  >\n                    {t('templateManager.previewModal.close')}\n                  </button>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n};\n\nexport default QuoteTemplateManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\QuoteToInvoiceConverter.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'validateQuoteForConversion'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [quote, validateQuoteForConversion]","fix":{"range":[1774,1781],"text":"[quote, validateQuoteForConversion]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { Fragment } from 'react';\nimport {\n  DocumentIcon,\n  ArrowRightIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  DocumentTextIcon,\n  XMarkIcon,\n} from '@heroicons/react/24/outline';\nimport { QuoteService } from '@lib/quoteService';\nimport Logger from '@utils/Logger';\n\nconst QuoteToInvoiceConverter = ({ isOpen, onClose, quote, onConversionSuccess }) => {\n  const { t } = useTranslation('invoices');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [step, setStep] = useState(1); // 1: Validation, 2: Options, 3: Confirmation\n  const [conversionOptions, setConversionOptions] = useState({\n    issueDate: new Date().toISOString().split('T')[0],\n    dueDate: '',\n    paymentTerms: '30',\n    notes: '',\n    preserveQuoteNotes: true,\n    sendEmail: false,\n    emailTemplate: 'standard',\n  });\n  const [validationResults, setValidationResults] = useState({\n    canConvert: false,\n    warnings: [],\n    errors: [],\n  });\n\n  // Initialize due date based on payment terms\n  useEffect(() => {\n    if (conversionOptions.issueDate && conversionOptions.paymentTerms) {\n      const issueDate = new Date(conversionOptions.issueDate);\n      const dueDate = new Date(issueDate);\n      dueDate.setDate(dueDate.getDate() + parseInt(conversionOptions.paymentTerms));\n      setConversionOptions(prev => ({\n        ...prev,\n        dueDate: dueDate.toISOString().split('T')[0],\n      }));\n    }\n  }, [conversionOptions.issueDate, conversionOptions.paymentTerms]);\n\n  // Validate quote for conversion\n  useEffect(() => {\n    if (quote) {\n      validateQuoteForConversion();\n    }\n  }, [quote]);\n\n  const validateQuoteForConversion = () => {\n    const validation = {\n      canConvert: true,\n      warnings: [],\n      errors: [],\n    };\n\n    // Check quote status\n    if (quote.status !== 'accepted') {\n      validation.errors.push({\n        type: 'status',\n        message: t('quoteConverter.errors.status'),\n        severity: 'error',\n      });\n      validation.canConvert = false;\n    }\n\n    // Check if already converted\n    if (quote.status === 'converted') {\n      validation.errors.push({\n        type: 'already_converted',\n        message: t('quoteConverter.errors.alreadyConverted'),\n        severity: 'error',\n      });\n      validation.canConvert = false;\n    }\n\n    // Check if quote has items\n    if (!quote.quote_items || quote.quote_items.length === 0) {\n      validation.errors.push({\n        type: 'no_items',\n        message: t('quoteConverter.errors.noItems'),\n        severity: 'error',\n      });\n      validation.canConvert = false;\n    }\n\n    // Check client information\n    if (!quote.clients) {\n      validation.errors.push({\n        type: 'no_client',\n        message: t('quoteConverter.errors.noClient'),\n        severity: 'error',\n      });\n      validation.canConvert = false;\n    }\n\n    // Check if quote is expired\n    if (quote.due_date && new Date(quote.due_date) < new Date()) {\n      validation.warnings.push({\n        type: 'expired',\n        message: t('quoteConverter.warnings.expired'),\n        severity: 'warning',\n      });\n    }\n\n    // Check for missing VAT numbers for business clients\n    if (quote.clients?.vat_number && !quote.clients.fiscal_code) {\n      validation.warnings.push({\n        type: 'missing_fiscal_code',\n        message: t('quoteConverter.warnings.missingFiscalCode'),\n        severity: 'warning',\n      });\n    }\n\n    setValidationResults(validation);\n  };\n\n  const handleConversionOptionChange = (key, value) => {\n    setConversionOptions(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  const handleConvert = async () => {\n    if (!validationResults.canConvert) {\n      setError(t('quoteConverter.errors.cannotConvert'));\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // Use the QuoteService to convert the quote\n      const invoice = await QuoteService.convertToInvoice(quote.id, quote.user_id);\n\n      // Update the invoice with custom options if different from defaults\n      if (\n        conversionOptions.issueDate !== new Date().toISOString().split('T')[0] ||\n        conversionOptions.notes !== quote.notes ||\n        !conversionOptions.preserveQuoteNotes\n      ) {\n        // Here you would typically call an invoice update service\n        // For now, we'll just log the options\n        Logger.info('Invoice created with custom options:', {\n          invoiceId: invoice.id,\n          options: conversionOptions,\n        });\n      }\n\n      // Show success and call parent callback\n      setStep(3);\n      onConversionSuccess(invoice);\n    } catch (error) {\n      Logger.error('Error converting quote to invoice:', error);\n      setError(error.message || t('quoteConverter.errors.generic'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount || 0);\n  };\n\n  const getStatusColor = status => {\n    const colors = {\n      accepted: 'text-green-600 bg-green-100',\n      converted: 'text-purple-600 bg-purple-100',\n      sent: 'text-blue-600 bg-blue-100',\n      draft: 'text-gray-600 bg-gray-100',\n      rejected: 'text-red-600 bg-red-100',\n      expired: 'text-yellow-600 bg-yellow-100',\n    };\n    return colors[status] || 'text-gray-600 bg-gray-100';\n  };\n\n  const getStatusText = status => {\n    const statusMap = {\n      draft: t('quoteConverter.statusLabels.draft'),\n      sent: t('quoteConverter.statusLabels.sent'),\n      accepted: t('quoteConverter.statusLabels.accepted'),\n      rejected: t('quoteConverter.statusLabels.rejected'),\n      expired: t('quoteConverter.statusLabels.expired'),\n      converted: t('quoteConverter.statusLabels.converted'),\n    };\n    return statusMap[status] || status;\n  };\n\n  if (!quote) return null;\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-black bg-opacity-25' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 overflow-y-auto'>\n          <div className='flex min-h-full items-center justify-center p-4 text-center'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 scale-95'\n              enterTo='opacity-100 scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 scale-100'\n              leaveTo='opacity-0 scale-95'\n            >\n              <Dialog.Panel className='w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-6 text-left align-middle shadow-xl transition-all'>\n                {/* Header */}\n                <div className='flex items-center justify-between mb-6'>\n                  <div className='flex items-center space-x-3'>\n                    <div className='flex-shrink-0'>\n                      <DocumentIcon className='h-8 w-8 text-blue-600' />\n                    </div>\n                    <div>\n                      <Dialog.Title className='text-lg font-medium text-gray-900 dark:text-white'>\n                        {t('quoteConverter.title')}\n                      </Dialog.Title>\n                      <p className='text-sm text-gray-500 dark:text-gray-400'>\n                        {t('quoteConverter.subtitle', { quoteNumber: quote.quote_number })}\n                      </p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={onClose}\n                    className='rounded-md bg-white dark:bg-gray-700 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  >\n                    <XMarkIcon className='h-6 w-6' />\n                  </button>\n                </div>\n\n                {/* Progress Steps */}\n                <div className='mb-6'>\n                  <div className='flex items-center justify-center space-x-8'>\n                    {[\n                      { number: 1, title: 'Validazione', icon: ExclamationTriangleIcon },\n                      { number: 2, title: 'Opzioni', icon: DocumentTextIcon },\n                      { number: 3, title: 'Conferma', icon: CheckCircleIcon },\n                    ].map((stepItem, index) => (\n                      <div key={stepItem.number} className='flex items-center'>\n                        <div\n                          className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                            step >= stepItem.number\n                              ? 'border-blue-600 bg-blue-600 text-white'\n                              : 'border-gray-300 text-gray-500'\n                          }`}\n                        >\n                          {step > stepItem.number ? (\n                            <CheckCircleIcon className='h-6 w-6' />\n                          ) : (\n                            <stepItem.icon className='h-5 w-5' />\n                          )}\n                        </div>\n                        <span\n                          className={`ml-2 text-sm font-medium ${\n                            step >= stepItem.number\n                              ? 'text-gray-900 dark:text-white'\n                              : 'text-gray-500'\n                          }`}\n                        >\n                          {stepItem.title}\n                        </span>\n                        {index < 2 && <ArrowRightIcon className='h-4 w-4 text-gray-400 ml-4' />}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Error Message */}\n                {error && (\n                  <div className='mb-4 rounded-md bg-red-50 dark:bg-red-900/50 p-4'>\n                    <div className='flex'>\n                      <ExclamationTriangleIcon className='h-5 w-5 text-red-400' />\n                      <div className='ml-3'>\n                        <p className='text-sm text-red-800 dark:text-red-200'>{error}</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 1: Validation */}\n                {step === 1 && (\n                  <div className='space-y-6'>\n                    <h4 className='font-semibold text-lg text-gray-800 dark:text-gray-200'>\n                      {t('quoteConverter.validation.title')}\n                    </h4>\n\n                    {/* Quote Summary */}\n                    <div className='grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg'>\n                      <div>\n                        <p className='text-sm text-gray-500 dark:text-gray-400'>\n                          {t('quoteConverter.validation.status')}\n                        </p>\n                        <p\n                          className={`text-sm font-medium px-2 py-1 rounded-full inline-block ${getStatusColor(\n                            quote.status,\n                          )}`}\n                        >\n                          {getStatusText(quote.status)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className='text-sm text-gray-500 dark:text-gray-400'>\n                          {t('quoteConverter.validation.client')}\n                        </p>\n                        <p className='font-medium text-gray-800 dark:text-gray-200'>\n                          {quote.clients?.name}\n                        </p>\n                      </div>\n                      <div>\n                        <p className='text-sm text-gray-500 dark:text-gray-400'>\n                          {t('quoteConverter.validation.items')}\n                        </p>\n                        <p className='font-medium text-gray-800 dark:text-gray-200'>\n                          {quote.quote_items?.length}\n                        </p>\n                      </div>\n                      <div>\n                        <p className='text-sm text-gray-500 dark:text-gray-400'>\n                          {t('quoteConverter.validation.total')}\n                        </p>\n                        <p className='font-medium text-gray-800 dark:text-gray-200'>\n                          {formatCurrency(quote.total_amount)}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Errors */}\n                    {validationResults.errors.length > 0 && (\n                      <div>\n                        <h5 className='font-semibold text-red-600 mb-2'>\n                          {t('quoteConverter.validation.errors')}\n                        </h5>\n                        <ul className='space-y-2'>\n                          {validationResults.errors.map((err, index) => (\n                            <li key={index} className='flex items-start'>\n                              <ExclamationTriangleIcon className='h-5 w-5 text-red-400 flex-shrink-0 mt-0.5' />\n                              <p className='text-sm text-red-800 dark:text-red-200'>\n                                {err.message}\n                              </p>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n\n                    {/* Warnings */}\n                    {validationResults.warnings.length > 0 && (\n                      <div>\n                        <h5 className='font-semibold text-yellow-600 mb-2'>\n                          {t('quoteConverter.validation.warnings')}\n                        </h5>\n                        <ul className='space-y-2'>\n                          {validationResults.warnings.map((warn, index) => (\n                            <li key={index} className='flex items-start'>\n                              <ExclamationTriangleIcon className='h-5 w-5 text-yellow-400 flex-shrink-0 mt-0.5' />\n                              <p className='text-sm text-yellow-800 dark:text-yellow-200'>\n                                {warn.message}\n                              </p>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n\n                    {/* Conversion Readiness */}\n                    <div\n                      className={`p-4 rounded-lg flex items-center ${\n                        validationResults.canConvert\n                          ? 'bg-green-50 dark:bg-green-900/50'\n                          : 'bg-red-50 dark:bg-red-900/50'\n                      }`}\n                    >\n                      {validationResults.canConvert ? (\n                        <CheckCircleIcon className='h-6 w-6 text-green-600 mr-3' />\n                      ) : (\n                        <ExclamationTriangleIcon className='h-6 w-6 text-red-600 mr-3' />\n                      )}\n                      <p\n                        className={`font-semibold ${\n                          validationResults.canConvert ? 'text-green-800' : 'text-red-800'\n                        }`}\n                      >\n                        {validationResults.canConvert\n                          ? t('quoteConverter.validation.canConvert')\n                          : t('quoteConverter.validation.cannotConvert')}\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 2: Conversion Options */}\n                {step === 2 && (\n                  <div className='space-y-6'>\n                    <h4 className='font-semibold text-lg text-gray-800 dark:text-gray-200'>\n                      {t('quoteConverter.options.title')}\n                    </h4>\n\n                    <div className='grid grid-cols-1 md:grid-cols-3 gap-6'>\n                      {/* Issue Date */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700 dark:text-gray-300'>\n                          {t('quoteConverter.options.issueDate')}\n                        </label>\n                        <input\n                          type='date'\n                          value={conversionOptions.issueDate}\n                          onChange={e => handleConversionOptionChange('issueDate', e.target.value)}\n                          className='mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm dark:bg-gray-700'\n                        />\n                      </div>\n\n                      {/* Payment Terms */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700 dark:text-gray-300'>\n                          {t('quoteConverter.options.paymentTerms')}\n                        </label>\n                        <select\n                          value={conversionOptions.paymentTerms}\n                          onChange={e =>\n                            handleConversionOptionChange('paymentTerms', e.target.value)\n                          }\n                          className='mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm dark:bg-gray-700'\n                        >\n                          <option value='15'>15</option>\n                          <option value='30'>30</option>\n                          <option value='60'>60</option>\n                          <option value='90'>90</option>\n                        </select>\n                      </div>\n\n                      {/* Due Date (read-only) */}\n                      <div>\n                        <label className='block text-sm font-medium text-gray-700 dark:text-gray-300'>\n                          {t('quoteConverter.options.dueDate')}\n                        </label>\n                        <input\n                          type='date'\n                          value={conversionOptions.dueDate}\n                          readOnly\n                          className='mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm sm:text-sm bg-gray-100 dark:bg-gray-700'\n                        />\n                      </div>\n                    </div>\n\n                    {/* Notes */}\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 dark:text-gray-300'>\n                        {t('quoteConverter.options.notes')}\n                      </label>\n                      <textarea\n                        rows={4}\n                        value={conversionOptions.notes}\n                        onChange={e => handleConversionOptionChange('notes', e.target.value)}\n                        className='mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm dark:bg-gray-700'\n                      />\n                    </div>\n\n                    {/* Checkboxes */}\n                    <div className='space-y-3'>\n                      <div className='flex items-center'>\n                        <input\n                          id='preserveNotes'\n                          type='checkbox'\n                          checked={conversionOptions.preserveQuoteNotes}\n                          onChange={e =>\n                            handleConversionOptionChange('preserveQuoteNotes', e.target.checked)\n                          }\n                          className='h-4 w-4 rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 dark:bg-gray-700'\n                        />\n                        <label\n                          htmlFor='preserveNotes'\n                          className='ml-3 block text-sm text-gray-900 dark:text-gray-300'\n                        >\n                          {t('quoteConverter.options.preserveQuoteNotes')}\n                        </label>\n                      </div>\n                      <div className='flex items-center'>\n                        <input\n                          id='sendEmail'\n                          type='checkbox'\n                          checked={conversionOptions.sendEmail}\n                          onChange={e =>\n                            handleConversionOptionChange('sendEmail', e.target.checked)\n                          }\n                          className='h-4 w-4 rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 dark:bg-gray-700'\n                        />\n                        <label\n                          htmlFor='sendEmail'\n                          className='ml-3 block text-sm text-gray-900 dark:text-gray-300'\n                        >\n                          {t('quoteConverter.options.sendEmail')}\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 3: Success */}\n                {step === 3 && (\n                  <div className='text-center'>\n                    <CheckCircleIcon className='h-16 w-16 text-green-500 mx-auto mb-4' />\n                    <h4 className='font-semibold text-xl text-gray-800 dark:text-gray-200'>\n                      {t('quoteConverter.success.title')}\n                    </h4>\n                    <p className='text-gray-600 dark:text-gray-400 mt-2'>\n                      {t('quoteConverter.success.message', {\n                        quoteNumber: quote.quote_number,\n                        invoiceNumber: 'INV-123', // Placeholder, replace with actual\n                      })}\n                    </p>\n                  </div>\n                )}\n\n                {error && (\n                  <div className='mt-4 p-3 bg-red-100 dark:bg-red-900/50 rounded-lg text-red-700 dark:text-red-300 text-sm'>\n                    {error}\n                  </div>\n                )}\n\n                {/* Footer */}\n                <div className='mt-8 pt-4 border-t border-gray-200 dark:border-gray-700 flex justify-end items-center space-x-4'>\n                  <button\n                    onClick={onClose}\n                    className='text-sm font-medium text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700'\n                  >\n                    {t('quoteConverter.buttons.close')}\n                  </button>\n\n                  {step > 1 && step < 3 && (\n                    <button\n                      onClick={() => setStep(step - 1)}\n                      className='text-sm font-medium text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'\n                    >\n                      {t('quoteConverter.buttons.back')}\n                    </button>\n                  )}\n\n                  {step === 1 && (\n                    <button\n                      onClick={() => setStep(2)}\n                      disabled={!validationResults.canConvert}\n                      className='text-sm font-medium text-white bg-blue-600 px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-blue-300 dark:disabled:bg-blue-800'\n                    >\n                      {t('quoteConverter.buttons.next')}\n                    </button>\n                  )}\n\n                  {step === 2 && (\n                    <button\n                      onClick={handleConvert}\n                      disabled={loading}\n                      className='text-sm font-medium text-white bg-blue-600 px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-blue-300 dark:disabled:bg-blue-800'\n                    >\n                      {loading\n                        ? t('quoteConverter.buttons.converting')\n                        : t('quoteConverter.buttons.convert')}\n                    </button>\n                  )}\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n};\n\nexport default QuoteToInvoiceConverter;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\TaxCalculator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\TestFinancialForecast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\financial\\ViewInvoiceModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\hoc\\PerformanceOptimizations.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":7,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":7,"endColumn":29},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":17,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":17,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":29},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":54,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":54,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":66,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":66,"endColumn":18,"suggestions":[{"fix":{"range":[1811,1884],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":80,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":80,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":102,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":102,"endColumn":22,"suggestions":[{"fix":{"range":[2880,2953],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":118,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":118,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":119,"column":10,"nodeType":"Identifier","endLine":119,"endColumn":21},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":126,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":126,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo received a function whose dependencies are unknown. Pass an inline function instead.","line":127,"column":10,"nodeType":"Identifier","endLine":127,"endColumn":17},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":134,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":134,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'obj'. Either include it or remove the dependency array.","line":135,"column":29,"nodeType":"ArrayExpression","endLine":135,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [obj]","fix":{"range":[3751,3772],"text":"[obj]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":135,"column":30,"nodeType":"CallExpression","endLine":135,"endColumn":49},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":142,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":142,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":162,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":162,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":180,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":180,"endColumn":29},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":197,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":197,"endColumn":36},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":242,"column":5,"nodeType":"Identifier","endLine":242,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":243,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":243,"endColumn":18,"suggestions":[{"fix":{"range":[6537,6625],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":270,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":270,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":283,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":283,"endColumn":16,"suggestions":[{"fix":{"range":[7625,7711],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":306,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":306,"endColumn":18,"suggestions":[{"fix":{"range":[8266,8330],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":317,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":317,"endColumn":16,"suggestions":[{"fix":{"range":[8599,8829],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useRef, useEffect, useMemo, useCallback, useState } from 'react';\n\n/**\n * Higher-Order Component for preventing unnecessary re-renders\n * Uses React.memo with custom comparison function\n */\nexport const withMemoization = (Component, customCompare) => {\n  const MemoizedComponent = memo(Component, customCompare);\n  MemoizedComponent.displayName = `withMemoization(${Component.displayName || Component.name})`;\n  return MemoizedComponent;\n};\n\n/**\n * HOC for deep comparison memoization\n * Useful for components that receive complex objects as props\n */\nexport const withDeepMemo = Component => {\n  const deepCompare = (prevProps, nextProps) => {\n    return JSON.stringify(prevProps) === JSON.stringify(nextProps);\n  };\n\n  return withMemoization(Component, deepCompare);\n};\n\n/**\n * HOC for shallow comparison memoization\n * More performant than deep comparison for simple props\n */\nexport const withShallowMemo = Component => {\n  const shallowCompare = (prevProps, nextProps) => {\n    const prevKeys = Object.keys(prevProps);\n    const nextKeys = Object.keys(nextProps);\n\n    if (prevKeys.length !== nextKeys.length) {\n      return false;\n    }\n\n    for (let key of prevKeys) {\n      if (prevProps[key] !== nextProps[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return withMemoization(Component, shallowCompare);\n};\n\n/**\n * HOC for render counting (development only)\n * Helps identify components that re-render frequently\n */\nexport const withRenderCount = Component => {\n  if (import.meta.env.MODE !== 'development') {\n    return Component;\n  }\n\n  const RenderCountComponent = props => {\n    const renderCount = useRef(0);\n    const componentName = Component.displayName || Component.name || 'Anonymous';\n\n    renderCount.current += 1;\n\n    useEffect(() => {\n      console.log(`­ƒöä ${componentName} rendered ${renderCount.current} times`);\n    });\n\n    return <Component {...props} />;\n  };\n\n  RenderCountComponent.displayName = `withRenderCount(${Component.displayName || Component.name})`;\n  return RenderCountComponent;\n};\n\n/**\n * HOC for performance profiling (development only)\n * Measures and logs render performance\n */\nexport const withPerformanceProfiler = Component => {\n  if (import.meta.env.MODE !== 'development') {\n    return Component;\n  }\n\n  const ProfiledComponent = props => {\n    const componentName = Component.displayName || Component.name || 'Anonymous';\n    const startTime = useRef();\n\n    useEffect(() => {\n      startTime.current = performance.now();\n    });\n\n    useEffect(() => {\n      if (startTime.current) {\n        const endTime = performance.now();\n        const renderTime = endTime - startTime.current;\n\n        if (renderTime > 16) {\n          // More than one frame (16ms at 60fps)\n          console.warn(`ÔÜá´©Å ${componentName} took ${renderTime.toFixed(2)}ms to render`);\n        } else {\n          console.log(`Ô£à ${componentName} rendered in ${renderTime.toFixed(2)}ms`);\n        }\n      }\n    });\n\n    return <Component {...props} />;\n  };\n\n  ProfiledComponent.displayName = `withPerformanceProfiler(${Component.displayName || Component.name})`;\n  return ProfiledComponent;\n};\n\n/**\n * Custom hook for optimized event handlers\n * Prevents creating new function references on every render\n */\nexport const useOptimizedCallback = (callback, deps) => {\n  return useCallback(callback, deps);\n};\n\n/**\n * Custom hook for optimized memoized values\n * More explicit about dependencies than useMemo\n */\nexport const useOptimizedMemo = (factory, deps) => {\n  return useMemo(factory, deps);\n};\n\n/**\n * Custom hook for stable object references\n * Prevents unnecessary re-renders when passing objects as props\n */\nexport const useStableObject = obj => {\n  return useMemo(() => obj, [JSON.stringify(obj)]);\n};\n\n/**\n * Custom hook for debounced values\n * Useful for search inputs and API calls\n */\nexport const useDebouncedValue = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n/**\n * Custom hook for throttled callbacks\n * Limits how often a function can be called\n */\nexport const useThrottledCallback = (callback, delay) => {\n  const lastRun = useRef(Date.now());\n\n  return useCallback(\n    (...args) => {\n      if (Date.now() - lastRun.current >= delay) {\n        callback(...args);\n        lastRun.current = Date.now();\n      }\n    },\n    [callback, delay],\n  );\n};\n\n/**\n * HOC for lazy loading components with Suspense\n * Automatically wraps component with error boundaries\n */\nexport const withLazyLoading = (importFunc, fallback = <div>Loading...</div>) => {\n  const LazyComponent = React.lazy(importFunc);\n\n  const LazyLoadedComponent = props => (\n    <React.Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </React.Suspense>\n  );\n\n  LazyLoadedComponent.displayName = 'LazyLoadedComponent';\n  return LazyLoadedComponent;\n};\n\n/**\n * Custom hook for window size optimization\n * Only updates when significant changes occur\n */\nexport const useOptimizedWindowSize = (threshold = 50) => {\n  const [windowSize, setWindowSize] = useState({\n    width: typeof window !== 'undefined' ? window.innerWidth : 0,\n    height: typeof window !== 'undefined' ? window.innerHeight : 0,\n  });\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    let timeoutId;\n    const handleResize = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        const newWidth = window.innerWidth;\n        const newHeight = window.innerHeight;\n\n        // Only update if change is significant\n        if (\n          Math.abs(newWidth - windowSize.width) > threshold ||\n          Math.abs(newHeight - windowSize.height) > threshold\n        ) {\n          setWindowSize({ width: newWidth, height: newHeight });\n        }\n      }, 100);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      clearTimeout(timeoutId);\n    };\n  }, [windowSize.width, windowSize.height, threshold]);\n\n  return windowSize;\n};\n\n/**\n * Performance monitoring utility for Context providers\n */\nexport const ContextPerformanceMonitor = ({ children, contextName = 'Unknown' }) => {\n  const renderCount = useRef(0);\n\n  if (import.meta.env.MODE === 'development') {\n    renderCount.current += 1;\n\n    useEffect(() => {\n      console.log(`­ƒÅ¬ ${contextName} Context Provider rendered ${renderCount.current} times`);\n    });\n  }\n\n  return children;\n};\n\n/**\n * Optimized list component for rendering large datasets\n * Uses React.memo and key optimization\n */\nexport const OptimizedList = memo(({ items, renderItem, keyExtractor, className = '' }) => {\n  const memoizedItems = useMemo(() => {\n    return items.map((item, index) => {\n      const key = keyExtractor ? keyExtractor(item, index) : index;\n      return <div key={key}>{renderItem(item, index)}</div>;\n    });\n  }, [items, renderItem, keyExtractor]);\n\n  return <div className={className}>{memoizedItems}</div>;\n});\n\nOptimizedList.displayName = 'OptimizedList';\n\n/**\n * Performance utilities for debugging\n */\nexport const PerformanceUtils = {\n  /**\n   * Measure component render time\n   */\n  measureRenderTime: (componentName, renderFunction) => {\n    if (import.meta.env.MODE !== 'development') {\n      return renderFunction();\n    }\n\n    const startTime = performance.now();\n    const result = renderFunction();\n    const endTime = performance.now();\n\n    console.log(`­ƒôè ${componentName} render time: ${(endTime - startTime).toFixed(2)}ms`);\n    return result;\n  },\n\n  /**\n   * Log component props changes\n   */\n  logPropsChanges: (componentName, prevProps, nextProps) => {\n    if (import.meta.env.MODE !== 'development') return;\n\n    const changedProps = {};\n    const allKeys = new Set([...Object.keys(prevProps), ...Object.keys(nextProps)]);\n\n    allKeys.forEach(key => {\n      if (prevProps[key] !== nextProps[key]) {\n        changedProps[key] = {\n          from: prevProps[key],\n          to: nextProps[key],\n        };\n      }\n    });\n\n    if (Object.keys(changedProps).length > 0) {\n      console.log(`­ƒôØ ${componentName} props changed:`, changedProps);\n    }\n  },\n\n  /**\n   * Memory usage profiler\n   */\n  logMemoryUsage: (label = 'Memory Usage') => {\n    if (import.meta.env.MODE !== 'development' || !performance.memory) return;\n\n    const { usedJSHeapSize, totalJSHeapSize, jsHeapSizeLimit } = performance.memory;\n    console.log(`­ƒÆ¥ ${label}:`, {\n      used: `${(usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n      total: `${(totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n      limit: `${(jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`,\n    });\n  },\n};\n\nexport default {\n  withMemoization,\n  withDeepMemo,\n  withShallowMemo,\n  withRenderCount,\n  withPerformanceProfiler,\n  withLazyLoading,\n  useOptimizedCallback,\n  useOptimizedMemo,\n  useStableObject,\n  useDebouncedValue,\n  useThrottledCallback,\n  useOptimizedWindowSize,\n  ContextPerformanceMonitor,\n  OptimizedList,\n  PerformanceUtils,\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\AddItemModal.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":13,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, Fragment } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { XMarkIcon, PhotoIcon } from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nconst AddItemModal = ({ isOpen, onClose, onSave }) => {\n  const { t, ready } = useTranslation('inventory');\n\n  const safeT = (key, options = {}, fallback = '') => {\n    if (!ready) return fallback;\n    try {\n      return t(key, options) || fallback;\n    } catch (error) {\n      console.warn(`Translation key not found: ${key}`);\n      return fallback;\n    }\n  };\n  const [formData, setFormData] = useState({\n    name: '',\n    sku: '',\n    category: '',\n    location: '',\n    stock: '',\n    minStock: '',\n    price: '',\n    supplier: '',\n    description: '',\n    image: null,\n  });\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const categories = [\n    'Electronics',\n    'Clothing',\n    'Books',\n    'Home & Garden',\n    'Sports',\n    'Automotive',\n    'Health & Beauty',\n    'Toys & Games',\n  ];\n\n  const locations = ['Warehouse A', 'Warehouse B', 'Store Front', 'Storage Room', 'Display Area'];\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: '',\n      }));\n    }\n  };\n\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setFormData(prev => ({\n        ...prev,\n        image: file,\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!formData.name.trim())\n      newErrors.name = safeT('modals.addItem.errors.nameRequired', {}, 'Product name is required');\n    if (!formData.sku.trim())\n      newErrors.sku = safeT('modals.addItem.errors.skuRequired', {}, 'SKU is required');\n    if (!formData.category)\n      newErrors.category = safeT(\n        'modals.addItem.errors.categoryRequired',\n        {},\n        'Category is required',\n      );\n    if (!formData.location)\n      newErrors.location = safeT(\n        'modals.addItem.errors.locationRequired',\n        {},\n        'Location is required',\n      );\n    if (!formData.stock || formData.stock < 0)\n      newErrors.stock = safeT(\n        'modals.addItem.errors.stockRequired',\n        {},\n        'Valid stock quantity is required',\n      );\n    if (!formData.minStock || formData.minStock < 0)\n      newErrors.minStock = safeT(\n        'modals.addItem.errors.minStockRequired',\n        {},\n        'Valid minimum stock is required',\n      );\n    if (!formData.price || formData.price <= 0)\n      newErrors.price = safeT('modals.addItem.errors.priceRequired', {}, 'Valid price is required');\n    if (!formData.supplier.trim())\n      newErrors.supplier = safeT(\n        'modals.addItem.errors.supplierRequired',\n        {},\n        'Supplier is required',\n      );\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!validateForm()) return;\n\n    setSaving(true);\n    try {\n      // Create new item object\n      const newItem = {\n        id: Date.now(), // Simple ID generation\n        name: formData.name,\n        sku: formData.sku,\n        category: formData.category,\n        location: formData.location,\n        stock: parseInt(formData.stock),\n        minStock: parseInt(formData.minStock),\n        price: parseFloat(formData.price),\n        supplier: formData.supplier,\n        description: formData.description,\n        lastUpdated: new Date().toLocaleDateString(),\n        image: formData.image ? URL.createObjectURL(formData.image) : null,\n      };\n\n      await onSave(newItem);\n\n      // Reset form\n      setFormData({\n        name: '',\n        sku: '',\n        category: '',\n        location: '',\n        stock: '',\n        minStock: '',\n        price: '',\n        supplier: '',\n        description: '',\n        image: null,\n      });\n\n      onClose();\n    } catch (error) {\n      console.error('Error saving item:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!saving) {\n      setFormData({\n        name: '',\n        sku: '',\n        category: '',\n        location: '',\n        stock: '',\n        minStock: '',\n        price: '',\n        supplier: '',\n        description: '',\n        image: null,\n      });\n      setErrors({});\n      onClose();\n    }\n  };\n\n  return (\n    <Transition.Root show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={handleClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 z-10 overflow-y-auto'>\n          <div className='flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n              enterTo='opacity-100 translate-y-0 sm:scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 translate-y-0 sm:scale-100'\n              leaveTo='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n            >\n              <Dialog.Panel className='relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:p-6'>\n                <div className='absolute right-0 top-0 hidden pr-4 pt-4 sm:block'>\n                  <button\n                    type='button'\n                    className='rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                    onClick={handleClose}\n                    disabled={saving}\n                  >\n                    <span className='sr-only'>{safeT('common.close', {}, 'Close')}</span>\n                    <XMarkIcon className='h-6 w-6' aria-hidden='true' />\n                  </button>\n                </div>\n\n                <div className='sm:flex sm:items-start'>\n                  <div className='w-full'>\n                    <Dialog.Title as='h3' className='text-page-title text-gray-900 mb-6'>\n                      {safeT('modals.addItem.title', {}, 'Add New Inventory Item')}\n                    </Dialog.Title>\n\n                    <form onSubmit={handleSubmit} className='space-y-6'>\n                      <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n                        {/* Product Name */}\n                        <div>\n                          <label\n                            htmlFor='name'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.name', {}, 'Product Name')} *\n                          </label>\n                          <input\n                            type='text'\n                            name='name'\n                            id='name'\n                            value={formData.name}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.name ? 'border-red-300' : ''\n                            }`}\n                            placeholder={safeT(\n                              'modals.addItem.placeholders.name',\n                              {},\n                              'Enter product name',\n                            )}\n                          />\n                          {errors.name && (\n                            <p className='mt-1 text-error text-red-600'>{errors.name}</p>\n                          )}\n                        </div>\n\n                        {/* SKU */}\n                        <div>\n                          <label htmlFor='sku' className='block text-form-label text-gray-700 mb-2'>\n                            {safeT('modals.addItem.fields.sku', {}, 'SKU')} *\n                          </label>\n                          <input\n                            type='text'\n                            name='sku'\n                            id='sku'\n                            value={formData.sku}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.sku ? 'border-red-300' : ''\n                            }`}\n                            placeholder={safeT('modals.addItem.placeholders.sku', {}, 'Enter SKU')}\n                          />\n                          {errors.sku && (\n                            <p className='mt-1 text-error text-red-600'>{errors.sku}</p>\n                          )}\n                        </div>\n\n                        {/* Category */}\n                        <div>\n                          <label\n                            htmlFor='category'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.category', {}, 'Category')} *\n                          </label>\n                          <select\n                            name='category'\n                            id='category'\n                            value={formData.category}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.category ? 'border-red-300' : ''\n                            }`}\n                          >\n                            <option value=''>\n                              {safeT(\n                                'modals.addItem.placeholders.category',\n                                {},\n                                'Select a category',\n                              )}\n                            </option>\n                            {categories.map(category => (\n                              <option key={category} value={category}>\n                                {category}\n                              </option>\n                            ))}\n                          </select>\n                          {errors.category && (\n                            <p className='mt-1 text-error text-red-600'>{errors.category}</p>\n                          )}\n                        </div>\n\n                        {/* Location */}\n                        <div>\n                          <label\n                            htmlFor='location'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.location', {}, 'Location')} *\n                          </label>\n                          <select\n                            name='location'\n                            id='location'\n                            value={formData.location}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.location ? 'border-red-300' : ''\n                            }`}\n                          >\n                            <option value=''>\n                              {safeT(\n                                'modals.addItem.placeholders.location',\n                                {},\n                                'Select a location',\n                              )}\n                            </option>\n                            {locations.map(location => (\n                              <option key={location} value={location}>\n                                {location}\n                              </option>\n                            ))}\n                          </select>\n                          {errors.location && (\n                            <p className='mt-1 text-error text-red-600'>{errors.location}</p>\n                          )}\n                        </div>\n\n                        {/* Stock */}\n                        <div>\n                          <label\n                            htmlFor='stock'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.stock', {}, 'Current Stock')} *\n                          </label>\n                          <input\n                            type='number'\n                            name='stock'\n                            id='stock'\n                            min='0'\n                            value={formData.stock}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.stock ? 'border-red-300' : ''\n                            }`}\n                            placeholder={safeT('modals.addItem.placeholders.stock', {}, '0')}\n                          />\n                          {errors.stock && (\n                            <p className='mt-1 text-error text-red-600'>{errors.stock}</p>\n                          )}\n                        </div>\n\n                        {/* Minimum Stock */}\n                        <div>\n                          <label\n                            htmlFor='minStock'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.minStock', {}, 'Minimum Stock')} *\n                          </label>\n                          <input\n                            type='number'\n                            name='minStock'\n                            id='minStock'\n                            min='0'\n                            value={formData.minStock}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.minStock ? 'border-red-300' : ''\n                            }`}\n                            placeholder={safeT('modals.addItem.placeholders.minStock', {}, '0')}\n                          />\n                          {errors.minStock && (\n                            <p className='mt-1 text-error text-red-600'>{errors.minStock}</p>\n                          )}\n                        </div>\n\n                        {/* Price */}\n                        <div>\n                          <label\n                            htmlFor='price'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.price', {}, 'Price')} *\n                          </label>\n                          <div className='relative'>\n                            <div className='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'>\n                              <span className='text-gray-500 text-input-text'>Ôé¼</span>\n                            </div>\n                            <input\n                              type='number'\n                              name='price'\n                              id='price'\n                              min='0'\n                              step='0.01'\n                              value={formData.price}\n                              onChange={handleInputChange}\n                              className={`block w-full pl-7 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                                errors.price ? 'border-red-300' : ''\n                              }`}\n                              placeholder={safeT('modals.addItem.placeholders.price', {}, '0.00')}\n                            />\n                          </div>\n                          {errors.price && (\n                            <p className='mt-1 text-error text-red-600'>{errors.price}</p>\n                          )}\n                        </div>\n\n                        {/* Supplier */}\n                        <div>\n                          <label\n                            htmlFor='supplier'\n                            className='block text-form-label text-gray-700 mb-2'\n                          >\n                            {safeT('modals.addItem.fields.supplier', {}, 'Supplier')} *\n                          </label>\n                          <input\n                            type='text'\n                            name='supplier'\n                            id='supplier'\n                            value={formData.supplier}\n                            onChange={handleInputChange}\n                            className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text ${\n                              errors.supplier ? 'border-red-300' : ''\n                            }`}\n                            placeholder={safeT(\n                              'modals.addItem.placeholders.supplier',\n                              {},\n                              'Enter supplier name',\n                            )}\n                          />\n                          {errors.supplier && (\n                            <p className='mt-1 text-error text-red-600'>{errors.supplier}</p>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Description */}\n                      <div>\n                        <label\n                          htmlFor='description'\n                          className='block text-form-label text-gray-700 mb-2'\n                        >\n                          {safeT('modals.addItem.fields.description', {}, 'Description')}\n                        </label>\n                        <textarea\n                          name='description'\n                          id='description'\n                          rows={3}\n                          value={formData.description}\n                          onChange={handleInputChange}\n                          className='block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-input-text'\n                          placeholder={safeT(\n                            'modals.addItem.placeholders.description',\n                            {},\n                            'Enter product description (optional)',\n                          )}\n                        />\n                      </div>\n\n                      {/* Image Upload */}\n                      <div>\n                        <label className='block text-form-label text-gray-700 mb-2'>\n                          {safeT('modals.addItem.fields.image', {}, 'Product Image')}\n                        </label>\n                        <div className='mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md'>\n                          <div className='space-y-1 text-center'>\n                            <PhotoIcon className='mx-auto h-12 w-12 text-gray-400' />\n                            <div className='flex text-body text-gray-600'>\n                              <label\n                                htmlFor='image'\n                                className='relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500'\n                              >\n                                <span>\n                                  {safeT(\n                                    'modals.addItem.imageUpload.uploadFile',\n                                    {},\n                                    'Upload a file',\n                                  )}\n                                </span>\n                                <input\n                                  id='image'\n                                  name='image'\n                                  type='file'\n                                  accept='image/*'\n                                  className='sr-only'\n                                  onChange={handleImageChange}\n                                />\n                              </label>\n                              <p className='pl-1'>\n                                {safeT(\n                                  'modals.addItem.imageUpload.dragDrop',\n                                  {},\n                                  'or drag and drop',\n                                )}\n                              </p>\n                            </div>\n                            <p className='text-caption text-gray-500'>\n                              {safeT(\n                                'modals.addItem.imageUpload.fileTypes',\n                                {},\n                                'PNG, JPG, GIF up to 10MB',\n                              )}\n                            </p>\n                            {formData.image && (\n                              <p className='text-body text-green-600'>\n                                {safeT(\n                                  'modals.addItem.imageUpload.selected',\n                                  { fileName: formData.image.name },\n                                  `Selected: ${formData.image.name}`,\n                                )}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Form Actions */}\n                      <div className='flex justify-end space-x-3 pt-6'>\n                        <button\n                          type='button'\n                          onClick={handleClose}\n                          disabled={saving}\n                          className='rounded-md border border-gray-300 bg-white px-4 py-2 text-button-text text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50'\n                        >\n                          {safeT('modals.addItem.buttons.cancel', {}, 'Cancel')}\n                        </button>\n                        <button\n                          type='submit'\n                          disabled={saving}\n                          className='rounded-md border border-transparent bg-blue-600 px-4 py-2 text-button-text text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50'\n                        >\n                          {saving\n                            ? safeT('modals.addItem.buttons.adding', {}, 'Adding...')\n                            : safeT('modals.addItem.buttons.add', {}, 'Add Item')}\n                        </button>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n};\n\nexport default AddItemModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\ExportInventoryModal.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":22,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":18,"suggestions":[{"fix":{"range":[575,633],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":23,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":18,"suggestions":[{"fix":{"range":[640,682],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":24,"endColumn":18,"suggestions":[{"fix":{"range":[689,720],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":25,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":18,"suggestions":[{"fix":{"range":[727,795],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":26,"endColumn":18,"suggestions":[{"fix":{"range":[802,895],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":30,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":30,"endColumn":18,"suggestions":[{"fix":{"range":[1024,1086],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":32,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":32,"endColumn":20,"suggestions":[{"fix":{"range":[1122,1201],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":44,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":293,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, Fragment } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport {\n  XMarkIcon,\n  DocumentArrowDownIcon,\n  TableCellsIcon,\n  DocumentTextIcon,\n  DocumentIcon,\n  CheckIcon,\n  CalendarIcon,\n  FunnelIcon,\n  Cog6ToothIcon,\n} from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nconst ExportInventoryModal = ({ isOpen, onClose, inventoryData }) => {\n  const { t, ready, i18n } = useTranslation('inventory');\n\n  // Debug translation loading\n  React.useEffect(() => {\n    if (ready && isOpen) {\n      console.log('­ƒöì ExportInventoryModal Translation Debug:');\n      console.log('- Language:', i18n.language);\n      console.log('- Ready:', ready);\n      console.log('- exportInventory.title:', t('exportInventory.title'));\n      console.log('- Available namespaces:', Object.keys(i18n.store?.data?.[i18n.language] || {}));\n\n      // Test if inventory namespace is loaded\n      const inventoryData = i18n.store?.data?.[i18n.language]?.inventory;\n      console.log('- Inventory namespace loaded:', !!inventoryData);\n      if (inventoryData) {\n        console.log('- Has exportInventory section:', !!inventoryData.exportInventory);\n      }\n    }\n  }, [ready, isOpen, t, i18n]);\n\n  const safeT = (key, options = {}, fallback = '') => {\n    if (!ready) return fallback;\n    try {\n      // Remove 'modals.' prefix if present to match the JSON structure\n      const cleanKey = key.startsWith('modals.') ? key.replace('modals.', '') : key;\n      const translation = t(cleanKey, options);\n      return translation && translation !== cleanKey ? translation : fallback;\n    } catch (error) {\n      return fallback;\n    }\n  };\n  const [exportFormat, setExportFormat] = useState('csv');\n  const [exportFields, setExportFields] = useState({\n    name: true,\n    sku: true,\n    category: true,\n    stock: true,\n    minStock: true,\n    price: true,\n    location: true,\n    supplier: true,\n    lastUpdated: true,\n    description: false,\n    image: false,\n  });\n  const [filters, setFilters] = useState({\n    category: 'all',\n    stockLevel: 'all',\n    location: 'all',\n    dateRange: 'all',\n  });\n  const [isExporting, setIsExporting] = useState(false);\n\n  const exportFormats = [\n    {\n      id: 'csv',\n      name: safeT('modals.exportInventory.formats.csv.name', {}, 'CSV'),\n      description: safeT(\n        'modals.exportInventory.formats.csv.description',\n        {},\n        'Valori separati da virgola per fogli di calcolo',\n      ),\n      icon: TableCellsIcon,\n      extension: '.csv',\n      colors: {\n        border: 'border-green-500',\n        bg: 'bg-green-50',\n        icon: 'text-green-500',\n        check: 'text-green-600',\n        hoverBg: 'hover:bg-green-50',\n      },\n    },\n    {\n      id: 'excel',\n      name: safeT('modals.exportInventory.formats.excel.name', {}, 'Excel'),\n      description: safeT(\n        'modals.exportInventory.formats.excel.description',\n        {},\n        'Formato Microsoft Excel con formattazione',\n      ),\n      icon: DocumentIcon,\n      extension: '.xlsx',\n      colors: {\n        border: 'border-emerald-500',\n        bg: 'bg-emerald-50',\n        icon: 'text-emerald-500',\n        check: 'text-emerald-600',\n        hoverBg: 'hover:bg-emerald-50',\n      },\n    },\n    {\n      id: 'pdf',\n      name: safeT('modals.exportInventory.formats.pdf.name', {}, 'PDF'),\n      description: safeT(\n        'modals.exportInventory.formats.pdf.description',\n        {},\n        'Report formattato per la stampa',\n      ),\n      icon: DocumentTextIcon,\n      extension: '.pdf',\n      colors: {\n        border: 'border-red-500',\n        bg: 'bg-red-50',\n        icon: 'text-red-500',\n        check: 'text-red-600',\n        hoverBg: 'hover:bg-red-50',\n      },\n    },\n    {\n      id: 'json',\n      name: safeT('modals.exportInventory.formats.json.name', {}, 'JSON'),\n      description: safeT(\n        'modals.exportInventory.formats.json.description',\n        {},\n        'Dati grezzi per integrazione di sistema',\n      ),\n      icon: Cog6ToothIcon,\n      extension: '.json',\n      colors: {\n        border: 'border-purple-500',\n        bg: 'bg-purple-50',\n        icon: 'text-purple-500',\n        check: 'text-purple-600',\n        hoverBg: 'hover:bg-purple-50',\n      },\n    },\n  ];\n\n  const availableFields = [\n    {\n      key: 'name',\n      label: safeT('modals.exportInventory.availableFields.name', {}, 'Nome Prodotto'),\n      required: true,\n    },\n    {\n      key: 'sku',\n      label: safeT('modals.exportInventory.availableFields.sku', {}, 'SKU'),\n      required: true,\n    },\n    {\n      key: 'category',\n      label: safeT('modals.exportInventory.availableFields.category', {}, 'Categoria'),\n      required: false,\n    },\n    {\n      key: 'stock',\n      label: safeT('modals.exportInventory.availableFields.stock', {}, 'Scorte Attuali'),\n      required: false,\n    },\n    {\n      key: 'minStock',\n      label: safeT('modals.exportInventory.availableFields.minStock', {}, 'Scorte Minime'),\n      required: false,\n    },\n    {\n      key: 'price',\n      label: safeT('modals.exportInventory.availableFields.price', {}, 'Prezzo'),\n      required: false,\n    },\n    {\n      key: 'location',\n      label: safeT('modals.exportInventory.availableFields.location', {}, 'Posizione'),\n      required: false,\n    },\n    {\n      key: 'supplier',\n      label: safeT('modals.exportInventory.availableFields.supplier', {}, 'Fornitore'),\n      required: false,\n    },\n    {\n      key: 'lastUpdated',\n      label: safeT(\n        'modals.exportInventory.availableFields.lastUpdated',\n        {},\n        'Ultimo Aggiornamento',\n      ),\n      required: false,\n    },\n    {\n      key: 'description',\n      label: safeT('modals.exportInventory.availableFields.description', {}, 'Descrizione'),\n      required: false,\n    },\n    {\n      key: 'image',\n      label: safeT('modals.exportInventory.availableFields.image', {}, 'URL Immagine'),\n      required: false,\n    },\n  ];\n\n  const getFilteredData = () => {\n    if (!inventoryData) return [];\n\n    return inventoryData.filter(item => {\n      // Category filter\n      if (filters.category !== 'all' && item.category !== filters.category) {\n        return false;\n      }\n\n      // Stock level filter\n      if (filters.stockLevel !== 'all') {\n        const minStock = item.minStock || 10;\n        switch (filters.stockLevel) {\n          case 'out':\n            if (item.stock > 0) return false;\n            break;\n          case 'low':\n            if (item.stock > minStock) return false;\n            break;\n          case 'normal':\n            if (item.stock <= minStock) return false;\n            break;\n        }\n      }\n\n      // Location filter\n      if (filters.location !== 'all' && item.location !== filters.location) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  const getUniqueValues = field => {\n    if (!inventoryData) return [];\n    return [...new Set(inventoryData.map(item => item[field]).filter(Boolean))];\n  };\n\n  const handleFieldToggle = fieldKey => {\n    const field = availableFields.find(f => f.key === fieldKey);\n    if (field?.required) return; // Don't allow toggling required fields\n\n    setExportFields(prev => ({\n      ...prev,\n      [fieldKey]: !prev[fieldKey],\n    }));\n  };\n\n  const handleSelectAllFields = () => {\n    const allSelected = availableFields.every(field => exportFields[field.key]);\n    const newState = {};\n    availableFields.forEach(field => {\n      newState[field.key] = !allSelected;\n    });\n    setExportFields(newState);\n  };\n\n  const handleExport = async () => {\n    setIsExporting(true);\n\n    try {\n      const filteredData = getFilteredData();\n      const selectedFields = Object.keys(exportFields).filter(key => exportFields[key]);\n\n      // Simulate export process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const format = exportFormats.find(f => f.id === exportFormat);\n      const fileName = `inventory_export_${new Date().toISOString().split('T')[0]}${format.extension}`;\n\n      // In a real implementation, you would generate and download the actual file\n      alert(\n        safeT(\n          'modals.exportInventory.messages.exportCompleted',\n          {\n            fileName,\n            formatName: format.name,\n            recordCount: filteredData.length,\n            fieldCount: selectedFields.length,\n          },\n          `Esportazione completata!\\n\\nFile: ${fileName}\\nFormato: ${format.name}\\nRecord: ${filteredData.length}\\nCampi: ${selectedFields.length}`,\n        ),\n      );\n\n      onClose();\n    } catch (error) {\n      alert(\n        safeT('modals.exportInventory.messages.exportFailed', {}, 'Esportazione fallita. Riprova.'),\n      );\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const filteredData = getFilteredData();\n  const selectedFieldsCount = Object.values(exportFields).filter(Boolean).length;\n\n  return (\n    <Transition.Root show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 z-10 overflow-y-auto'>\n          <div className='flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n              enterTo='opacity-100 translate-y-0 sm:scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 translate-y-0 sm:scale-100'\n              leaveTo='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n            >\n              <Dialog.Panel className='relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:p-6'>\n                <div className='absolute right-0 top-0 hidden pr-4 pt-4 sm:block'>\n                  <button\n                    type='button'\n                    className='rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                    onClick={onClose}\n                  >\n                    <span className='sr-only'>{safeT('common.close', {}, 'Chiudi')}</span>\n                    <XMarkIcon className='h-6 w-6' aria-hidden='true' />\n                  </button>\n                </div>\n\n                <div className='sm:flex sm:items-start'>\n                  <div className='w-full'>\n                    <Dialog.Title\n                      as='h3'\n                      className='text-page-title text-gray-900 mb-6 flex items-center'\n                    >\n                      <DocumentArrowDownIcon className='h-6 w-6 text-blue-500 mr-2' />\n                      {ready\n                        ? t('exportInventory.title') || 'Esporta Dati Inventario'\n                        : 'Esporta Dati Inventario'}\n                    </Dialog.Title>\n\n                    <div className='space-y-6'>\n                      {/* Export Format Selection */}\n                      <div>\n                        <label className='text-card-title text-gray-900'>\n                          {ready\n                            ? t('exportInventory.fields.format') || 'Formato Esportazione'\n                            : 'Formato Esportazione'}\n                        </label>\n                        <p className='text-subtitle text-gray-500'>\n                          {ready\n                            ? t('exportInventory.fields.formatDesc') ||\n                              'Scegli il formato per i tuoi dati esportati'\n                            : 'Scegli il formato per i tuoi dati esportati'}\n                        </p>\n                        <fieldset className='mt-4'>\n                          <div className='grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-4'>\n                            {exportFormats.map(format => {\n                              const Icon = format.icon;\n                              return (\n                                <label\n                                  key={format.id}\n                                  className={`relative flex cursor-pointer rounded-lg border p-4 focus:outline-none transition-all duration-200 ${\n                                    exportFormat === format.id\n                                      ? `${format.colors.border} ${format.colors.bg} shadow-md`\n                                      : `border-gray-300 bg-white ${format.colors.hoverBg} hover:shadow-sm`\n                                  }`}\n                                >\n                                  <input\n                                    type='radio'\n                                    name='export-format'\n                                    value={format.id}\n                                    checked={exportFormat === format.id}\n                                    onChange={e => setExportFormat(e.target.value)}\n                                    className='sr-only'\n                                  />\n                                  <div className='flex flex-1'>\n                                    <div className='flex flex-col'>\n                                      <div className='flex items-center'>\n                                        <Icon\n                                          className={`h-5 w-5 mr-2 ${\n                                            exportFormat === format.id\n                                              ? format.colors.icon\n                                              : 'text-gray-400'\n                                          }`}\n                                        />\n                                        <span className='block text-sm font-medium text-gray-900'>\n                                          {format.name}\n                                        </span>\n                                      </div>\n                                      <span className='mt-1 flex items-center text-sm text-gray-500'>\n                                        {format.description}\n                                      </span>\n                                    </div>\n                                  </div>\n                                  {exportFormat === format.id && (\n                                    <CheckIcon\n                                      className={`h-5 w-5 ${format.colors.check}`}\n                                      aria-hidden='true'\n                                    />\n                                  )}\n                                </label>\n                              );\n                            })}\n                          </div>\n                        </fieldset>\n                      </div>\n\n                      {/* Data Filters */}\n                      <div>\n                        <label className='text-base font-medium text-gray-900 flex items-center'>\n                          <FunnelIcon className='h-5 w-5 mr-2' />\n                          {safeT('modals.exportInventory.dataFilters.title', {}, 'Filtri Dati')}\n                        </label>\n                        <p className='text-sm leading-5 text-gray-500'>\n                          {safeT(\n                            'modals.exportInventory.dataFilters.description',\n                            {},\n                            \"Filtra quali dati includere nell'esportazione\",\n                          )}\n                        </p>\n                        <div className='mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4'>\n                          <div>\n                            <label className='block text-form-label text-gray-700'>\n                              {safeT(\n                                'modals.exportInventory.dataFilters.category',\n                                {},\n                                'Categoria',\n                              )}\n                            </label>\n                            <select\n                              value={filters.category}\n                              onChange={e =>\n                                setFilters(prev => ({ ...prev, category: e.target.value }))\n                              }\n                              className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'\n                            >\n                              <option value='all'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.allCategories',\n                                  {},\n                                  'Tutte le Categorie',\n                                )}\n                              </option>\n                              {getUniqueValues('category').map(category => (\n                                <option key={category} value={category}>\n                                  {category}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n\n                          <div>\n                            <label className='block text-form-label text-gray-700'>\n                              {safeT(\n                                'modals.exportInventory.dataFilters.stockLevel',\n                                {},\n                                'Livello Scorte',\n                              )}\n                            </label>\n                            <select\n                              value={filters.stockLevel}\n                              onChange={e =>\n                                setFilters(prev => ({ ...prev, stockLevel: e.target.value }))\n                              }\n                              className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'\n                            >\n                              <option value='all'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.allStockLevels',\n                                  {},\n                                  'Tutti i Livelli di Scorte',\n                                )}\n                              </option>\n                              <option value='out'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.outOfStock',\n                                  {},\n                                  'Esaurito',\n                                )}\n                              </option>\n                              <option value='low'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.lowStock',\n                                  {},\n                                  'Scorte Basse',\n                                )}\n                              </option>\n                              <option value='normal'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.normalStock',\n                                  {},\n                                  'Scorte Normali',\n                                )}\n                              </option>\n                            </select>\n                          </div>\n\n                          <div>\n                            <label className='block text-form-label text-gray-700'>\n                              {safeT(\n                                'modals.exportInventory.dataFilters.location',\n                                {},\n                                'Posizione',\n                              )}\n                            </label>\n                            <select\n                              value={filters.location}\n                              onChange={e =>\n                                setFilters(prev => ({ ...prev, location: e.target.value }))\n                              }\n                              className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'\n                            >\n                              <option value='all'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.allLocations',\n                                  {},\n                                  'Tutte le Posizioni',\n                                )}\n                              </option>\n                              {getUniqueValues('location').map(location => (\n                                <option key={location} value={location}>\n                                  {location}\n                                </option>\n                              ))}\n                            </select>\n                          </div>\n\n                          <div>\n                            <label className='block text-form-label text-gray-700'>\n                              {safeT(\n                                'modals.exportInventory.dataFilters.dateRange',\n                                {},\n                                'Intervallo Date',\n                              )}\n                            </label>\n                            <select\n                              value={filters.dateRange}\n                              onChange={e =>\n                                setFilters(prev => ({ ...prev, dateRange: e.target.value }))\n                              }\n                              className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'\n                            >\n                              <option value='all'>\n                                {safeT('modals.exportInventory.dataFilters.allTime', {}, 'Sempre')}\n                              </option>\n                              <option value='today'>\n                                {safeT('modals.exportInventory.dataFilters.today', {}, 'Oggi')}\n                              </option>\n                              <option value='week'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.thisWeek',\n                                  {},\n                                  'Questa Settimana',\n                                )}\n                              </option>\n                              <option value='month'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.thisMonth',\n                                  {},\n                                  'Questo Mese',\n                                )}\n                              </option>\n                              <option value='quarter'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.thisQuarter',\n                                  {},\n                                  'Questo Trimestre',\n                                )}\n                              </option>\n                              <option value='year'>\n                                {safeT(\n                                  'modals.exportInventory.dataFilters.thisYear',\n                                  {},\n                                  \"Quest'Anno\",\n                                )}\n                              </option>\n                            </select>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Field Selection */}\n                      <div>\n                        <div className='flex items-center justify-between'>\n                          <div>\n                            <label className='text-card-title text-gray-900'>\n                              {safeT(\n                                'modals.exportInventory.fields.fieldsToExport',\n                                {},\n                                'Campi da Esportare',\n                              )}\n                            </label>\n                            <p className='text-sm leading-5 text-gray-500'>\n                              {safeT(\n                                'modals.exportInventory.fields.fieldsDesc',\n                                {},\n                                \"Seleziona i campi da includere nell'esportazione\",\n                              )}\n                            </p>\n                          </div>\n                          <button\n                            type='button'\n                            onClick={handleSelectAllFields}\n                            className='text-sm text-blue-600 hover:text-blue-500'\n                          >\n                            {selectedFieldsCount === availableFields.length\n                              ? safeT(\n                                  'modals.exportInventory.fieldSelection.deselectAll',\n                                  {},\n                                  'Deseleziona Tutto',\n                                )\n                              : safeT(\n                                  'modals.exportInventory.fieldSelection.selectAll',\n                                  {},\n                                  'Seleziona Tutto',\n                                )}\n                          </button>\n                        </div>\n                        <div className='mt-4 grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-3'>\n                          {availableFields.map(field => (\n                            <div key={field.key} className='relative flex items-start'>\n                              <div className='flex h-5 items-center'>\n                                <input\n                                  id={field.key}\n                                  type='checkbox'\n                                  checked={exportFields[field.key]}\n                                  onChange={() => handleFieldToggle(field.key)}\n                                  disabled={field.required}\n                                  className='h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 disabled:opacity-50'\n                                />\n                              </div>\n                              <div className='ml-3 text-sm'>\n                                <label htmlFor={field.key} className='font-medium text-gray-700'>\n                                  {field.label}\n                                  {field.required && <span className='text-red-500 ml-1'>*</span>}\n                                </label>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Export Preview */}\n                      <div className='bg-gray-50 rounded-lg p-4'>\n                        <h4 className='text-sm font-medium text-gray-900 mb-2'>\n                          {safeT(\n                            'modals.exportInventory.exportPreview.title',\n                            {},\n                            'Anteprima Esportazione',\n                          )}\n                        </h4>\n                        <div className='grid grid-cols-2 gap-4 text-sm'>\n                          <div>\n                            <span className='text-gray-500'>\n                              {safeT(\n                                'modals.exportInventory.exportPreview.recordsToExport',\n                                { count: filteredData.length },\n                                `Record da esportare: ${filteredData.length}`,\n                              )}\n                            </span>\n                          </div>\n                          <div>\n                            <span className='text-gray-500'>\n                              {safeT(\n                                'modals.exportInventory.exportPreview.fieldsSelected',\n                                { count: selectedFieldsCount },\n                                `Campi selezionati: ${selectedFieldsCount}`,\n                              )}\n                            </span>\n                          </div>\n                          <div>\n                            <span className='text-gray-500'>\n                              {safeT(\n                                'modals.exportInventory.exportPreview.format',\n                                { format: exportFormats.find(f => f.id === exportFormat)?.name },\n                                `Formato: ${exportFormats.find(f => f.id === exportFormat)?.name}`,\n                              )}\n                            </span>\n                          </div>\n                          <div>\n                            <span className='text-gray-500'>\n                              {safeT(\n                                'modals.exportInventory.exportPreview.estimatedSize',\n                                {\n                                  size: `${Math.round(filteredData.length * selectedFieldsCount * 0.1)}KB`,\n                                },\n                                `Dimensione stimata: ${Math.round(filteredData.length * selectedFieldsCount * 0.1)}KB`,\n                              )}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Form Actions */}\n                    <div className='flex justify-end space-x-3 pt-6'>\n                      <button\n                        type='button'\n                        onClick={onClose}\n                        disabled={isExporting}\n                        className='rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50'\n                      >\n                        <span className='text-button-text'>\n                          {safeT('common.cancel', {}, 'Annulla')}\n                        </span>\n                      </button>\n                      <button\n                        type='button'\n                        onClick={handleExport}\n                        disabled={\n                          isExporting || filteredData.length === 0 || selectedFieldsCount === 0\n                        }\n                        className='rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center'\n                      >\n                        {isExporting ? (\n                          <>\n                            <svg\n                              className='animate-spin -ml-1 mr-2 h-4 w-4 text-white'\n                              xmlns='http://www.w3.org/2000/svg'\n                              fill='none'\n                              viewBox='0 0 24 24'\n                            >\n                              <circle\n                                className='opacity-25'\n                                cx='12'\n                                cy='12'\n                                r='10'\n                                stroke='currentColor'\n                                strokeWidth='4'\n                              ></circle>\n                              <path\n                                className='opacity-75'\n                                fill='currentColor'\n                                d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'\n                              ></path>\n                            </svg>\n                            <span className='text-button-text'>\n                              {safeT(\n                                'modals.exportInventory.buttons.exporting',\n                                {},\n                                'Esportazione...',\n                              )}\n                            </span>\n                          </>\n                        ) : (\n                          <>\n                            <DocumentArrowDownIcon className='h-4 w-4 mr-2' />\n                            <span className='text-button-text'>\n                              {safeT(\n                                'modals.exportInventory.buttons.exportData',\n                                {},\n                                'Esporta Dati',\n                              )}\n                            </span>\n                          </>\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n};\n\nexport default ExportInventoryModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\InventoryByCategory.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\InventorySidebar.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowPathIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ExclamationTriangleIcon,\n  ExclamationCircleIcon,\n  ArrowPathIcon,\n} from '@heroicons/react/24/outline';\n\nconst InventorySidebar = ({ onReorder }) => {\n  const { t } = useTranslation('inventory');\n\n  // Sample data for stock warnings\n  const stockWarnings = [\n    {\n      id: 1,\n      name: '4K Monitor 27-inch',\n      stock: 12,\n      minStock: 15,\n      type: 'critical',\n      bgColor: '#FEE2E2',\n      iconColor: '#DC2626',\n      textColor: '#DC2626',\n    },\n    {\n      id: 2,\n      name: 'Adjustable Standing Desk',\n      stock: 19,\n      minStock: 20,\n      type: 'warning',\n      bgColor: '#FEF9C3',\n      iconColor: '#CA8A04',\n      textColor: '#CA8A04',\n    },\n    {\n      id: 3,\n      name: 'Wireless Mouse',\n      stock: 8,\n      minStock: 10,\n      type: 'critical',\n      bgColor: '#FEE2E2',\n      iconColor: '#DC2626',\n      textColor: '#DC2626',\n    },\n    {\n      id: 4,\n      name: 'USB-C Hub',\n      stock: 14,\n      minStock: 15,\n      type: 'warning',\n      bgColor: '#FEF9C3',\n      iconColor: '#CA8A04',\n      textColor: '#CA8A04',\n    },\n  ];\n\n  return (\n    <div className='w-[362px] flex flex-col gap-6'>\n      {/* Stock Warnings */}\n      <div className='bg-white rounded-none shadow-sm p-6 border border-gray-200'>\n        <div className='flex justify-between items-center mb-4'>\n          <h3 className='text-lg font-semibold text-gray-900'>\n            {t('sidebar.stockWarnings', 'Stock Warnings')}\n          </h3>\n          <button className='text-blue-600 text-sm font-medium hover:text-blue-700'>\n            {t('sidebar.viewAll', 'View All')}\n          </button>\n        </div>\n\n        {stockWarnings.length > 0 ? (\n          <div className='space-y-3'>\n            {stockWarnings.map(item => (\n              <div key={item.id} className='bg-gray-50 rounded-lg p-3 flex items-center gap-3'>\n                {/* Status Icon */}\n                <div\n                  className='w-9 h-9 rounded-full flex items-center justify-center flex-shrink-0'\n                  style={{ backgroundColor: item.bgColor }}\n                >\n                  {item.type === 'critical' ? (\n                    <ExclamationTriangleIcon\n                      className='w-5 h-5'\n                      style={{ color: item.iconColor }}\n                    />\n                  ) : (\n                    <ExclamationCircleIcon className='w-5 h-5' style={{ color: item.iconColor }} />\n                  )}\n                </div>\n\n                {/* Product Info */}\n                <div className='flex-1 min-w-0'>\n                  <div className='font-medium text-gray-900 text-base mb-1 truncate'>\n                    {item.name}\n                  </div>\n                  <div className='flex items-center gap-1 text-sm'>\n                    <span style={{ color: item.textColor }} className='font-normal'>\n                      {t('sidebar.inStock', {\n                        count: item.stock,\n                        defaultValue: `${item.stock} in stock`,\n                      })}\n                    </span>\n                    <span className='text-gray-600'>\n                      (\n                      {t('sidebar.min', {\n                        count: item.minStock,\n                        defaultValue: `Min: ${item.minStock}`,\n                      })}\n                      )\n                    </span>\n                  </div>\n                </div>\n\n                {/* Reorder Button */}\n                <button\n                  onClick={() =>\n                    onReorder &&\n                    onReorder({\n                      id: item.id,\n                      name: item.name,\n                      sku: `SKU-${item.id.toString().padStart(3, '0')}`,\n                      stock: item.stock,\n                      minStock: item.minStock,\n                      price: 25.99, // Default price for demo\n                      supplier: 'Default Supplier',\n                    })\n                  }\n                  className='text-blue-600 text-sm font-medium hover:text-blue-700 flex-shrink-0 px-3 py-1 hover:bg-blue-50 rounded'\n                >\n                  {t('sidebar.reorder', 'Reorder')}\n                </button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className='text-center text-gray-500 py-4'>\n            <p className='font-semibold'>\n              {t('sidebar.healthyStock', 'All stock levels are healthy!')}\n            </p>\n            <p>{t('sidebar.noAttention', 'No items require immediate attention.')}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default InventorySidebar;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\InventoryValueTrend.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\ManageCategoriesModal.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":13,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, Fragment } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { XMarkIcon, PlusIcon, PencilIcon, TrashIcon, TagIcon } from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nconst ManageCategoriesModal = ({ isOpen, onClose, onSave }) => {\n  const { t, ready } = useTranslation('inventory');\n\n  const safeT = (key, options = {}, fallback = '') => {\n    if (!ready) return fallback;\n    try {\n      return t(key, options) || fallback;\n    } catch (error) {\n      console.warn(`Translation key not found: ${key}`);\n      return fallback;\n    }\n  };\n  const [categories, setCategories] = useState([\n    {\n      id: 1,\n      name: safeT('categories.electronics', {}, 'Electronics'),\n      description: safeT(\n        'categories.descriptions.electronics',\n        {},\n        'Electronic devices and accessories',\n      ),\n      itemCount: 15,\n    },\n    {\n      id: 2,\n      name: safeT('categories.clothing', {}, 'Clothing'),\n      description: safeT('categories.descriptions.clothing', {}, 'Apparel and fashion items'),\n      itemCount: 8,\n    },\n    {\n      id: 3,\n      name: safeT('categories.books', {}, 'Books'),\n      description: safeT('categories.descriptions.books', {}, 'Books and educational materials'),\n      itemCount: 12,\n    },\n    {\n      id: 4,\n      name: safeT('categories.homeGarden', {}, 'Home & Garden'),\n      description: safeT(\n        'categories.descriptions.homeGarden',\n        {},\n        'Home improvement and garden supplies',\n      ),\n      itemCount: 6,\n    },\n    {\n      id: 5,\n      name: safeT('categories.sports', {}, 'Sports'),\n      description: safeT('categories.descriptions.sports', {}, 'Sports equipment and accessories'),\n      itemCount: 4,\n    },\n    {\n      id: 6,\n      name: safeT('categories.automotive', {}, 'Automotive'),\n      description: safeT(\n        'categories.descriptions.automotive',\n        {},\n        'Car parts and automotive supplies',\n      ),\n      itemCount: 3,\n    },\n    {\n      id: 7,\n      name: safeT('categories.healthBeauty', {}, 'Health & Beauty'),\n      description: safeT('categories.descriptions.healthBeauty', {}, 'Health and beauty products'),\n      itemCount: 7,\n    },\n    {\n      id: 8,\n      name: safeT('categories.toysGames', {}, 'Toys & Games'),\n      description: safeT('categories.descriptions.toysGames', {}, 'Toys and gaming products'),\n      itemCount: 2,\n    },\n  ]);\n  const [newCategory, setNewCategory] = useState({ name: '', description: '' });\n  const [editingCategory, setEditingCategory] = useState(null);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const handleAddCategory = () => {\n    if (!newCategory.name.trim()) {\n      setErrors({\n        name: safeT('modals.manageCategories.errors.nameRequired', {}, 'Category name is required'),\n      });\n      return;\n    }\n\n    if (categories.some(cat => cat.name.toLowerCase() === newCategory.name.toLowerCase())) {\n      setErrors({\n        name: safeT('modals.manageCategories.errors.nameExists', {}, 'Category already exists'),\n      });\n      return;\n    }\n\n    const category = {\n      id: Date.now(),\n      name: newCategory.name.trim(),\n      description: newCategory.description.trim(),\n      itemCount: 0,\n    };\n\n    setCategories(prev => [...prev, category]);\n    setNewCategory({ name: '', description: '' });\n    setShowAddForm(false);\n    setErrors({});\n  };\n\n  const handleEditCategory = category => {\n    setEditingCategory({ ...category });\n  };\n\n  const handleUpdateCategory = () => {\n    if (!editingCategory.name.trim()) {\n      setErrors({\n        editName: safeT(\n          'modals.manageCategories.errors.nameRequired',\n          {},\n          'Category name is required',\n        ),\n      });\n      return;\n    }\n\n    if (\n      categories.some(\n        cat =>\n          cat.id !== editingCategory.id &&\n          cat.name.toLowerCase() === editingCategory.name.toLowerCase(),\n      )\n    ) {\n      setErrors({\n        editName: safeT('modals.manageCategories.errors.nameExists', {}, 'Category already exists'),\n      });\n      return;\n    }\n\n    setCategories(prev =>\n      prev.map(cat =>\n        cat.id === editingCategory.id\n          ? {\n              ...editingCategory,\n              name: editingCategory.name.trim(),\n              description: editingCategory.description.trim(),\n            }\n          : cat,\n      ),\n    );\n    setEditingCategory(null);\n    setErrors({});\n  };\n\n  const handleDeleteCategory = categoryId => {\n    const category = categories.find(cat => cat.id === categoryId);\n    if (category.itemCount > 0) {\n      alert(\n        safeT(\n          'modals.manageCategories.messages.cannotDelete',\n          { name: category.name, count: category.itemCount },\n          `Cannot delete \"${category.name}\" because it contains ${category.itemCount} items. Please move or delete the items first.`,\n        ),\n      );\n      return;\n    }\n\n    if (\n      confirm(\n        safeT(\n          'modals.manageCategories.messages.confirmDelete',\n          { name: category.name },\n          `Are you sure you want to delete the category \"${category.name}\"?`,\n        ),\n      )\n    ) {\n      setCategories(prev => prev.filter(cat => cat.id !== categoryId));\n    }\n  };\n\n  const handleSave = () => {\n    onSave(categories);\n    onClose();\n  };\n\n  const handleClose = () => {\n    setNewCategory({ name: '', description: '' });\n    setEditingCategory(null);\n    setShowAddForm(false);\n    setErrors({});\n    onClose();\n  };\n\n  return (\n    <Transition.Root show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={handleClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 z-10 overflow-y-auto'>\n          <div className='flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n              enterTo='opacity-100 translate-y-0 sm:scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 translate-y-0 sm:scale-100'\n              leaveTo='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n            >\n              <Dialog.Panel className='relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:p-6'>\n                <div className='absolute right-0 top-0 hidden pr-4 pt-4 sm:block'>\n                  <button\n                    type='button'\n                    className='rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                    onClick={handleClose}\n                  >\n                    <span className='sr-only'>{safeT('common.close', {}, 'Close')}</span>\n                    <XMarkIcon className='h-6 w-6' aria-hidden='true' />\n                  </button>\n                </div>\n\n                <div className='sm:flex sm:items-start'>\n                  <div className='w-full'>\n                    <Dialog.Title as='h3' className='text-page-title text-gray-900 mb-6'>\n                      {safeT('modals.manageCategories.title', {}, 'Manage Categories')}\n                    </Dialog.Title>\n\n                    {/* Add New Category Button */}\n                    <div className='mb-6'>\n                      {!showAddForm ? (\n                        <button\n                          onClick={() => setShowAddForm(true)}\n                          className='inline-flex items-center px-4 py-2 border border-transparent text-button-text rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n                        >\n                          <PlusIcon className='h-4 w-4 mr-2' />\n                          {safeT('modals.manageCategories.buttons.addNew', {}, 'Add New Category')}\n                        </button>\n                      ) : (\n                        <div className='bg-gray-50 p-4 rounded-lg border'>\n                          <h4 className='text-card-title text-gray-900 mb-3'>\n                            {safeT(\n                              'modals.manageCategories.forms.addTitle',\n                              {},\n                              'Add New Category',\n                            )}\n                          </h4>\n                          <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                            <div>\n                              <label className='block text-form-label text-gray-700 mb-1'>\n                                {safeT('modals.manageCategories.fields.name', {}, 'Category Name')}{' '}\n                                *\n                              </label>\n                              <input\n                                type='text'\n                                value={newCategory.name}\n                                onChange={e => {\n                                  setNewCategory(prev => ({ ...prev, name: e.target.value }));\n                                  if (errors.name) setErrors(prev => ({ ...prev, name: '' }));\n                                }}\n                                className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm ${\n                                  errors.name ? 'border-red-300' : ''\n                                }`}\n                                placeholder={safeT(\n                                  'modals.manageCategories.placeholders.name',\n                                  {},\n                                  'Enter category name',\n                                )}\n                              />\n                              {errors.name && (\n                                <p className='mt-1 text-sm text-red-600'>{errors.name}</p>\n                              )}\n                            </div>\n                            <div>\n                              <label className='block text-form-label text-gray-700 mb-1'>\n                                {safeT(\n                                  'modals.manageCategories.fields.description',\n                                  {},\n                                  'Description',\n                                )}\n                              </label>\n                              <input\n                                type='text'\n                                value={newCategory.description}\n                                onChange={e =>\n                                  setNewCategory(prev => ({ ...prev, description: e.target.value }))\n                                }\n                                className='block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'\n                                placeholder={safeT(\n                                  'modals.manageCategories.placeholders.description',\n                                  {},\n                                  'Enter description (optional)',\n                                )}\n                              />\n                            </div>\n                          </div>\n                          <div className='flex justify-end space-x-3 mt-4'>\n                            <button\n                              onClick={() => {\n                                setShowAddForm(false);\n                                setNewCategory({ name: '', description: '' });\n                                setErrors({});\n                              }}\n                              className='px-3 py-2 border border-gray-300 rounded-md text-button-text text-gray-700 bg-white hover:bg-gray-50'\n                            >\n                              {safeT('modals.manageCategories.buttons.cancel', {}, 'Cancel')}\n                            </button>\n                            <button\n                              onClick={handleAddCategory}\n                              className='px-3 py-2 border border-transparent rounded-md text-button-text text-white bg-blue-600 hover:bg-blue-700'\n                            >\n                              {safeT('modals.manageCategories.buttons.add', {}, 'Add Category')}\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Categories List */}\n                    <div className='bg-white shadow overflow-hidden sm:rounded-md'>\n                      <ul className='divide-y divide-gray-200'>\n                        {categories.map(category => (\n                          <li key={category.id}>\n                            {editingCategory && editingCategory.id === category.id ? (\n                              <div className='px-4 py-4 bg-gray-50'>\n                                <div className='grid grid-cols-1 md:grid-cols-2 gap-4 mb-4'>\n                                  <div>\n                                    <label className='block text-form-label text-gray-700 mb-1'>\n                                      {safeT(\n                                        'modals.manageCategories.fields.name',\n                                        {},\n                                        'Category Name',\n                                      )}{' '}\n                                      *\n                                    </label>\n                                    <input\n                                      type='text'\n                                      value={editingCategory.name}\n                                      onChange={e => {\n                                        setEditingCategory(prev => ({\n                                          ...prev,\n                                          name: e.target.value,\n                                        }));\n                                        if (errors.editName)\n                                          setErrors(prev => ({ ...prev, editName: '' }));\n                                      }}\n                                      className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm ${\n                                        errors.editName ? 'border-red-300' : ''\n                                      }`}\n                                    />\n                                    {errors.editName && (\n                                      <p className='mt-1 text-sm text-red-600'>{errors.editName}</p>\n                                    )}\n                                  </div>\n                                  <div>\n                                    <label className='block text-form-label text-gray-700 mb-1'>\n                                      {safeT(\n                                        'modals.manageCategories.fields.description',\n                                        {},\n                                        'Description',\n                                      )}\n                                    </label>\n                                    <input\n                                      type='text'\n                                      value={editingCategory.description}\n                                      onChange={e =>\n                                        setEditingCategory(prev => ({\n                                          ...prev,\n                                          description: e.target.value,\n                                        }))\n                                      }\n                                      className='block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm'\n                                    />\n                                  </div>\n                                </div>\n                                <div className='flex justify-end space-x-3'>\n                                  <button\n                                    onClick={() => {\n                                      setEditingCategory(null);\n                                      setErrors({});\n                                    }}\n                                    className='px-3 py-2 border border-gray-300 rounded-md text-button-text text-gray-700 bg-white hover:bg-gray-50'\n                                  >\n                                    {safeT('modals.manageCategories.buttons.cancel', {}, 'Cancel')}\n                                  </button>\n                                  <button\n                                    onClick={handleUpdateCategory}\n                                    className='px-3 py-2 border border-transparent rounded-md text-button-text text-white bg-blue-600 hover:bg-blue-700'\n                                  >\n                                    {safeT(\n                                      'modals.manageCategories.buttons.saveChanges',\n                                      {},\n                                      'Save Changes',\n                                    )}\n                                  </button>\n                                </div>\n                              </div>\n                            ) : (\n                              <div className='px-4 py-4 flex items-center justify-between'>\n                                <div className='flex items-center'>\n                                  <div className='flex-shrink-0'>\n                                    <TagIcon className='h-8 w-8 text-gray-400' />\n                                  </div>\n                                  <div className='ml-4'>\n                                    <div className='text-sm font-medium text-gray-900'>\n                                      {category.name}\n                                    </div>\n                                    <div className='text-sm text-gray-500'>\n                                      {category.description}\n                                    </div>\n                                    <div className='text-xs text-gray-400 mt-1'>\n                                      {category.itemCount}{' '}\n                                      {category.itemCount === 1\n                                        ? safeT(\n                                            'modals.manageCategories.itemCount.singular',\n                                            {},\n                                            'item',\n                                          )\n                                        : safeT(\n                                            'modals.manageCategories.itemCount.plural',\n                                            {},\n                                            'items',\n                                          )}\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className='flex items-center space-x-2'>\n                                  <button\n                                    onClick={() => handleEditCategory(category)}\n                                    className='p-2 text-gray-400 hover:text-gray-600'\n                                    title={safeT(\n                                      'modals.manageCategories.tooltips.edit',\n                                      {},\n                                      'Edit category',\n                                    )}\n                                  >\n                                    <PencilIcon className='h-4 w-4' />\n                                  </button>\n                                  <button\n                                    onClick={() => handleDeleteCategory(category.id)}\n                                    className='p-2 text-gray-400 hover:text-red-600'\n                                    title={safeT(\n                                      'modals.manageCategories.tooltips.delete',\n                                      {},\n                                      'Delete category',\n                                    )}\n                                    disabled={category.itemCount > 0}\n                                  >\n                                    <TrashIcon className='h-4 w-4' />\n                                  </button>\n                                </div>\n                              </div>\n                            )}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {/* Form Actions */}\n                    <div className='flex justify-end space-x-3 pt-6'>\n                      <button\n                        type='button'\n                        onClick={handleClose}\n                        className='rounded-md border border-gray-300 bg-white px-4 py-2 text-button-text text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                      >\n                        {safeT('modals.manageCategories.buttons.cancel', {}, 'Cancel')}\n                      </button>\n                      <button\n                        type='button'\n                        onClick={handleSave}\n                        className='rounded-md border border-transparent bg-blue-600 px-4 py-2 text-button-text text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                      >\n                        {safeT('modals.manageCategories.buttons.save', {}, 'Save Changes')}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n};\n\nexport default ManageCategoriesModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\QuickActions.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\RecentActivities.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PlusIcon,\n  ArrowPathIcon,\n  ExclamationTriangleIcon,\n  ShoppingCartIcon,\n} from '@heroicons/react/24/outline';\n\nconst RecentActivities = () => {\n  const { t, ready } = useTranslation('inventory');\n\n  // Safe translation function\n  const safeT = (key, options = {}, fallback = key) => {\n    if (!ready) return fallback;\n    return t(key, options);\n  };\n\n  const activities = [\n    {\n      id: 1,\n      type: 'stock_adjustment',\n      icon: ArrowPathIcon,\n      iconBg: 'bg-blue-100',\n      iconColor: 'text-blue-600',\n      title: safeT('activities.stockAdjustment', {}, 'Stock Adjustment'),\n      product: '27\" Monitor',\n      time: safeT('activities.minutesAgo', { count: 10 }, '10 minutes ago'),\n      detail: '+5 units',\n    },\n    {\n      id: 2,\n      type: 'new_item',\n      icon: PlusIcon,\n      iconBg: 'bg-green-100',\n      iconColor: 'text-green-600',\n      title: safeT('activities.newItemAdded', {}, 'New Item Added'),\n      product: 'Wireless Earbuds',\n      time: safeT('activities.hoursAgo', { count: 2 }, '2 hours ago'),\n      detail: 'Initial stock: 25',\n    },\n    {\n      id: 3,\n      type: 'reorder',\n      icon: ShoppingCartIcon,\n      iconBg: 'bg-yellow-100',\n      iconColor: 'text-yellow-600',\n      title: safeT('activities.itemReordered', {}, 'Item Reordered'),\n      product: 'Ink Cartridges',\n      time: safeT('activities.hoursAgo', { count: 4 }, '4 hours ago'),\n      detail: 'Order placed: 20 units',\n    },\n    {\n      id: 4,\n      type: 'stock_adjustment',\n      icon: ArrowPathIcon,\n      iconBg: 'bg-blue-100',\n      iconColor: 'text-red-600',\n      title: safeT('activities.stockAdjustment', {}, 'Stock Adjustment'),\n      product: 'Notebook Set',\n      time: safeT('activities.yesterday', {}, 'Yesterday'),\n      detail: '-10 units',\n    },\n  ];\n\n  return (\n    <div className='bg-white rounded-none shadow-sm h-full flex flex-col'>\n      {/* Header */}\n      <div className='flex justify-between items-center px-6 pt-6 pb-6 border-b border-gray-200'>\n        <h3 className='text-lg font-semibold text-gray-900'>\n          {safeT('activities.recentActivities', {}, 'Recent Activities')}\n        </h3>\n        <button className='text-blue-600 hover:text-blue-700 text-sm font-medium'>\n          {safeT('activities.viewAll', {}, 'View All')}\n        </button>\n      </div>\n\n      {/* Activities List */}\n      <div className='px-6 pb-6 flex-1'>\n        <div className='space-y-3'>\n          {activities.slice(0, 4).map(activity => (\n            <div key={activity.id} className='flex items-center space-x-3'>\n              <div className={`${activity.iconBg} rounded-lg p-1.5`}>\n                <activity.icon className={`h-4 w-4 ${activity.iconColor}`} />\n              </div>\n              <div className='flex-1 min-w-0'>\n                <p className='text-sm font-medium text-gray-900 truncate'>{activity.title}</p>\n                <p className='text-xs text-gray-500 truncate'>\n                  {activity.product} ÔÇó {activity.detail}\n                </p>\n              </div>\n              <span className='text-xs text-gray-400 whitespace-nowrap'>{activity.time}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RecentActivities;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\ReorderModal.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":16,"suggestions":[{"fix":{"range":[1020,1066],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  XMarkIcon,\n  ArrowPathIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  PlusIcon,\n  MinusIcon,\n} from '@heroicons/react/24/outline';\n\nconst ReorderModal = ({ isOpen, onClose, item }) => {\n  const { t, ready } = useTranslation(['inventory', 'common'], { useSuspense: false });\n  const [reorderQuantity, setReorderQuantity] = useState(item?.minStock || 0);\n  const [urgency, setUrgency] = useState('normal');\n  const [notes, setNotes] = useState('');\n  const [supplier, setSupplier] = useState(item?.supplier || '');\n\n  // Wait for i18n to be ready before rendering\n  if (!ready || !item) return null;\n\n  const handleReorder = () => {\n    // Here you would implement the actual reorder logic\n    const reorderData = {\n      itemId: item?.id,\n      itemName: item?.name,\n      quantity: reorderQuantity,\n      urgency,\n      supplier,\n      notes,\n      estimatedCost: (item?.price || 0) * reorderQuantity,\n    };\n\n    console.log('Creating reorder:', reorderData);\n\n    // Show success message\n    alert(\n      t('inventory:reorder.messages.created', {\n        defaultValue: `Riordino creato per ${reorderQuantity} unit├á di ${item.name}`,\n        quantity: reorderQuantity,\n        itemName: item.name,\n      }),\n    );\n    onClose();\n  };\n\n  const adjustQuantity = delta => {\n    const newQuantity = Math.max(0, reorderQuantity + delta);\n    setReorderQuantity(newQuantity);\n  };\n\n  if (!isOpen) return null;\n\n  const estimatedCost = (item.price || 0) * reorderQuantity;\n  const currentStockLevel = item.stock;\n  const minStockLevel = item.minStock;\n  const stockDeficit = Math.max(0, minStockLevel - currentStockLevel);\n\n  return (\n    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\n      <div\n        className='bg-white rounded-lg shadow-xl w-full max-w-2xl'\n        style={{ height: '90vh', display: 'flex', flexDirection: 'column' }}\n      >\n        {/* Header */}\n        <div className='flex items-center justify-between p-6 border-b border-gray-200 flex-shrink-0'>\n          <div className='flex items-center space-x-3'>\n            <ArrowPathIcon className='h-6 w-6 text-blue-600' />\n            <h2 className='text-page-title text-gray-900'>\n              {t('inventory:reorder.title', 'Riordina Articolo')}\n            </h2>\n          </div>\n          <button onClick={onClose} className='text-gray-400 hover:text-gray-600 transition-colors'>\n            <XMarkIcon className='h-6 w-6' />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className='p-6 overflow-y-auto flex-grow'>\n          {/* Item Information */}\n          <div className='bg-gray-50 rounded-lg p-4 mb-6'>\n            <h3 className='text-card-title text-gray-900 mb-3'>\n              {t('inventory:reorder.itemInfo', 'Informazioni Articolo')}\n            </h3>\n            <div className='grid grid-cols-2 gap-4 text-sm'>\n              <div>\n                <span className='text-gray-600'>{t('inventory:reorder.fields.name', 'Nome:')}</span>\n                <span className='ml-2 font-medium'>{item.name}</span>\n              </div>\n              <div>\n                <span className='text-gray-600'>{t('inventory:reorder.fields.sku', 'SKU:')}</span>\n                <span className='ml-2 font-medium'>{item.sku}</span>\n              </div>\n              <div>\n                <span className='text-gray-600'>\n                  {t('inventory:reorder.fields.currentStock', 'Scorta Attuale:')}\n                </span>\n                <span\n                  className={`ml-2 font-medium ${\n                    currentStockLevel <= minStockLevel ? 'text-red-600' : 'text-green-600'\n                  }`}\n                >\n                  {currentStockLevel}\n                </span>\n              </div>\n              <div>\n                <span className='text-gray-600'>\n                  {t('inventory:reorder.fields.minimumStock', 'Scorta Minima:')}:\n                </span>\n                <span className='ml-2 font-medium'>{minStockLevel}</span>\n              </div>\n              <div>\n                <span className='text-gray-600'>\n                  {t('inventory:reorder.fields.unitPrice', 'Prezzo Unitario:')}:\n                </span>\n                <span className='ml-2 font-medium'>Ôé¼{item.price?.toFixed(2)}</span>\n              </div>\n              <div>\n                <span className='text-gray-600'>\n                  {t('inventory:reorder.fields.supplier', 'Fornitore:')}:\n                </span>\n                <span className='ml-2 font-medium'>{item.supplier}</span>\n              </div>\n            </div>\n\n            {stockDeficit > 0 && (\n              <div className='mt-3 p-3 bg-red-50 border border-red-200 rounded-md'>\n                <div className='flex items-center'>\n                  <ExclamationTriangleIcon className='h-5 w-5 text-red-600 mr-2' />\n                  <span className='text-red-800 text-sm font-medium'>\n                    {t('inventory:reorder.stockDeficit', {\n                      deficit: stockDeficit,\n                      defaultValue: `Deficit scorte: ${stockDeficit} unit├á sotto il livello minimo`,\n                    })}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Reorder Details */}\n          <div className='space-y-6'>\n            {/* Quantity */}\n            <div>\n              <label className='block text-form-label text-gray-700 mb-2'>\n                {t('inventory:reorder.quantity', 'Quantit├á Riordino')}\n              </label>\n              <div className='flex items-center space-x-3'>\n                <button\n                  onClick={() => adjustQuantity(-1)}\n                  className='p-2 border border-gray-300 rounded-md hover:bg-gray-50'\n                  disabled={reorderQuantity <= 0}\n                >\n                  <MinusIcon className='h-4 w-4' />\n                </button>\n                <input\n                  type='number'\n                  value={reorderQuantity}\n                  onChange={e => setReorderQuantity(Math.max(0, parseInt(e.target.value) || 0))}\n                  className='w-24 text-center border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  min='0'\n                />\n                <button\n                  onClick={() => adjustQuantity(1)}\n                  className='p-2 border border-gray-300 rounded-md hover:bg-gray-50'\n                >\n                  <PlusIcon className='h-4 w-4' />\n                </button>\n                <span className='text-sm text-gray-600'>\n                  {t('inventory:reorder.units', 'unit├á')}\n                </span>\n              </div>\n              <div className='mt-2 flex space-x-4'>\n                <button\n                  onClick={() => setReorderQuantity(stockDeficit)}\n                  className='text-sm text-blue-600 hover:text-blue-700'\n                  disabled={stockDeficit <= 0}\n                >\n                  {t('inventory:reorder.actions.fillDeficit', {\n                    deficit: stockDeficit,\n                    defaultValue: `Riempi deficit (${stockDeficit})`,\n                  })}\n                </button>\n                <button\n                  onClick={() => setReorderQuantity(minStockLevel)}\n                  className='text-sm text-blue-600 hover:text-blue-700'\n                >\n                  {t('inventory:reorder.actions.reorderToMinimum', {\n                    minimum: minStockLevel,\n                    defaultValue: `Riordina al minimo (${minStockLevel})`,\n                  })}\n                </button>\n                <button\n                  onClick={() => setReorderQuantity(minStockLevel * 2)}\n                  className='text-sm text-blue-600 hover:text-blue-700'\n                >\n                  {t('inventory:reorder.actions.reorderToDouble', {\n                    double: minStockLevel * 2,\n                    defaultValue: `Riordina al doppio del minimo (${minStockLevel * 2})`,\n                  })}\n                </button>\n              </div>\n            </div>\n\n            {/* Urgency */}\n            <div>\n              <label className='block text-form-label text-gray-700 mb-2'>\n                {t('inventory:reorder.urgencyLabel', 'Livello di Urgenza')}\n              </label>\n              <div className='grid grid-cols-3 gap-3'>\n                {[\n                  {\n                    value: 'low',\n                    label: t('inventory:reorder.urgency.low', 'Bassa'),\n                    color: 'green',\n                  },\n                  {\n                    value: 'normal',\n                    label: t('inventory:reorder.urgency.normal', 'Normale'),\n                    color: 'blue',\n                  },\n                  {\n                    value: 'high',\n                    label: t('inventory:reorder.urgency.high', 'Alta'),\n                    color: 'red',\n                  },\n                ].map(option => (\n                  <button\n                    key={option.value}\n                    onClick={() => setUrgency(option.value)}\n                    className={`p-3 border rounded-lg text-sm font-medium transition-all ${\n                      urgency === option.value\n                        ? `border-${option.color}-500 bg-${option.color}-50 text-${option.color}-700`\n                        : 'border-gray-300 text-gray-700 hover:border-gray-400'\n                    }`}\n                  >\n                    <span className='text-button-text'>{option.label}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Supplier */}\n            <div>\n              <label htmlFor='supplier' className='block text-form-label text-gray-700 mb-2'>\n                {t('inventory:reorder.supplier', 'Fornitore')}\n              </label>\n              <input\n                type='text'\n                id='supplier'\n                value={supplier}\n                onChange={e => setSupplier(e.target.value)}\n                placeholder={t(\n                  'inventory:reorder.placeholders.supplier',\n                  'Es. Fornitore Principale',\n                )}\n                className='w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              />\n            </div>\n\n            {/* Notes */}\n            <div>\n              <label htmlFor='notes' className='block text-form-label text-gray-700 mb-2'>\n                {t('inventory:reorder.notes', 'Note Aggiuntive')}\n              </label>\n              <textarea\n                id='notes'\n                value={notes}\n                onChange={e => setNotes(e.target.value)}\n                placeholder={t(\n                  'inventory:reorder.placeholders.notes',\n                  'Aggiungi note per il riordino...',\n                )}\n                className='w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                rows='3'\n              ></textarea>\n            </div>\n\n            {/* Cost Summary */}\n            <div className='bg-gray-50 rounded-lg p-4'>\n              <h4 className='text-card-title text-gray-900 mb-3'>\n                {t('inventory:reorder.costSummaryTitle', 'Riepilogo Costi Stimati')}\n              </h4>\n              <div className='space-y-2 text-sm'>\n                <div className='flex justify-between'>\n                  <span className='text-gray-600'>\n                    {t('inventory:reorder.costSummary.quantity', 'Quantit├á:')}\n                  </span>\n                  <span className='font-medium'>\n                    {reorderQuantity} {t('inventory:reorder.units', 'unit├á')}\n                  </span>\n                </div>\n                <div className='flex justify-between'>\n                  <span className='text-gray-600'>\n                    {t('inventory:reorder.costSummary.unitPrice', 'Prezzo Unitario:')}\n                  </span>\n                  <span className='font-medium'>Ôé¼{item.price?.toFixed(2)}</span>\n                </div>\n                <div className='flex justify-between text-base font-semibold pt-2 border-t border-gray-200 mt-2'>\n                  <span className='text-gray-800'>\n                    {t('inventory:reorder.costSummary.estimatedTotal', 'Totale Stimato:')}\n                  </span>\n                  <span className='text-blue-600'>Ôé¼{estimatedCost.toFixed(2)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className='flex justify-end items-center p-6 bg-gray-50 border-t border-gray-200'>\n          <button\n            onClick={onClose}\n            className='px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 mr-3'\n          >\n            {t('common:cancel', 'Annulla')}\n          </button>\n          <button\n            onClick={handleReorder}\n            className='px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-300'\n            disabled={reorderQuantity <= 0}\n          >\n            <div className='flex items-center'>\n              <CheckCircleIcon className='h-5 w-5 mr-2' />\n              <span>{t('inventory:reorder.createOrder', 'Crea Riordino')}</span>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReorderModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\ReportsModal.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":138,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":138,"endColumn":16,"suggestions":[{"fix":{"range":[3940,4043],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  XMarkIcon,\n  DocumentTextIcon,\n  ChartBarIcon,\n  CalendarIcon,\n  FunnelIcon,\n  ArrowDownTrayIcon,\n} from '@heroicons/react/24/outline';\n\nconst ReportsModal = ({ isOpen, onClose }) => {\n  const { t, ready } = useTranslation('inventory');\n  const [selectedReport, setSelectedReport] = useState('inventory-summary');\n  const [dateRange, setDateRange] = useState({\n    startDate: '',\n    endDate: '',\n  });\n  const [filters, setFilters] = useState({\n    category: '',\n    location: '',\n    stockLevel: '',\n  });\n\n  // Safe translation function\n  const safeT = (key, options = {}, fallback = key) => {\n    if (!ready) return fallback;\n    return t(key, options);\n  };\n\n  const reportTypes = [\n    {\n      id: 'inventory-summary',\n      name: safeT('reports.types.inventorySummary.name', {}, 'Inventory Summary'),\n      description: safeT(\n        'reports.types.inventorySummary.description',\n        {},\n        'Complete overview of all inventory items',\n      ),\n      icon: ChartBarIcon,\n      colors: {\n        border: 'border-blue-500',\n        background: 'bg-blue-50',\n        icon: 'text-blue-600',\n        hover: 'hover:border-blue-400',\n        shadow: 'hover:shadow-blue-100',\n      },\n    },\n    {\n      id: 'stock-levels',\n      name: safeT('reports.types.stockLevels.name', {}, 'Stock Levels Report'),\n      description: safeT(\n        'reports.types.stockLevels.description',\n        {},\n        'Current stock levels and alerts',\n      ),\n      icon: DocumentTextIcon,\n      colors: {\n        border: 'border-green-500',\n        background: 'bg-green-50',\n        icon: 'text-green-600',\n        hover: 'hover:border-green-400',\n        shadow: 'hover:shadow-green-100',\n      },\n    },\n    {\n      id: 'low-stock',\n      name: safeT('reports.types.lowStock.name', {}, 'Low Stock Report'),\n      description: safeT(\n        'reports.types.lowStock.description',\n        {},\n        'Items below minimum stock levels',\n      ),\n      icon: DocumentTextIcon,\n      colors: {\n        border: 'border-red-500',\n        background: 'bg-red-50',\n        icon: 'text-red-600',\n        hover: 'hover:border-red-400',\n        shadow: 'hover:shadow-red-100',\n      },\n    },\n    {\n      id: 'inventory-valuation',\n      name: safeT('reports.types.inventoryValuation.name', {}, 'Inventory Valuation'),\n      description: safeT(\n        'reports.types.inventoryValuation.description',\n        {},\n        'Total value of inventory by category',\n      ),\n      icon: ChartBarIcon,\n      colors: {\n        border: 'border-purple-500',\n        background: 'bg-purple-50',\n        icon: 'text-purple-600',\n        hover: 'hover:border-purple-400',\n        shadow: 'hover:shadow-purple-100',\n      },\n    },\n    {\n      id: 'movement-history',\n      name: safeT('reports.types.movementHistory.name', {}, 'Movement History'),\n      description: safeT(\n        'reports.types.movementHistory.description',\n        {},\n        'Stock movements over time',\n      ),\n      icon: DocumentTextIcon,\n      colors: {\n        border: 'border-orange-500',\n        background: 'bg-orange-50',\n        icon: 'text-orange-600',\n        hover: 'hover:border-orange-400',\n        shadow: 'hover:shadow-orange-100',\n      },\n    },\n    {\n      id: 'supplier-analysis',\n      name: safeT('reports.types.supplierAnalysis.name', {}, 'Supplier Analysis'),\n      description: safeT(\n        'reports.types.supplierAnalysis.description',\n        {},\n        'Performance analysis by supplier',\n      ),\n      icon: ChartBarIcon,\n      colors: {\n        border: 'border-indigo-500',\n        background: 'bg-indigo-50',\n        icon: 'text-indigo-600',\n        hover: 'hover:border-indigo-400',\n        shadow: 'hover:shadow-indigo-100',\n      },\n    },\n  ];\n\n  const handleGenerateReport = () => {\n    // Here you would implement the actual report generation logic\n    console.log('Generating report:', {\n      type: selectedReport,\n      dateRange,\n      filters,\n    });\n\n    // Show success message or download report\n    alert(safeT('reports.messages.generated', {}, 'Report generated successfully!'));\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\n      <div className='bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden'>\n        {/* Header */}\n        <div className='flex items-center justify-between p-6 border-b border-gray-200'>\n          <div className='flex items-center space-x-3'>\n            <DocumentTextIcon className='h-6 w-6 text-blue-600' />\n            <h2 className='text-page-title text-gray-900'>\n              {safeT('reports.title', {}, 'Generate Reports')}\n            </h2>\n          </div>\n          <button onClick={onClose} className='text-gray-400 hover:text-gray-600 transition-colors'>\n            <XMarkIcon className='h-6 w-6' />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className='p-6 overflow-y-auto max-h-[calc(90vh-140px)]'>\n          <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>\n            {/* Report Types */}\n            <div>\n              <h3 className='text-card-title text-gray-900 mb-4'>\n                {safeT('reports.selectType', {}, 'Select Report Type')}\n              </h3>\n              <div className='space-y-3'>\n                {reportTypes.map(report => {\n                  const IconComponent = report.icon;\n                  const isSelected = selectedReport === report.id;\n                  return (\n                    <div\n                      key={report.id}\n                      className={`p-4 border rounded-lg cursor-pointer transition-all duration-200 transform hover:scale-105 hover:shadow-lg ${\n                        isSelected\n                          ? `${report.colors.border} ${report.colors.background} ${report.colors.shadow}`\n                          : `border-gray-200 hover:border-gray-300 ${report.colors.hover}`\n                      }`}\n                      onClick={() => setSelectedReport(report.id)}\n                    >\n                      <div className='flex items-start space-x-3'>\n                        <IconComponent\n                          className={`h-5 w-5 mt-0.5 transition-colors ${\n                            isSelected ? report.colors.icon : 'text-gray-500'\n                          }`}\n                        />\n                        <div>\n                          <h4 className='font-medium text-gray-900'>{report.name}</h4>\n                          <p className='text-sm text-gray-600 mt-1'>{report.description}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Filters and Options */}\n            <div>\n              <h3 className='text-card-title text-gray-900 mb-4'>\n                {safeT('reports.options', {}, 'Report Options')}\n              </h3>\n\n              {/* Date Range */}\n              <div className='mb-6'>\n                <label className='block text-form-label text-gray-700 mb-2'>\n                  <CalendarIcon className='h-4 w-4 inline mr-1' />\n                  {safeT('reports.dateRange', {}, 'Date Range')}\n                </label>\n                <div className='grid grid-cols-2 gap-3'>\n                  <input\n                    type='date'\n                    value={dateRange.startDate}\n                    onChange={e => setDateRange({ ...dateRange, startDate: e.target.value })}\n                    className='border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                    placeholder={safeT('common.startDate', {}, 'Start Date')}\n                  />\n                  <input\n                    type='date'\n                    value={dateRange.endDate}\n                    onChange={e => setDateRange({ ...dateRange, endDate: e.target.value })}\n                    className='border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                    placeholder={safeT('common.endDate', {}, 'End Date')}\n                  />\n                </div>\n              </div>\n\n              {/* Filters */}\n              <div className='mb-6'>\n                <label className='block text-form-label text-gray-700 mb-2'>\n                  <FunnelIcon className='h-4 w-4 inline mr-1' />\n                  {safeT('reports.filters.label', {}, 'Filters')}\n                </label>\n                <div className='space-y-3'>\n                  <select\n                    value={filters.category}\n                    onChange={e => setFilters({ ...filters, category: e.target.value })}\n                    className='w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  >\n                    <option value=''>\n                      {safeT('reports.filters.allCategories', {}, 'All Categories')}\n                    </option>\n                    <option value='electronics'>\n                      {safeT('reports.filters.electronics', {}, 'Electronics')}\n                    </option>\n                    <option value='furniture'>\n                      {safeT('reports.filters.furniture', {}, 'Furniture')}\n                    </option>\n                    <option value='office-supplies'>\n                      {safeT('reports.filters.officeSupplies', {}, 'Office Supplies')}\n                    </option>\n                  </select>\n\n                  <select\n                    value={filters.location}\n                    onChange={e => setFilters({ ...filters, location: e.target.value })}\n                    className='w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  >\n                    <option value=''>\n                      {safeT('reports.filters.allLocations', {}, 'All Locations')}\n                    </option>\n                    <option value='warehouse-a'>\n                      {safeT('reports.filters.warehouseA', {}, 'Warehouse A')}\n                    </option>\n                    <option value='warehouse-b'>\n                      {safeT('reports.filters.warehouseB', {}, 'Warehouse B')}\n                    </option>\n                    <option value='store-front'>\n                      {safeT('reports.filters.storeFront', {}, 'Store Front')}\n                    </option>\n                  </select>\n\n                  <select\n                    value={filters.stockLevel}\n                    onChange={e => setFilters({ ...filters, stockLevel: e.target.value })}\n                    className='w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  >\n                    <option value=''>\n                      {safeT('reports.filters.allStockLevels', {}, 'All Stock Levels')}\n                    </option>\n                    <option value='in-stock'>\n                      {safeT('reports.filters.inStock', {}, 'In Stock')}\n                    </option>\n                    <option value='low-stock'>\n                      {safeT('reports.filters.lowStock', {}, 'Low Stock')}\n                    </option>\n                    <option value='out-of-stock'>\n                      {safeT('reports.filters.outOfStock', {}, 'Out of Stock')}\n                    </option>\n                  </select>\n                </div>\n              </div>\n\n              {/* Preview */}\n              <div className='bg-gray-50 rounded-lg p-4'>\n                <h4 className='text-card-title text-gray-900 mb-2'>\n                  {safeT('reports.preview.title', {}, 'Report Preview')}\n                </h4>\n                <div className='text-sm text-gray-600'>\n                  <p>\n                    <span className='font-medium'>\n                      {safeT('reports.preview.type', {}, 'Type')}:\n                    </span>{' '}\n                    {reportTypes.find(r => r.id === selectedReport)?.name}\n                  </p>\n                  {dateRange.startDate && (\n                    <p>\n                      <span className='font-medium'>\n                        {safeT('reports.preview.period', {}, 'Period')}:\n                      </span>{' '}\n                      {dateRange.startDate} to{' '}\n                      {dateRange.endDate || safeT('reports.preview.present', {}, 'Present')}\n                    </p>\n                  )}\n                  {filters.category && (\n                    <p>\n                      <span className='font-medium'>\n                        {safeT('reports.preview.category', {}, 'Category')}:\n                      </span>{' '}\n                      {safeT(`reports.filters.${filters.category}`, {}, filters.category)}\n                    </p>\n                  )}\n                  {filters.location && (\n                    <p>\n                      <span className='font-medium'>\n                        {safeT('reports.preview.location', {}, 'Location')}:\n                      </span>{' '}\n                      {safeT(`reports.filters.${filters.location}`, {}, filters.location)}\n                    </p>\n                  )}\n                  {filters.stockLevel && (\n                    <p>\n                      <span className='font-medium'>\n                        {safeT('reports.preview.stockLevel', {}, 'Stock Level')}:\n                      </span>{' '}\n                      {safeT(`reports.filters.${filters.stockLevel}`, {}, filters.stockLevel)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className='flex items-center justify-end space-x-3 p-6 border-t border-gray-200 bg-gray-50'>\n          <button\n            onClick={onClose}\n            className='px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n          >\n            <span className='text-button-text'>{safeT('common.cancel', {}, 'Cancel')}</span>\n          </button>\n          <button\n            onClick={handleGenerateReport}\n            className='px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 flex items-center space-x-2'\n          >\n            <ArrowDownTrayIcon className='h-4 w-4' />\n            <span className='text-button-text'>\n              {safeT('reports.generate', {}, 'Generate Report')}\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportsModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\inventory\\StockAlertsModal.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":25,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, Fragment } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport {\n  XMarkIcon,\n  ExclamationTriangleIcon,\n  ArchiveBoxIcon,\n  MapPinIcon,\n  TagIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nconst StockAlertsModal = ({ isOpen, onClose, inventoryData }) => {\n  const { t } = useTranslation('inventory');\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [filter, setFilter] = useState('all'); // 'all', 'critical', 'low', 'out'\n\n  // Safe translation function with fallback\n  const safeT = (key, options = {}, fallback = '') => {\n    try {\n      const result = t(key, options);\n      return result !== key ? result : fallback;\n    } catch (error) {\n      console.warn(`Translation missing for key: ${key}`);\n      return fallback;\n    }\n  };\n\n  // Calculate stock alerts\n  const getStockAlerts = () => {\n    if (!inventoryData) return [];\n\n    return inventoryData\n      .map(item => {\n        const stockLevel = item.stock;\n        const minStock = item.minStock || 10;\n        const criticalLevel = Math.floor(minStock * 0.5);\n\n        let alertType = 'normal';\n        let alertMessage = '';\n        let priority = 0;\n\n        if (stockLevel === 0) {\n          alertType = 'out';\n          alertMessage = safeT('modals.stockAlerts.messages.outOfStock', {}, 'Out of stock');\n          priority = 3;\n        } else if (stockLevel <= criticalLevel) {\n          alertType = 'critical';\n          alertMessage = safeT('modals.stockAlerts.messages.critical', {}, 'Critical stock level');\n          priority = 2;\n        } else if (stockLevel <= minStock) {\n          alertType = 'low';\n          alertMessage = safeT('modals.stockAlerts.messages.low', {}, 'Low stock');\n          priority = 1;\n        }\n\n        return {\n          ...item,\n          alertType,\n          alertMessage,\n          priority,\n          minStock,\n          criticalLevel,\n        };\n      })\n      .filter(item => item.priority > 0)\n      .sort((a, b) => b.priority - a.priority);\n  };\n\n  const stockAlerts = getStockAlerts();\n\n  const filteredAlerts = stockAlerts.filter(item => {\n    if (filter === 'all') return true;\n    return item.alertType === filter;\n  });\n\n  const getAlertColor = alertType => {\n    switch (alertType) {\n      case 'out':\n        return 'text-red-600 bg-red-50 border-red-200';\n      case 'critical':\n        return 'text-orange-600 bg-orange-50 border-orange-200';\n      case 'low':\n        return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getAlertIcon = alertType => {\n    switch (alertType) {\n      case 'out':\n        return XCircleIcon;\n      case 'critical':\n        return ExclamationTriangleIcon;\n      case 'low':\n        return ExclamationTriangleIcon;\n      default:\n        return CheckCircleIcon;\n    }\n  };\n\n  const handleSelectItem = itemId => {\n    setSelectedItems(prev =>\n      prev.includes(itemId) ? prev.filter(id => id !== itemId) : [...prev, itemId],\n    );\n  };\n\n  const handleSelectAll = () => {\n    if (selectedItems.length === filteredAlerts.length) {\n      setSelectedItems([]);\n    } else {\n      setSelectedItems(filteredAlerts.map(item => item.id));\n    }\n  };\n\n  const handleBulkAction = action => {\n    if (selectedItems.length === 0) {\n      alert(\n        safeT('modals.stockAlerts.messages.selectItemsFirst', {}, 'Please select items first.'),\n      );\n      return;\n    }\n\n    switch (action) {\n      case 'reorder':\n        alert(\n          safeT(\n            'modals.stockAlerts.messages.reorderCreated',\n            { count: selectedItems.length },\n            `Reorder request created for ${selectedItems.length} items.`,\n          ),\n        );\n        break;\n      case 'update':\n        alert(\n          safeT(\n            'modals.stockAlerts.messages.stockUpdateOpened',\n            { count: selectedItems.length },\n            `Stock update form opened for ${selectedItems.length} items.`,\n          ),\n        );\n        break;\n      case 'notify':\n        alert(\n          safeT(\n            'modals.stockAlerts.messages.notificationsSent',\n            { count: selectedItems.length },\n            `Notifications sent for ${selectedItems.length} items.`,\n          ),\n        );\n        break;\n    }\n\n    setSelectedItems([]);\n  };\n\n  const alertCounts = {\n    all: stockAlerts.length,\n    out: stockAlerts.filter(item => item.alertType === 'out').length,\n    critical: stockAlerts.filter(item => item.alertType === 'critical').length,\n    low: stockAlerts.filter(item => item.alertType === 'low').length,\n  };\n\n  return (\n    <Transition.Root show={isOpen} as={Fragment}>\n      <Dialog as='div' className='relative z-50' onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-out duration-300'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in duration-200'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 z-10 overflow-y-auto'>\n          <div className='flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0'>\n            <Transition.Child\n              as={Fragment}\n              enter='ease-out duration-300'\n              enterFrom='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n              enterTo='opacity-100 translate-y-0 sm:scale-100'\n              leave='ease-in duration-200'\n              leaveFrom='opacity-100 translate-y-0 sm:scale-100'\n              leaveTo='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n            >\n              <Dialog.Panel className='relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-6xl sm:p-6'>\n                <div className='absolute right-0 top-0 hidden pr-4 pt-4 sm:block'>\n                  <button\n                    type='button'\n                    className='rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                    onClick={onClose}\n                  >\n                    <span className='sr-only'>{safeT('common.close', {}, 'Close')}</span>\n                    <XMarkIcon className='h-6 w-6' aria-hidden='true' />\n                  </button>\n                </div>\n\n                <div className='sm:flex sm:items-start'>\n                  <div className='w-full'>\n                    <Dialog.Title\n                      as='h3'\n                      className='text-page-title text-gray-900 mb-6 flex items-center'\n                    >\n                      <ExclamationTriangleIcon className='h-6 w-6 text-orange-500 mr-2' />\n                      {safeT(\n                        'modals.stockAlerts.title',\n                        { count: stockAlerts.length },\n                        `Stock Alerts (${stockAlerts.length} items need attention)`,\n                      )}\n                    </Dialog.Title>\n\n                    {stockAlerts.length === 0 ? (\n                      <div className='text-center py-12'>\n                        <CheckCircleIcon className='mx-auto h-12 w-12 text-green-400' />\n                        <h3 className='mt-2 text-card-title text-gray-900'>\n                          {safeT(\n                            'modals.stockAlerts.emptyState.title',\n                            {},\n                            'All stock levels are healthy!',\n                          )}\n                        </h3>\n                        <p className='mt-1 text-subtitle text-gray-500'>\n                          {safeT(\n                            'modals.stockAlerts.emptyState.description',\n                            {},\n                            'No items require immediate attention.',\n                          )}\n                        </p>\n                      </div>\n                    ) : (\n                      <>\n                        {/* Filter Tabs */}\n                        <div className='mb-6'>\n                          <div className='border-b border-gray-200'>\n                            <nav className='-mb-px flex space-x-8'>\n                              {[\n                                {\n                                  key: 'all',\n                                  label: safeT('modals.stockAlerts.filters.all', {}, 'All Alerts'),\n                                  count: alertCounts.all,\n                                },\n                                {\n                                  key: 'out',\n                                  label: safeT(\n                                    'modals.stockAlerts.filters.outOfStock',\n                                    {},\n                                    'Out of Stock',\n                                  ),\n                                  count: alertCounts.out,\n                                },\n                                {\n                                  key: 'critical',\n                                  label: safeT(\n                                    'modals.stockAlerts.filters.critical',\n                                    {},\n                                    'Critical',\n                                  ),\n                                  count: alertCounts.critical,\n                                },\n                                {\n                                  key: 'low',\n                                  label: safeT(\n                                    'modals.stockAlerts.filters.lowStock',\n                                    {},\n                                    'Low Stock',\n                                  ),\n                                  count: alertCounts.low,\n                                },\n                              ].map(tab => (\n                                <button\n                                  key={tab.key}\n                                  onClick={() => setFilter(tab.key)}\n                                  className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${\n                                    filter === tab.key\n                                      ? 'border-blue-500 text-blue-600'\n                                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                                  }`}\n                                >\n                                  <span className='text-nav-text'>{tab.label}</span>\n                                  {tab.count > 0 && (\n                                    <span\n                                      className={`ml-2 py-0.5 px-2 rounded-full text-xs ${\n                                        filter === tab.key\n                                          ? 'bg-blue-100 text-blue-600'\n                                          : 'bg-gray-100 text-gray-600'\n                                      }`}\n                                    >\n                                      {tab.count}\n                                    </span>\n                                  )}\n                                </button>\n                              ))}\n                            </nav>\n                          </div>\n                        </div>\n\n                        {/* Bulk Actions */}\n                        {selectedItems.length > 0 && (\n                          <div className='mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200'>\n                            <div className='flex items-center justify-between'>\n                              <span className='text-sm font-medium text-blue-900'>\n                                {safeT(\n                                  'modals.stockAlerts.bulkActions.itemsSelected',\n                                  { count: selectedItems.length },\n                                  `${selectedItems.length} items selected`,\n                                )}\n                              </span>\n                              <div className='flex space-x-2'>\n                                <button\n                                  onClick={() => handleBulkAction('reorder')}\n                                  className='px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700'\n                                >\n                                  <span className='text-button-text'>\n                                    {safeT(\n                                      'modals.stockAlerts.bulkActions.createReorder',\n                                      {},\n                                      'Create Reorder',\n                                    )}\n                                  </span>\n                                </button>\n                                <button\n                                  onClick={() => handleBulkAction('update')}\n                                  className='px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700'\n                                >\n                                  <span className='text-button-text'>\n                                    {safeT(\n                                      'modals.stockAlerts.bulkActions.updateStock',\n                                      {},\n                                      'Update Stock',\n                                    )}\n                                  </span>\n                                </button>\n                                <button\n                                  onClick={() => handleBulkAction('notify')}\n                                  className='px-3 py-1 bg-orange-600 text-white text-sm rounded-md hover:bg-orange-700'\n                                >\n                                  <span className='text-button-text'>\n                                    {safeT(\n                                      'modals.stockAlerts.bulkActions.sendNotifications',\n                                      {},\n                                      'Send Notifications',\n                                    )}\n                                  </span>\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Alerts Table */}\n                        <div className='bg-white shadow overflow-hidden sm:rounded-md'>\n                          <div className='px-4 py-3 bg-gray-50 border-b border-gray-200'>\n                            <div className='flex items-center'>\n                              <input\n                                type='checkbox'\n                                checked={\n                                  selectedItems.length === filteredAlerts.length &&\n                                  filteredAlerts.length > 0\n                                }\n                                onChange={handleSelectAll}\n                                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n                              />\n                              <label className='ml-3 text-form-label text-gray-700'>\n                                {safeT(\n                                  'modals.stockAlerts.table.selectAll',\n                                  { count: filteredAlerts.length },\n                                  `Select All (${filteredAlerts.length})`,\n                                )}\n                              </label>\n                            </div>\n                          </div>\n\n                          <ul className='divide-y divide-gray-200'>\n                            {filteredAlerts.map(item => {\n                              const AlertIcon = getAlertIcon(item.alertType);\n                              return (\n                                <li key={item.id} className='px-4 py-4 hover:bg-gray-50'>\n                                  <div className='flex items-center'>\n                                    <input\n                                      type='checkbox'\n                                      checked={selectedItems.includes(item.id)}\n                                      onChange={() => handleSelectItem(item.id)}\n                                      className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n                                    />\n                                    <div className='ml-4 flex-1'>\n                                      <div className='flex items-center justify-between'>\n                                        <div className='flex items-center'>\n                                          <div\n                                            className={`flex-shrink-0 p-2 rounded-lg border ${getAlertColor(item.alertType)}`}\n                                          >\n                                            <AlertIcon className='h-5 w-5' />\n                                          </div>\n                                          <div className='ml-4'>\n                                            <div className='text-sm font-medium text-gray-900'>\n                                              {item.name}\n                                            </div>\n                                            <div className='text-sm text-gray-500'>\n                                              SKU: {item.sku}\n                                            </div>\n                                          </div>\n                                        </div>\n\n                                        <div className='flex items-center space-x-6'>\n                                          <div className='text-center'>\n                                            <div className='text-sm font-medium text-gray-900 flex items-center'>\n                                              <ArchiveBoxIcon className='h-4 w-4 mr-1 text-gray-400' />\n                                              {item.stock}\n                                            </div>\n                                            <div className='text-xs text-gray-500'>\n                                              {safeT(\n                                                'modals.stockAlerts.table.current',\n                                                {},\n                                                'Current',\n                                              )}\n                                            </div>\n                                          </div>\n\n                                          <div className='text-center'>\n                                            <div className='text-sm font-medium text-gray-900'>\n                                              {item.minStock}\n                                            </div>\n                                            <div className='text-xs text-gray-500'>\n                                              {safeT(\n                                                'modals.stockAlerts.table.minimum',\n                                                {},\n                                                'Minimum',\n                                              )}\n                                            </div>\n                                          </div>\n\n                                          <div className='text-center'>\n                                            <div className='flex items-center'>\n                                              <TagIcon className='h-4 w-4 mr-1 text-gray-400' />\n                                              <span className='text-sm text-gray-900'>\n                                                {item.category}\n                                              </span>\n                                            </div>\n                                            <div className='text-xs text-gray-500'>\n                                              {safeT(\n                                                'modals.stockAlerts.table.category',\n                                                {},\n                                                'Category',\n                                              )}\n                                            </div>\n                                          </div>\n\n                                          <div className='text-center'>\n                                            <div className='flex items-center'>\n                                              <MapPinIcon className='h-4 w-4 mr-1 text-gray-400' />\n                                              <span className='text-sm text-gray-900'>\n                                                {item.location}\n                                              </span>\n                                            </div>\n                                            <div className='text-xs text-gray-500'>\n                                              {safeT(\n                                                'modals.stockAlerts.table.location',\n                                                {},\n                                                'Location',\n                                              )}\n                                            </div>\n                                          </div>\n\n                                          <div className='text-center'>\n                                            <div className='flex items-center'>\n                                              <ClockIcon className='h-4 w-4 mr-1 text-gray-400' />\n                                              <span className='text-sm text-gray-900'>\n                                                {item.lastUpdated}\n                                              </span>\n                                            </div>\n                                            <div className='text-xs text-gray-500'>\n                                              {safeT(\n                                                'modals.stockAlerts.table.lastUpdated',\n                                                {},\n                                                'Last Updated',\n                                              )}\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </div>\n\n                                      <div className='mt-2'>\n                                        <span\n                                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                            item.alertType === 'out'\n                                              ? 'bg-red-100 text-red-800'\n                                              : item.alertType === 'critical'\n                                                ? 'bg-orange-100 text-orange-800'\n                                                : 'bg-yellow-100 text-yellow-800'\n                                          }`}\n                                        >\n                                          {item.alertMessage}\n                                        </span>\n                                        {item.alertType === 'out' && (\n                                          <span className='ml-2 text-xs text-red-600 font-medium'>\n                                            {safeT(\n                                              'modals.stockAlerts.messages.immediateAction',\n                                              {},\n                                              'Immediate action required!',\n                                            )}\n                                          </span>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </div>\n                                </li>\n                              );\n                            })}\n                          </ul>\n                        </div>\n\n                        {filteredAlerts.length === 0 && (\n                          <div className='text-center py-8'>\n                            <CheckCircleIcon className='mx-auto h-8 w-8 text-green-400' />\n                            <p className='mt-2 text-subtitle text-gray-500'>\n                              {safeT(\n                                'modals.stockAlerts.emptyFilter',\n                                { filter: filter === 'all' ? '' : filter },\n                                `No ${filter === 'all' ? '' : filter} stock alerts in this category.`,\n                              )}\n                            </p>\n                          </div>\n                        )}\n                      </>\n                    )}\n\n                    {/* Form Actions */}\n                    <div className='flex justify-end space-x-3 pt-6'>\n                      <button\n                        type='button'\n                        onClick={onClose}\n                        className='rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                      >\n                        <span className='text-button-text'>\n                          {safeT('modals.stockAlerts.buttons.close', {}, 'Close')}\n                        </span>\n                      </button>\n                      {stockAlerts.length > 0 && (\n                        <button\n                          type='button'\n                          onClick={() => {\n                            alert(\n                              safeT(\n                                'modals.stockAlerts.messages.generatingReport',\n                                {},\n                                'Generating stock alerts report...',\n                              ),\n                            );\n                            onClose();\n                          }}\n                          className='rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                        >\n                          <span className='text-button-text'>\n                            {safeT(\n                              'modals.stockAlerts.buttons.generateReport',\n                              {},\n                              'Generate Report',\n                            )}\n                          </span>\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n};\n\nexport default StockAlertsModal;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\CustomReportBuilder.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewfinderCircleIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CogIcon' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CHART_PRESETS' is defined but never used.","line":35,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":38,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":12},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":518,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click &quot;Add Filter\" to create one.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click &ldquo;Add Filter\" to create one.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click &#34;Add Filter\" to create one.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click &rdquo;Add Filter\" to create one.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":518,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click \"Add Filter&quot; to create one.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click \"Add Filter&ldquo; to create one.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click \"Add Filter&#34; to create one.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17580,17663],"text":"\n              No filters added yet. Click \"Add Filter&rdquo; to create one.\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ArrowLeftIcon,\n  DocumentChartBarIcon,\n  ViewfinderCircleIcon,\n  DocumentArrowDownIcon,\n  PlusIcon,\n  TrashIcon,\n  ChartBarIcon,\n  TableCellsIcon,\n  EyeIcon,\n  CogIcon,\n  BookmarkIcon,\n  FunnelIcon,\n  CalendarIcon,\n  AdjustmentsHorizontalIcon,\n} from '@heroicons/react/24/outline';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { AVAILABLE_FIELDS, CHART_PRESETS } from '../../data/reportTemplates';\n\nconst CustomReportBuilder = ({ onBack, initialTemplate = null }) => {\n  const { t } = useTranslation();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [reportConfig, setReportConfig] = useState({\n    name: initialTemplate?.name || '',\n    description: initialTemplate?.description || '',\n    category: initialTemplate?.category || 'custom',\n    type: initialTemplate?.type || 'detailed',\n    format: initialTemplate?.format || 'mixed',\n\n    // Data Configuration\n    selectedFields: initialTemplate?.selectedFields || [],\n    filters: initialTemplate?.filters || [],\n    dateRange: initialTemplate?.dateRange || {\n      preset: 'this_month',\n      start: '',\n      end: '',\n    },\n    sorting: initialTemplate?.sorting || [],\n\n    // Layout Configuration\n    sections: initialTemplate?.sections || [],\n\n    // Preview Data\n    previewData: null,\n    isGenerating: false,\n  });\n\n  // Drag and drop sensors\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  // Steps configuration\n  const steps = [\n    { id: 1, name: 'Data Selection', icon: TableCellsIcon },\n    { id: 2, name: 'Filters & Sorting', icon: FunnelIcon },\n    { id: 3, name: 'Layout Design', icon: AdjustmentsHorizontalIcon },\n    { id: 4, name: 'Preview & Save', icon: EyeIcon },\n  ];\n\n  // Get all available fields from all categories\n  const allAvailableFields = Object.entries(AVAILABLE_FIELDS).reduce((acc, [category, fields]) => {\n    acc[category] = fields.map(field => ({ ...field, category }));\n    return acc;\n  }, {});\n\n  // Handle field selection\n  const handleFieldToggle = field => {\n    setReportConfig(prev => ({\n      ...prev,\n      selectedFields: prev.selectedFields.find(f => f.id === field.id)\n        ? prev.selectedFields.filter(f => f.id !== field.id)\n        : [...prev.selectedFields, field],\n    }));\n  };\n\n  // Handle drag and drop for layout sections\n  const handleDragEnd = event => {\n    const { active, over } = event;\n\n    if (active.id !== over?.id) {\n      setReportConfig(prev => {\n        const oldIndex = prev.sections.findIndex(section => section.id === active.id);\n        const newIndex = prev.sections.findIndex(section => section.id === over.id);\n\n        return {\n          ...prev,\n          sections: arrayMove(prev.sections, oldIndex, newIndex),\n        };\n      });\n    }\n  };\n\n  // Add filter\n  const addFilter = () => {\n    const newFilter = {\n      id: Date.now(),\n      field: '',\n      operator: 'equals',\n      value: '',\n      type: 'string',\n    };\n    setReportConfig(prev => ({\n      ...prev,\n      filters: [...prev.filters, newFilter],\n    }));\n  };\n\n  // Update filter\n  const updateFilter = (filterId, updates) => {\n    setReportConfig(prev => ({\n      ...prev,\n      filters: prev.filters.map(filter =>\n        filter.id === filterId ? { ...filter, ...updates } : filter,\n      ),\n    }));\n  };\n\n  // Remove filter\n  const removeFilter = filterId => {\n    setReportConfig(prev => ({\n      ...prev,\n      filters: prev.filters.filter(filter => filter.id !== filterId),\n    }));\n  };\n\n  // Add section to layout\n  const addSection = type => {\n    const newSection = {\n      id: Date.now(),\n      title: `New ${type.charAt(0).toUpperCase() + type.slice(1)} Section`,\n      type: type,\n      order: reportConfig.sections.length + 1,\n      config: getDefaultSectionConfig(type),\n    };\n\n    setReportConfig(prev => ({\n      ...prev,\n      sections: [...prev.sections, newSection],\n    }));\n  };\n\n  // Get default configuration for section type\n  const getDefaultSectionConfig = type => {\n    switch (type) {\n      case 'kpi':\n        return { metrics: [] };\n      case 'chart':\n        return {\n          chartType: 'bar',\n          xField: '',\n          yField: '',\n          title: 'Chart Title',\n        };\n      case 'table':\n        return {\n          columns: reportConfig.selectedFields.slice(0, 5).map(f => f.id),\n          sortBy: '',\n          sortDirection: 'asc',\n        };\n      default:\n        return {};\n    }\n  };\n\n  // Generate preview data\n  const generatePreview = async () => {\n    setReportConfig(prev => ({ ...prev, isGenerating: true }));\n\n    // Simulate API call\n    setTimeout(() => {\n      const mockData = generateMockData();\n      setReportConfig(prev => ({\n        ...prev,\n        previewData: mockData,\n        isGenerating: false,\n      }));\n    }, 1500);\n  };\n\n  // Generate mock data for preview\n  const generateMockData = () => {\n    // This would normally come from the reporting service\n    return {\n      rows: 25,\n      columns: reportConfig.selectedFields.length,\n      sampleData: reportConfig.selectedFields.slice(0, 5).map(field => ({\n        field: field.name,\n        sampleValue: getSampleValue(field.type),\n      })),\n    };\n  };\n\n  const getSampleValue = type => {\n    switch (type) {\n      case 'currency':\n        return 'Ôé¼1,234.56';\n      case 'percentage':\n        return '24.5%';\n      case 'date':\n        return '2024-01-15';\n      case 'number':\n        return '42';\n      case 'boolean':\n        return 'Yes';\n      default:\n        return 'Sample Value';\n    }\n  };\n\n  // Sortable Section Component\n  const SortableSection = ({ section }) => {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({\n      id: section.id,\n    });\n\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n\n    return (\n      <div\n        ref={setNodeRef}\n        style={style}\n        {...attributes}\n        {...listeners}\n        className='bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-move'\n      >\n        <div className='flex items-center justify-between mb-3'>\n          <h4 className='font-medium text-gray-900'>{section.title}</h4>\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium ${\n              section.type === 'kpi'\n                ? 'bg-purple-100 text-purple-800'\n                : section.type === 'chart'\n                  ? 'bg-green-100 text-green-800'\n                  : 'bg-blue-100 text-blue-800'\n            }`}\n          >\n            {section.type.toUpperCase()}\n          </span>\n        </div>\n\n        <div className='text-sm text-gray-600'>\n          Section configuration options would go here based on type.\n        </div>\n      </div>\n    );\n  };\n\n  // Render step content\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return renderDataSelection();\n      case 2:\n        return renderFiltersAndSorting();\n      case 3:\n        return renderLayoutDesign();\n      case 4:\n        return renderPreviewAndSave();\n      default:\n        return null;\n    }\n  };\n\n  // Step 1: Data Selection\n  const renderDataSelection = () => (\n    <div className='grid grid-cols-1 lg:grid-cols-3 gap-8'>\n      {/* Available Fields */}\n      <div className='lg:col-span-2'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Available Fields</h3>\n        <div className='space-y-6'>\n          {Object.entries(allAvailableFields).map(([category, fields]) => (\n            <div key={category} className='bg-gray-50 rounded-lg p-4'>\n              <h4 className='font-medium text-gray-700 mb-3 capitalize'>\n                {category} Fields ({fields.length})\n              </h4>\n              <div className='grid grid-cols-1 md:grid-cols-2 gap-2'>\n                {fields.map(field => (\n                  <label\n                    key={field.id}\n                    className='flex items-center space-x-3 p-2 hover:bg-white rounded cursor-pointer transition-colors'\n                  >\n                    <input\n                      type='checkbox'\n                      className='rounded border-gray-300 text-blue-600 focus:ring-blue-500'\n                      checked={reportConfig.selectedFields.some(f => f.id === field.id)}\n                      onChange={() => handleFieldToggle(field)}\n                    />\n                    <div className='flex-1 min-w-0'>\n                      <div className='text-sm font-medium text-gray-900'>{field.name}</div>\n                      <div className='text-xs text-gray-500'>\n                        {field.type} {field.aggregatable && 'ÔÇó Aggregatable'}\n                      </div>\n                    </div>\n                  </label>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Selected Fields */}\n      <div className='lg:col-span-1'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>\n          Selected Fields ({reportConfig.selectedFields.length})\n        </h3>\n        <div className='bg-blue-50 rounded-lg p-4 border border-blue-200'>\n          {reportConfig.selectedFields.length > 0 ? (\n            <div className='space-y-2'>\n              {reportConfig.selectedFields.map(field => (\n                <div\n                  key={field.id}\n                  className='flex items-center justify-between bg-white p-2 rounded'\n                >\n                  <div>\n                    <div className='text-sm font-medium text-gray-900'>{field.name}</div>\n                    <div className='text-xs text-gray-500'>{field.type}</div>\n                  </div>\n                  <button\n                    onClick={() => handleFieldToggle(field)}\n                    className='text-red-500 hover:text-red-700'\n                  >\n                    <TrashIcon className='h-4 w-4' />\n                  </button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className='text-blue-600 text-sm'>\n              No fields selected yet. Choose from the left panel.\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  // Step 2: Filters and Sorting\n  const renderFiltersAndSorting = () => (\n    <div className='space-y-8'>\n      {/* Basic Info */}\n      <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n        <div>\n          <label className='block text-sm font-medium text-gray-700 mb-2'>Report Name</label>\n          <input\n            type='text'\n            value={reportConfig.name}\n            onChange={e => setReportConfig(prev => ({ ...prev, name: e.target.value }))}\n            className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            placeholder='Enter report name...'\n          />\n        </div>\n        <div>\n          <label className='block text-sm font-medium text-gray-700 mb-2'>Category</label>\n          <select\n            value={reportConfig.category}\n            onChange={e => setReportConfig(prev => ({ ...prev, category: e.target.value }))}\n            className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n          >\n            <option value='custom'>Custom</option>\n            <option value='financial'>Financial</option>\n            <option value='client'>Client</option>\n            <option value='tax'>Tax & Compliance</option>\n            <option value='operational'>Operational</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Date Range */}\n      <div>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Date Range</h3>\n        <div className='bg-gray-50 rounded-lg p-4'>\n          <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>Preset</label>\n              <select\n                value={reportConfig.dateRange.preset}\n                onChange={e =>\n                  setReportConfig(prev => ({\n                    ...prev,\n                    dateRange: { ...prev.dateRange, preset: e.target.value },\n                  }))\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              >\n                <option value='today'>Today</option>\n                <option value='yesterday'>Yesterday</option>\n                <option value='this_week'>This Week</option>\n                <option value='last_week'>Last Week</option>\n                <option value='this_month'>This Month</option>\n                <option value='last_month'>Last Month</option>\n                <option value='this_quarter'>This Quarter</option>\n                <option value='this_year'>This Year</option>\n                <option value='custom'>Custom Range</option>\n              </select>\n            </div>\n            {reportConfig.dateRange.preset === 'custom' && (\n              <>\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-2'>Start Date</label>\n                  <input\n                    type='date'\n                    value={reportConfig.dateRange.start}\n                    onChange={e =>\n                      setReportConfig(prev => ({\n                        ...prev,\n                        dateRange: { ...prev.dateRange, start: e.target.value },\n                      }))\n                    }\n                    className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  />\n                </div>\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-2'>End Date</label>\n                  <input\n                    type='date'\n                    value={reportConfig.dateRange.end}\n                    onChange={e =>\n                      setReportConfig(prev => ({\n                        ...prev,\n                        dateRange: { ...prev.dateRange, end: e.target.value },\n                      }))\n                    }\n                    className='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div>\n        <div className='flex items-center justify-between mb-4'>\n          <h3 className='text-lg font-semibold text-gray-900'>Filters</h3>\n          <button\n            onClick={addFilter}\n            className='flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n          >\n            <PlusIcon className='h-4 w-4 mr-2' />\n            Add Filter\n          </button>\n        </div>\n\n        <div className='space-y-3'>\n          {reportConfig.filters.map(filter => (\n            <div key={filter.id} className='bg-gray-50 rounded-lg p-4 flex items-center gap-4'>\n              <select\n                value={filter.field}\n                onChange={e => updateFilter(filter.id, { field: e.target.value })}\n                className='flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              >\n                <option value=''>Select Field</option>\n                {reportConfig.selectedFields.map(field => (\n                  <option key={field.id} value={field.id}>\n                    {field.name}\n                  </option>\n                ))}\n              </select>\n\n              <select\n                value={filter.operator}\n                onChange={e => updateFilter(filter.id, { operator: e.target.value })}\n                className='px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              >\n                <option value='equals'>Equals</option>\n                <option value='not_equals'>Not Equals</option>\n                <option value='contains'>Contains</option>\n                <option value='greater_than'>Greater Than</option>\n                <option value='less_than'>Less Than</option>\n                <option value='between'>Between</option>\n              </select>\n\n              <input\n                type='text'\n                value={filter.value}\n                onChange={e => updateFilter(filter.id, { value: e.target.value })}\n                placeholder='Filter value...'\n                className='flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              />\n\n              <button\n                onClick={() => removeFilter(filter.id)}\n                className='p-2 text-red-500 hover:text-red-700 transition-colors'\n              >\n                <TrashIcon className='h-4 w-4' />\n              </button>\n            </div>\n          ))}\n\n          {reportConfig.filters.length === 0 && (\n            <div className='text-center py-8 text-gray-500'>\n              No filters added yet. Click \"Add Filter\" to create one.\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  // Step 3: Layout Design\n  const renderLayoutDesign = () => (\n    <div className='space-y-8'>\n      <div className='flex items-center justify-between'>\n        <h3 className='text-lg font-semibold text-gray-900'>Report Layout</h3>\n        <div className='flex gap-2'>\n          <button\n            onClick={() => addSection('kpi')}\n            className='flex items-center px-3 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors'\n          >\n            <PlusIcon className='h-4 w-4 mr-2' />\n            Add KPI Section\n          </button>\n          <button\n            onClick={() => addSection('chart')}\n            className='flex items-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors'\n          >\n            <ChartBarIcon className='h-4 w-4 mr-2' />\n            Add Chart\n          </button>\n          <button\n            onClick={() => addSection('table')}\n            className='flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n          >\n            <TableCellsIcon className='h-4 w-4 mr-2' />\n            Add Table\n          </button>\n        </div>\n      </div>\n\n      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext\n          items={reportConfig.sections.map(section => section.id)}\n          strategy={verticalListSortingStrategy}\n        >\n          <div className='space-y-4'>\n            {reportConfig.sections.map(section => (\n              <SortableSection key={section.id} section={section} />\n            ))}\n\n            {reportConfig.sections.length === 0 && (\n              <div className='text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300'>\n                <AdjustmentsHorizontalIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n                <h4 className='text-lg font-medium text-gray-900 mb-2'>No sections added yet</h4>\n                <p className='text-gray-600 mb-4'>\n                  Add KPI, chart, or table sections to build your report layout.\n                </p>\n              </div>\n            )}\n          </div>\n        </SortableContext>\n      </DndContext>\n    </div>\n  );\n\n  // Step 4: Preview and Save\n  const renderPreviewAndSave = () => (\n    <div className='space-y-8'>\n      <div className='text-center'>\n        <h3 className='text-lg font-semibold text-gray-900 mb-4'>Report Preview</h3>\n\n        {!reportConfig.previewData ? (\n          <div className='bg-gray-50 rounded-lg p-8'>\n            <DocumentChartBarIcon className='h-16 w-16 text-gray-400 mx-auto mb-4' />\n            <h4 className='text-lg font-medium text-gray-900 mb-2'>Ready to Preview</h4>\n            <p className='text-gray-600 mb-6'>\n              Generate a preview of your report with the current configuration.\n            </p>\n            <button\n              onClick={generatePreview}\n              disabled={reportConfig.isGenerating}\n              className='bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50'\n            >\n              {reportConfig.isGenerating ? 'Generating Preview...' : 'Generate Preview'}\n            </button>\n          </div>\n        ) : (\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <h4 className='font-medium text-gray-900 mb-4'>Preview Results</h4>\n            <div className='grid grid-cols-1 md:grid-cols-3 gap-6 mb-6'>\n              <div className='text-center p-4 bg-blue-50 rounded-lg'>\n                <div className='text-2xl font-bold text-blue-600'>\n                  {reportConfig.previewData.rows}\n                </div>\n                <div className='text-sm text-blue-800'>Total Rows</div>\n              </div>\n              <div className='text-center p-4 bg-green-50 rounded-lg'>\n                <div className='text-2xl font-bold text-green-600'>\n                  {reportConfig.previewData.columns}\n                </div>\n                <div className='text-sm text-green-800'>Columns</div>\n              </div>\n              <div className='text-center p-4 bg-purple-50 rounded-lg'>\n                <div className='text-2xl font-bold text-purple-600'>\n                  {reportConfig.sections.length}\n                </div>\n                <div className='text-sm text-purple-800'>Sections</div>\n              </div>\n            </div>\n\n            <div className='text-left'>\n              <h5 className='font-medium text-gray-900 mb-2'>Sample Data Preview:</h5>\n              <div className='bg-gray-50 rounded p-3 text-sm space-y-1'>\n                {reportConfig.previewData.sampleData.map((item, index) => (\n                  <div key={index} className='flex justify-between'>\n                    <span className='font-medium text-gray-700'>{item.field}:</span>\n                    <span className='text-gray-600'>{item.sampleValue}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Save Options */}\n      <div className='bg-gray-50 rounded-lg p-6'>\n        <h4 className='font-medium text-gray-900 mb-4'>Save Options</h4>\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n          <button className='flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors'>\n            <BookmarkIcon className='h-5 w-5 mr-2' />\n            Save as Template\n          </button>\n          <button className='flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'>\n            <DocumentArrowDownIcon className='h-5 w-5 mr-2' />\n            Generate & Export\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      {/* Header */}\n      <button\n        onClick={onBack}\n        className='flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 mb-6 transition-colors'\n      >\n        <ArrowLeftIcon className='h-4 w-4 mr-2' />\n        Back to Reports Dashboard\n      </button>\n\n      <div className='mb-8'>\n        <h2 className='text-2xl font-semibold text-gray-800'>Custom Report Builder</h2>\n        <p className='mt-1 text-gray-600'>\n          Create a custom report by selecting data fields, applying filters, and designing the\n          layout.\n        </p>\n      </div>\n\n      {/* Step Navigation */}\n      <div className='mb-8'>\n        <nav className='flex space-x-8'>\n          {steps.map(step => {\n            const Icon = step.icon;\n            return (\n              <button\n                key={step.id}\n                onClick={() => setCurrentStep(step.id)}\n                className={`flex items-center space-x-2 px-3 py-2 rounded-lg transition-colors ${\n                  currentStep === step.id\n                    ? 'bg-blue-100 text-blue-800 font-medium'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                }`}\n              >\n                <Icon\n                  className={`h-5 w-5 ${currentStep === step.id ? 'text-blue-600' : 'text-gray-400'}`}\n                />\n                <span>{step.name}</span>\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Step Content */}\n      <div className='mb-8'>{renderStepContent()}</div>\n\n      {/* Navigation Buttons */}\n      <div className='flex justify-between pt-6 border-t border-gray-200'>\n        <button\n          onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n          disabled={currentStep === 1}\n          className='flex items-center px-4 py-2 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n        >\n          <ArrowLeftIcon className='h-4 w-4 mr-2' />\n          Previous\n        </button>\n\n        <div className='flex space-x-3'>\n          <span className='text-sm text-gray-500 self-center'>\n            Step {currentStep} of {steps.length}\n          </span>\n        </div>\n\n        <button\n          onClick={() => setCurrentStep(Math.min(steps.length, currentStep + 1))}\n          disabled={currentStep === steps.length}\n          className='flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'\n        >\n          Next\n          <ArrowLeftIcon className='h-4 w-4 ml-2 rotate-180' />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomReportBuilder;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\DateRangeFilter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\FinancialOverview.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportErrorBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportHeader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportLoadingSpinner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":6,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArrowLeftIcon } from '@heroicons/react/24/outline';\n\nconst ReportSettings = ({ onBack }) => {\n  const { t } = useTranslation();\n  const [settings, setSettings] = useState({\n    defaultExportFormat: 'pdf',\n    emailNotifications: true,\n    dataRetentionDays: 90,\n  });\n\n  const handleSettingChange = e => {\n    const { name, value, type, checked } = e.target;\n    setSettings(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));\n  };\n\n  return (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <button\n        onClick={onBack}\n        className='flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 mb-6'\n      >\n        <ArrowLeftIcon className='h-4 w-4 mr-2' />\n        Back to Reports Dashboard\n      </button>\n\n      <div className='mb-6'>\n        <h2 className='text-2xl font-semibold text-gray-800'>Report Settings</h2>\n        <p className='mt-1 text-gray-600'>Configure your default reporting options.</p>\n      </div>\n\n      <div className='space-y-6 max-w-lg'>\n        {/* Default Export Format */}\n        <div>\n          <label htmlFor='defaultExportFormat' className='block text-sm font-medium text-gray-700'>\n            Default Export Format\n          </label>\n          <select\n            id='defaultExportFormat'\n            name='defaultExportFormat'\n            value={settings.defaultExportFormat}\n            onChange={handleSettingChange}\n            className='mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md'\n          >\n            <option value='pdf'>PDF</option>\n            <option value='csv'>CSV</option>\n            <option value='xlsx'>Excel (XLSX)</option>\n          </select>\n        </div>\n\n        {/* Email Notifications */}\n        <div className='flex items-center justify-between'>\n          <span className='flex-grow flex flex-col'>\n            <span className='text-sm font-medium text-gray-900'>Email Notifications</span>\n            <span className='text-sm text-gray-500'>\n              Receive an email when a scheduled report is ready.\n            </span>\n          </span>\n          <label\n            htmlFor='emailNotifications'\n            className='inline-flex relative items-center cursor-pointer'\n          >\n            <input\n              type='checkbox'\n              id='emailNotifications'\n              name='emailNotifications'\n              className='sr-only peer'\n              checked={settings.emailNotifications}\n              onChange={handleSettingChange}\n            />\n            <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n          </label>\n        </div>\n\n        {/* Data Retention Policy */}\n        <div>\n          <label htmlFor='dataRetentionDays' className='block text-sm font-medium text-gray-700'>\n            Report Data Retention (in days)\n          </label>\n          <input\n            type='number'\n            id='dataRetentionDays'\n            name='dataRetentionDays'\n            value={settings.dataRetentionDays}\n            onChange={handleSettingChange}\n            className='mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm'\n            min='30'\n          />\n        </div>\n\n        <div className='pt-4'>\n          <button className='bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700'>\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportSettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportTemplateBrowser.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HeartIconSolid' is defined but never used.","line":15,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":23,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ArrowLeftIcon,\n  ChartBarIcon,\n  UsersIcon,\n  DocumentTextIcon,\n  HeartIcon,\n  CreditCardIcon,\n  MagnifyingGlassIcon,\n  FunnelIcon,\n  StarIcon,\n  PlayIcon,\n} from '@heroicons/react/24/outline';\nimport { StarIcon as StarIconSolid, HeartIcon as HeartIconSolid } from '@heroicons/react/24/solid';\nimport {\n  CORE_REPORT_TEMPLATES,\n  getTemplatesByCategory,\n  getAvailableCategories,\n} from '../../data/reportTemplates';\n\nconst ReportTemplateBrowser = ({ onBack, onSelectTemplate, onCreateCustom }) => {\n  const { t } = useTranslation();\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [favoriteTemplates, setFavoriteTemplates] = useState([]);\n  const [showFilters, setShowFilters] = useState(false);\n\n  // Icon mapping for templates\n  const iconMap = {\n    ChartBarIcon: ChartBarIcon,\n    UsersIcon: UsersIcon,\n    DocumentTextIcon: DocumentTextIcon,\n    HeartIcon: HeartIcon,\n    CreditCardIcon: CreditCardIcon,\n  };\n\n  // Color classes for template cards\n  const colorClasses = {\n    blue: 'border-blue-200 bg-blue-50 text-blue-800',\n    green: 'border-green-200 bg-green-50 text-green-800',\n    red: 'border-red-200 bg-red-50 text-red-800',\n    purple: 'border-purple-200 bg-purple-50 text-purple-800',\n    orange: 'border-orange-200 bg-orange-50 text-orange-800',\n  };\n\n  // Filter templates based on category and search\n  const filteredTemplates = CORE_REPORT_TEMPLATES.filter(template => {\n    const matchesCategory = selectedCategory === 'all' || template.category === selectedCategory;\n    const matchesSearch =\n      searchTerm === '' ||\n      template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    return matchesCategory && matchesSearch;\n  });\n\n  // Handle favorite toggle\n  const toggleFavorite = templateId => {\n    setFavoriteTemplates(prev =>\n      prev.includes(templateId) ? prev.filter(id => id !== templateId) : [...prev, templateId],\n    );\n  };\n\n  // Category stats\n  const categories = getAvailableCategories();\n  const categoryStats = categories.reduce((acc, category) => {\n    acc[category] = getTemplatesByCategory(category).length;\n    return acc;\n  }, {});\n\n  const getCategoryIcon = category => {\n    const icons = {\n      financial: ChartBarIcon,\n      client: UsersIcon,\n      tax: DocumentTextIcon,\n      operational: HeartIcon,\n    };\n    return icons[category] || ChartBarIcon;\n  };\n\n  return (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      {/* Header with back button */}\n      <button\n        onClick={onBack}\n        className='flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 mb-6 transition-colors'\n      >\n        <ArrowLeftIcon className='h-4 w-4 mr-2' />\n        Back to Reports Dashboard\n      </button>\n\n      {/* Title and Description */}\n      <div className='mb-6'>\n        <h2 className='text-2xl font-semibold text-gray-800'>Report Templates</h2>\n        <p className='mt-1 text-gray-600'>\n          Choose from pre-built report templates or create your own custom report.\n        </p>\n      </div>\n\n      {/* Search and Filter Bar */}\n      <div className='flex flex-col md:flex-row gap-4 mb-6'>\n        {/* Search Input */}\n        <div className='relative flex-1'>\n          <MagnifyingGlassIcon className='absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400' />\n          <input\n            type='text'\n            placeholder='Search templates by name, description, or tags...'\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            className='w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n          />\n        </div>\n\n        {/* Filter Toggle */}\n        <button\n          onClick={() => setShowFilters(!showFilters)}\n          className={`flex items-center px-4 py-2 border rounded-lg transition-colors ${\n            showFilters\n              ? 'bg-blue-50 border-blue-300 text-blue-700'\n              : 'border-gray-300 text-gray-700 hover:bg-gray-50'\n          }`}\n        >\n          <FunnelIcon className='h-5 w-5 mr-2' />\n          Filters\n        </button>\n\n        {/* Create Custom Button */}\n        <button\n          onClick={onCreateCustom}\n          className='bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors font-medium'\n        >\n          Create Custom Report\n        </button>\n      </div>\n\n      {/* Filter Panel */}\n      {showFilters && (\n        <div className='bg-gray-50 rounded-lg p-4 mb-6'>\n          <h3 className='text-sm font-medium text-gray-700 mb-3'>Filter by Category</h3>\n          <div className='flex flex-wrap gap-2'>\n            <button\n              onClick={() => setSelectedCategory('all')}\n              className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                selectedCategory === 'all'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-white text-gray-600 hover:bg-gray-100 border border-gray-300'\n              }`}\n            >\n              All ({CORE_REPORT_TEMPLATES.length})\n            </button>\n            {categories.map(category => {\n              const Icon = getCategoryIcon(category);\n              return (\n                <button\n                  key={category}\n                  onClick={() => setSelectedCategory(category)}\n                  className={`flex items-center px-3 py-1 rounded-full text-sm transition-colors ${\n                    selectedCategory === category\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-white text-gray-600 hover:bg-gray-100 border border-gray-300'\n                  }`}\n                >\n                  <Icon className='h-4 w-4 mr-1' />\n                  {category.charAt(0).toUpperCase() + category.slice(1)} ({categoryStats[category]})\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Results Summary */}\n      <div className='mb-4'>\n        <p className='text-sm text-gray-600'>\n          {filteredTemplates.length} template{filteredTemplates.length !== 1 ? 's' : ''} found\n          {selectedCategory !== 'all' && ` in ${selectedCategory}`}\n          {searchTerm && ` matching \"${searchTerm}\"`}\n        </p>\n      </div>\n\n      {/* Template Grid */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n        {filteredTemplates.map(template => {\n          const Icon = iconMap[template.icon] || ChartBarIcon;\n          const isFavorite = favoriteTemplates.includes(template.id);\n\n          return (\n            <div\n              key={template.id}\n              className='bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-all duration-300 group relative'\n            >\n              {/* Favorite Button */}\n              <button\n                onClick={e => {\n                  e.stopPropagation();\n                  toggleFavorite(template.id);\n                }}\n                className='absolute top-4 right-4 p-1 text-gray-400 hover:text-yellow-500 transition-colors'\n              >\n                {isFavorite ? (\n                  <StarIconSolid className='h-5 w-5 text-yellow-500' />\n                ) : (\n                  <StarIcon className='h-5 w-5' />\n                )}\n              </button>\n\n              {/* Template Icon */}\n              <div className={`inline-flex p-3 rounded-lg mb-4 ${colorClasses[template.color]}`}>\n                <Icon className='h-8 w-8' />\n              </div>\n\n              {/* Template Info */}\n              <h3 className='text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors'>\n                {template.name}\n              </h3>\n\n              <p className='text-sm text-gray-600 mb-4 line-clamp-3'>{template.description}</p>\n\n              {/* Tags */}\n              <div className='flex flex-wrap gap-1 mb-4'>\n                {template.tags.slice(0, 3).map(tag => (\n                  <span\n                    key={tag}\n                    className='px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full'\n                  >\n                    {tag}\n                  </span>\n                ))}\n                {template.tags.length > 3 && (\n                  <span className='px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full'>\n                    +{template.tags.length - 3}\n                  </span>\n                )}\n              </div>\n\n              {/* Category Badge */}\n              <div className='flex items-center justify-between'>\n                <span\n                  className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                    template.category === 'financial'\n                      ? 'bg-blue-100 text-blue-800'\n                      : template.category === 'client'\n                        ? 'bg-green-100 text-green-800'\n                        : template.category === 'tax'\n                          ? 'bg-red-100 text-red-800'\n                          : template.category === 'operational'\n                            ? 'bg-purple-100 text-purple-800'\n                            : 'bg-gray-100 text-gray-800'\n                  }`}\n                >\n                  {template.category}\n                </span>\n\n                {/* Use Template Button */}\n                <button\n                  onClick={() => onSelectTemplate(template)}\n                  className='flex items-center px-3 py-1.5 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors opacity-0 group-hover:opacity-100'\n                >\n                  <PlayIcon className='h-4 w-4 mr-1' />\n                  Use Template\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Empty State */}\n      {filteredTemplates.length === 0 && (\n        <div className='text-center py-12'>\n          <MagnifyingGlassIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n          <h3 className='text-lg font-medium text-gray-900 mb-2'>No templates found</h3>\n          <p className='text-gray-600 mb-4'>\n            {searchTerm\n              ? `No templates match your search \"${searchTerm}\"`\n              : `No templates available in the ${selectedCategory} category`}\n          </p>\n          <div className='space-y-2'>\n            <button\n              onClick={() => {\n                setSearchTerm('');\n                setSelectedCategory('all');\n              }}\n              className='text-blue-600 hover:text-blue-800 font-medium'\n            >\n              Clear filters\n            </button>\n            <div className='text-gray-400'>or</div>\n            <button\n              onClick={onCreateCustom}\n              className='bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors'\n            >\n              Create your own custom report\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Quick Stats Footer */}\n      {filteredTemplates.length > 0 && (\n        <div className='mt-8 pt-6 border-t border-gray-200'>\n          <div className='flex flex-wrap justify-center gap-8 text-sm text-gray-600'>\n            <div className='text-center'>\n              <div className='text-lg font-semibold text-gray-900'>\n                {CORE_REPORT_TEMPLATES.length}\n              </div>\n              <div>Total Templates</div>\n            </div>\n            <div className='text-center'>\n              <div className='text-lg font-semibold text-gray-900'>{categories.length}</div>\n              <div>Categories</div>\n            </div>\n            <div className='text-center'>\n              <div className='text-lg font-semibold text-gray-900'>{favoriteTemplates.length}</div>\n              <div>Favorites</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReportTemplateBrowser;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportViewer.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'report' is defined but never used.","line":5,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":6,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArrowLeftIcon, PrinterIcon, DocumentArrowDownIcon } from '@heroicons/react/24/outline';\n\nconst ReportViewer = ({ report, onBack }) => {\n  const { t } = useTranslation();\n\n  // Dummy report data\n  const reportData = {\n    title: 'Quarterly Financial Summary',\n    columns: ['Month', 'Revenue', 'Expenses', 'Profit'],\n    rows: [\n      ['January', 'Ôé¼10,000', 'Ôé¼3,000', 'Ôé¼7,000'],\n      ['February', 'Ôé¼12,500', 'Ôé¼3,500', 'Ôé¼9,000'],\n      ['March', 'Ôé¼15,000', 'Ôé¼4,000', 'Ôé¼11,000'],\n    ],\n  };\n\n  return (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <button\n        onClick={onBack}\n        className='flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 mb-6'\n      >\n        <ArrowLeftIcon className='h-4 w-4 mr-2' />\n        Back to Reports\n      </button>\n\n      {/* Report Header and Actions */}\n      <div className='flex justify-between items-center mb-6'>\n        <h2 className='text-2xl font-semibold text-gray-800'>{reportData.title}</h2>\n        <div className='flex items-center space-x-3'>\n          <button className='p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full transition-colors'>\n            <PrinterIcon className='h-6 w-6' />\n          </button>\n          <button className='p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full transition-colors'>\n            <DocumentArrowDownIcon className='h-6 w-6' />\n          </button>\n        </div>\n      </div>\n\n      {/* Report Content Table */}\n      <div className='overflow-x-auto'>\n        <table className='min-w-full divide-y divide-gray-200'>\n          <thead className='bg-gray-50'>\n            <tr>\n              {reportData.columns.map(col => (\n                <th\n                  key={col}\n                  scope='col'\n                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'\n                >\n                  {col}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className='bg-white divide-y divide-gray-200'>\n            {reportData.rows.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {row.map((cell, cellIndex) => (\n                  <td key={cellIndex} className='px-6 py-4 whitespace-nowrap text-sm text-gray-700'>\n                    {cell}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportViewer;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ReportsDashboard.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":17,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  DocumentTextIcon,\n  PlusCircleIcon,\n  ClockIcon,\n  CogIcon,\n  RectangleStackIcon,\n} from '@heroicons/react/24/outline';\nimport CustomReportBuilder from './CustomReportBuilder';\nimport ReportViewer from './ReportViewer';\nimport ScheduledReports from './ScheduledReports';\nimport ReportSettings from './ReportSettings';\nimport ReportTemplateBrowser from './ReportTemplateBrowser';\n\nconst ReportsDashboard = () => {\n  const { t } = useTranslation();\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n\n  // Handle template selection from browser\n  const handleSelectTemplate = template => {\n    setSelectedTemplate(template);\n    setCurrentView('customReportBuilder');\n  };\n\n  // Handle create custom report\n  const handleCreateCustom = () => {\n    setSelectedTemplate(null);\n    setCurrentView('customReportBuilder');\n  };\n\n  const renderDashboard = () => (\n    <div className='space-y-8'>\n      <div>\n        <h2 className='text-2xl font-semibold text-gray-800'>Reports & Insights</h2>\n        <p className='mt-2 text-gray-600'>\n          Manage, create, and schedule your business reports with professional templates.\n        </p>\n      </div>\n\n      {/* Quick Stats Row */}\n      <div className='grid grid-cols-1 md:grid-cols-4 gap-4 mb-6'>\n        <div className='bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-4 text-white'>\n          <div className='text-2xl font-bold'>5</div>\n          <div className='text-blue-100 text-sm'>Core Templates</div>\n        </div>\n        <div className='bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-4 text-white'>\n          <div className='text-2xl font-bold'>12</div>\n          <div className='text-green-100 text-sm'>Saved Reports</div>\n        </div>\n        <div className='bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-4 text-white'>\n          <div className='text-2xl font-bold'>3</div>\n          <div className='text-purple-100 text-sm'>Scheduled Reports</div>\n        </div>\n        <div className='bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg p-4 text-white'>\n          <div className='text-2xl font-bold'>248</div>\n          <div className='text-orange-100 text-sm'>Reports Generated</div>\n        </div>\n      </div>\n\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6'>\n        {/* Card for Template Browser */}\n        <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 flex flex-col items-center text-center hover:shadow-lg transition-shadow duration-300'>\n          <div className='p-3 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mb-4'>\n            <RectangleStackIcon className='h-8 w-8 text-white' />\n          </div>\n          <h3 className='text-lg font-semibold text-gray-900'>Report Templates</h3>\n          <p className='text-sm text-gray-500 mt-1 mb-4'>\n            Browse and use professional report templates.\n          </p>\n          <button\n            onClick={() => setCurrentView('templateBrowser')}\n            className='mt-auto bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-2 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 font-medium'\n          >\n            Browse Templates\n          </button>\n        </div>\n\n        {/* Card for Viewing Reports */}\n        <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 flex flex-col items-center text-center hover:shadow-lg transition-shadow duration-300'>\n          <div className='p-3 bg-blue-100 rounded-full mb-4'>\n            <DocumentTextIcon className='h-8 w-8 text-blue-600' />\n          </div>\n          <h3 className='text-lg font-semibold text-gray-900'>View Reports</h3>\n          <p className='text-sm text-gray-500 mt-1 mb-4'>\n            Access your saved and generated reports.\n          </p>\n          <button\n            onClick={() => setCurrentView('reportViewer')}\n            className='mt-auto bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors font-medium'\n          >\n            Go to Reports\n          </button>\n        </div>\n\n        {/* Card for Custom Report Builder */}\n        <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 flex flex-col items-center text-center hover:shadow-lg transition-shadow duration-300'>\n          <div className='p-3 bg-green-100 rounded-full mb-4'>\n            <PlusCircleIcon className='h-8 w-8 text-green-600' />\n          </div>\n          <h3 className='text-lg font-semibold text-gray-900'>Custom Builder</h3>\n          <p className='text-sm text-gray-500 mt-1 mb-4'>\n            Build a completely custom report from scratch.\n          </p>\n          <button\n            onClick={handleCreateCustom}\n            className='mt-auto bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors font-medium'\n          >\n            Open Builder\n          </button>\n        </div>\n\n        {/* Card for Scheduled Reports */}\n        <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 flex flex-col items-center text-center hover:shadow-lg transition-shadow duration-300'>\n          <div className='p-3 bg-yellow-100 rounded-full mb-4'>\n            <ClockIcon className='h-8 w-8 text-yellow-600' />\n          </div>\n          <h3 className='text-lg font-semibold text-gray-900'>Scheduled Reports</h3>\n          <p className='text-sm text-gray-500 mt-1 mb-4'>Manage automated report schedules.</p>\n          <button\n            onClick={() => setCurrentView('scheduledReports')}\n            className='mt-auto bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition-colors font-medium'\n          >\n            View Schedules\n          </button>\n        </div>\n\n        {/* Card for Report Settings */}\n        <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6 flex flex-col items-center text-center hover:shadow-lg transition-shadow duration-300'>\n          <div className='p-3 bg-gray-100 rounded-full mb-4'>\n            <CogIcon className='h-8 w-8 text-gray-600' />\n          </div>\n          <h3 className='text-lg font-semibold text-gray-900'>Settings</h3>\n          <p className='text-sm text-gray-500 mt-1 mb-4'>\n            Configure reporting options and preferences.\n          </p>\n          <button\n            onClick={() => setCurrentView('reportSettings')}\n            className='mt-auto bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors font-medium'\n          >\n            Configure\n          </button>\n        </div>\n      </div>\n\n      {/* Featured Templates Section */}\n      <div className='bg-gradient-to-r from-gray-50 to-blue-50 rounded-xl p-6 border border-gray-200'>\n        <div className='flex items-center justify-between mb-4'>\n          <div>\n            <h3 className='text-lg font-semibold text-gray-900'>Featured Templates</h3>\n            <p className='text-sm text-gray-600'>Popular report templates ready to use</p>\n          </div>\n          <button\n            onClick={() => setCurrentView('templateBrowser')}\n            className='text-blue-600 hover:text-blue-800 font-medium text-sm'\n          >\n            View All Templates ÔåÆ\n          </button>\n        </div>\n\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n          <div className='bg-white rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow'>\n            <div className='flex items-center mb-2'>\n              <div className='p-2 bg-blue-100 rounded-lg mr-3'>\n                <DocumentTextIcon className='h-5 w-5 text-blue-600' />\n              </div>\n              <div>\n                <h4 className='font-medium text-gray-900'>Monthly Financial Summary</h4>\n                <p className='text-xs text-gray-500'>Revenue, expenses & profit overview</p>\n              </div>\n            </div>\n            <div className='flex items-center justify-between'>\n              <span className='text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full'>\n                Financial\n              </span>\n              <button\n                onClick={() => setCurrentView('templateBrowser')}\n                className='text-blue-600 hover:text-blue-800 text-xs font-medium'\n              >\n                Use Template\n              </button>\n            </div>\n          </div>\n\n          <div className='bg-white rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow'>\n            <div className='flex items-center mb-2'>\n              <div className='p-2 bg-green-100 rounded-lg mr-3'>\n                <DocumentTextIcon className='h-5 w-5 text-green-600' />\n              </div>\n              <div>\n                <h4 className='font-medium text-gray-900'>Client Portfolio Analysis</h4>\n                <p className='text-xs text-gray-500'>Client revenue & project insights</p>\n              </div>\n            </div>\n            <div className='flex items-center justify-between'>\n              <span className='text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full'>\n                Client\n              </span>\n              <button\n                onClick={() => setCurrentView('templateBrowser')}\n                className='text-green-600 hover:text-green-800 text-xs font-medium'\n              >\n                Use Template\n              </button>\n            </div>\n          </div>\n\n          <div className='bg-white rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow'>\n            <div className='flex items-center mb-2'>\n              <div className='p-2 bg-red-100 rounded-lg mr-3'>\n                <DocumentTextIcon className='h-5 w-5 text-red-600' />\n              </div>\n              <div>\n                <h4 className='font-medium text-gray-900'>IVA Compliance Report</h4>\n                <p className='text-xs text-gray-500'>Italian tax compliance & deductions</p>\n              </div>\n            </div>\n            <div className='flex items-center justify-between'>\n              <span className='text-xs bg-red-100 text-red-800 px-2 py-1 rounded-full'>Tax</span>\n              <button\n                onClick={() => setCurrentView('templateBrowser')}\n                className='text-red-600 hover:text-red-800 text-xs font-medium'\n              >\n                Use Template\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      {currentView === 'dashboard' && renderDashboard()}\n      {currentView === 'templateBrowser' && (\n        <ReportTemplateBrowser\n          onBack={() => setCurrentView('dashboard')}\n          onSelectTemplate={handleSelectTemplate}\n          onCreateCustom={handleCreateCustom}\n        />\n      )}\n      {currentView === 'customReportBuilder' && (\n        <CustomReportBuilder\n          onBack={() => setCurrentView('dashboard')}\n          initialTemplate={selectedTemplate}\n        />\n      )}\n      {currentView === 'reportViewer' && (\n        <ReportViewer onBack={() => setCurrentView('dashboard')} />\n      )}\n      {currentView === 'scheduledReports' && (\n        <ScheduledReports onBack={() => setCurrentView('dashboard')} />\n      )}\n      {currentView === 'reportSettings' && (\n        <ReportSettings onBack={() => setCurrentView('dashboard')} />\n      )}\n    </div>\n  );\n};\n\nexport default ReportsDashboard;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\ScheduledReports.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ArrowLeftIcon,\n  PlayIcon,\n  PencilIcon,\n  TrashIcon,\n  PauseIcon,\n} from '@heroicons/react/24/outline';\n\nconst ScheduledReports = ({ onBack }) => {\n  const { t } = useTranslation();\n\n  // Dummy data for scheduled reports\n  const schedules = [\n    {\n      id: 1,\n      name: 'Monthly Revenue Report',\n      frequency: 'Monthly',\n      nextRun: '2023-10-01 09:00',\n      status: 'active',\n    },\n    {\n      id: 2,\n      name: 'Weekly Client Activity',\n      frequency: 'Weekly',\n      nextRun: '2023-09-25 09:00',\n      status: 'active',\n    },\n    {\n      id: 3,\n      name: 'Q3 Tax Summary',\n      frequency: 'Quarterly',\n      nextRun: '2023-10-05 12:00',\n      status: 'paused',\n    },\n  ];\n\n  return (\n    <div className='bg-white rounded-xl shadow-sm border border-gray-200 p-6'>\n      <button\n        onClick={onBack}\n        className='flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 mb-6'\n      >\n        <ArrowLeftIcon className='h-4 w-4 mr-2' />\n        Back to Reports Dashboard\n      </button>\n\n      <div className='mb-6'>\n        <h2 className='text-2xl font-semibold text-gray-800'>Scheduled Reports</h2>\n        <p className='mt-1 text-gray-600'>Manage your automated report schedules.</p>\n      </div>\n\n      <div className='overflow-x-auto'>\n        <table className='min-w-full divide-y divide-gray-200'>\n          <thead className='bg-gray-50'>\n            <tr>\n              <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                Report Name\n              </th>\n              <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                Frequency\n              </th>\n              <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                Next Run\n              </th>\n              <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                Status\n              </th>\n              <th className='px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className='bg-white divide-y divide-gray-200'>\n            {schedules.map(schedule => (\n              <tr key={schedule.id}>\n                <td className='px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900'>\n                  {schedule.name}\n                </td>\n                <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>\n                  {schedule.frequency}\n                </td>\n                <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>\n                  {schedule.nextRun}\n                </td>\n                <td className='px-6 py-4 whitespace-nowrap'>\n                  <span\n                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${schedule.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}\n                  >\n                    {schedule.status}\n                  </span>\n                </td>\n                <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2'>\n                  <button className='text-blue-600 hover:text-blue-900'>\n                    {schedule.status === 'active' ? (\n                      <PauseIcon className='h-5 w-5' />\n                    ) : (\n                      <PlayIcon className='h-5 w-5' />\n                    )}\n                  </button>\n                  <button className='text-gray-600 hover:text-gray-900'>\n                    <PencilIcon className='h-5 w-5' />\n                  </button>\n                  <button className='text-red-600 hover:text-red-900'>\n                    <TrashIcon className='h-5 w-5' />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduledReports;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\TabNavigation.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\charts\\BarChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\charts\\ChartContainer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\charts\\DoughnutChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\reports\\charts\\LineChart.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'title' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst LineChart = ({\n  data,\n  options = {},\n  title,\n  formatCurrency,\n  className = '',\n  height = 'h-64',\n}) => {\n  const defaultOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const value = context.parsed.y;\n            return formatCurrency\n              ? `${context.dataset.label}: ${formatCurrency(value)}`\n              : `${context.dataset.label}: ${value}`;\n          },\n        },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          callback: function (value) {\n            return formatCurrency ? formatCurrency(value) : value;\n          },\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n      },\n      x: {\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n      },\n    },\n    elements: {\n      line: {\n        tension: 0.4,\n      },\n      point: {\n        radius: 4,\n        hoverRadius: 6,\n      },\n    },\n  };\n\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options,\n    plugins: {\n      ...defaultOptions.plugins,\n      ...options.plugins,\n    },\n    scales: {\n      ...defaultOptions.scales,\n      ...options.scales,\n    },\n  };\n\n  const defaultData = {\n    labels: data?.labels || [],\n    datasets:\n      data?.datasets?.map(dataset => ({\n        borderColor: 'rgb(59, 130, 246)',\n        backgroundColor: 'rgba(59, 130, 246, 0.1)',\n        fill: true,\n        tension: 0.4,\n        ...dataset,\n      })) || [],\n  };\n\n  return (\n    <div className={`${height} ${className}`}>\n      <Line data={defaultData} options={mergedOptions} />\n    </div>\n  );\n};\n\nexport default LineChart;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\AccessibilitySettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DocumentTextIcon' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BellIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'checkColorContrast' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedElement' is assigned a value but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedElement' is assigned a value but never used.","line":39,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'report' is assigned a value but never used.","line":43,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":43,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":43,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'runTest' is assigned a value but never used.","line":43,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  PlayIcon,\n  DocumentTextIcon,\n  EyeIcon,\n  BellIcon,\n  ArrowDownTrayIcon,\n} from '@heroicons/react/24/outline';\nimport {\n  accessibilityTester,\n  useAccessibilityTest,\n  auditPageAccessibility,\n  checkColorContrast,\n  validateHeadingHierarchy,\n  addSkipLinks,\n  announceToScreenReader,\n} from '../../utils/AccessibilityTester';\n\n/**\n * AccessibilitySettings Component\n * Provides controls for all accessibility features including:\n * - High contrast mode\n * - Font size scaling\n * - Color blindness simulation\n * - Reduced motion preferences\n * - Contrast auditing tools\n */\nconst AccessibilitySettings = () => {\n  const { t } = useTranslation('settings');\n  const [isTestRunning, setIsTestRunning] = useState(false);\n  const [currentReport, setCurrentReport] = useState(null);\n  const [monitoringEnabled, setMonitoringEnabled] = useState(false);\n  const [alertsEnabled, setAlertsEnabled] = useState(false);\n  const [testHistory, setTestHistory] = useState([]);\n  const [selectedElement, setSelectedElement] = useState(null);\n  const contentRef = useRef(null);\n\n  // Use the accessibility test hook\n  const { report, isLoading, error, runTest } = useAccessibilityTest(contentRef);\n\n  useEffect(() => {\n    // Load saved settings\n    const savedSettings = localStorage.getItem('accessibility-settings');\n    if (savedSettings) {\n      const settings = JSON.parse(savedSettings);\n      setMonitoringEnabled(settings.monitoring || false);\n      setAlertsEnabled(settings.alerts || false);\n    }\n\n    // Load test history\n    const savedHistory = localStorage.getItem('accessibility-test-history');\n    if (savedHistory) {\n      setTestHistory(JSON.parse(savedHistory));\n    }\n  }, []);\n\n  const saveSettings = newSettings => {\n    localStorage.setItem('accessibility-settings', JSON.stringify(newSettings));\n  };\n\n  const runAccessibilityTest = async () => {\n    setIsTestRunning(true);\n    announceToScreenReader('Starting accessibility test', 'polite');\n\n    try {\n      const tester = accessibilityTester;\n      const newReport = await tester.runAudit();\n      setCurrentReport(newReport);\n\n      // Add to history\n      const newHistory = [newReport, ...testHistory.slice(0, 9)]; // Keep last 10 reports\n      setTestHistory(newHistory);\n      localStorage.setItem('accessibility-test-history', JSON.stringify(newHistory));\n\n      announceToScreenReader(\n        `Accessibility test completed. Found ${newReport.summary.violationCount} violations`,\n        'polite',\n      );\n    } catch (error) {\n      console.error('Accessibility test failed:', error);\n      announceToScreenReader('Accessibility test failed', 'assertive');\n    } finally {\n      setIsTestRunning(false);\n    }\n  };\n\n  const runQuickAudit = () => {\n    const quickReport = auditPageAccessibility();\n    setCurrentReport(quickReport);\n    announceToScreenReader(\n      `Quick audit completed. Overall score: ${quickReport.overallScore}%`,\n      'polite',\n    );\n  };\n\n  const toggleMonitoring = enabled => {\n    setMonitoringEnabled(enabled);\n    const settings = { monitoring: enabled, alerts: alertsEnabled };\n    saveSettings(settings);\n\n    const tester = accessibilityTester;\n    if (enabled) {\n      tester.startMonitoring(30000); // Check every 30 seconds\n      announceToScreenReader('Accessibility monitoring enabled', 'polite');\n    } else {\n      announceToScreenReader('Accessibility monitoring disabled', 'polite');\n    }\n  };\n\n  const toggleAlerts = enabled => {\n    setAlertsEnabled(enabled);\n    const settings = { monitoring: monitoringEnabled, alerts: enabled };\n    saveSettings(settings);\n    announceToScreenReader(`Accessibility alerts ${enabled ? 'enabled' : 'disabled'}`, 'polite');\n  };\n\n  const exportReport = () => {\n    if (!currentReport) return;\n\n    const dataStr = JSON.stringify(currentReport, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n\n    const exportFileDefaultName = `accessibility-report-${new Date().toISOString().split('T')[0]}.json`;\n\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n\n    announceToScreenReader('Accessibility report exported', 'polite');\n  };\n\n  const enhancePageAccessibility = () => {\n    // Add skip links if not present\n    addSkipLinks();\n\n    // Check heading hierarchy\n    const headingIssues = validateHeadingHierarchy();\n    if (headingIssues.length > 0) {\n      console.warn('Heading hierarchy issues:', headingIssues);\n    }\n\n    announceToScreenReader('Page accessibility enhancements applied', 'polite');\n  };\n\n  const getScoreColor = score => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getScoreBgColor = score => {\n    if (score >= 90) return 'bg-green-100';\n    if (score >= 70) return 'bg-yellow-100';\n    return 'bg-red-100';\n  };\n\n  const formatTimestamp = timestamp => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  return (\n    <div ref={contentRef} className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h3 className='text-lg font-medium text-gray-900 mb-2'>\n          {t('accessibility.title', 'Accessibility Testing & Monitoring')}\n        </h3>\n        <p className='text-sm text-gray-600'>\n          {t(\n            'accessibility.description',\n            'Monitor and improve the accessibility of your application with automated testing and real-time monitoring.',\n          )}\n        </p>\n      </div>\n\n      {/* Quick Actions */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\n        <button\n          onClick={runAccessibilityTest}\n          disabled={isTestRunning}\n          className='flex flex-col items-center p-4 bg-blue-50 hover:bg-blue-100 rounded-lg border border-blue-200 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500'\n        >\n          <PlayIcon className='w-8 h-8 text-blue-600 mb-2' />\n          <span className='text-sm font-medium text-blue-900'>\n            {isTestRunning\n              ? t('accessibility.testing', 'Testing...')\n              : t('accessibility.runTest', 'Run Full Test')}\n          </span>\n        </button>\n\n        <button\n          onClick={runQuickAudit}\n          className='flex flex-col items-center p-4 bg-green-50 hover:bg-green-100 rounded-lg border border-green-200 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500'\n        >\n          <EyeIcon className='w-8 h-8 text-green-600 mb-2' />\n          <span className='text-sm font-medium text-green-900'>\n            {t('accessibility.quickAudit', 'Quick Audit')}\n          </span>\n        </button>\n\n        <button\n          onClick={enhancePageAccessibility}\n          className='flex flex-col items-center p-4 bg-purple-50 hover:bg-purple-100 rounded-lg border border-purple-200 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500'\n        >\n          <CheckCircleIcon className='w-8 h-8 text-purple-600 mb-2' />\n          <span className='text-sm font-medium text-purple-900'>\n            {t('accessibility.enhance', 'Enhance Page')}\n          </span>\n        </button>\n\n        <button\n          onClick={exportReport}\n          disabled={!currentReport}\n          className='flex flex-col items-center p-4 bg-gray-50 hover:bg-gray-100 rounded-lg border border-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed'\n        >\n          <ArrowDownTrayIcon className='w-8 h-8 text-gray-600 mb-2' />\n          <span className='text-sm font-medium text-gray-900'>\n            {t('accessibility.export', 'Export Report')}\n          </span>\n        </button>\n      </div>\n\n      {/* Settings */}\n      <div className='bg-white p-6 rounded-lg border border-gray-200'>\n        <h4 className='text-md font-medium text-gray-900 mb-4'>\n          {t('accessibility.settings', 'Monitoring Settings')}\n        </h4>\n\n        <div className='space-y-4'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <label className='text-sm font-medium text-gray-700'>\n                {t('accessibility.realTimeMonitoring', 'Real-time Monitoring')}\n              </label>\n              <p className='text-xs text-gray-500'>\n                {t('accessibility.monitoringDesc', 'Continuously monitor accessibility issues')}\n              </p>\n            </div>\n            <button\n              onClick={() => toggleMonitoring(!monitoringEnabled)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                monitoringEnabled ? 'bg-blue-600' : 'bg-gray-200'\n              }`}\n              role='switch'\n              aria-checked={monitoringEnabled}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  monitoringEnabled ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n          </div>\n\n          <div className='flex items-center justify-between'>\n            <div>\n              <label className='text-sm font-medium text-gray-700'>\n                {t('accessibility.alerts', 'Accessibility Alerts')}\n              </label>\n              <p className='text-xs text-gray-500'>\n                {t('accessibility.alertsDesc', 'Get notified when issues are detected')}\n              </p>\n            </div>\n            <button\n              onClick={() => toggleAlerts(!alertsEnabled)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                alertsEnabled ? 'bg-blue-600' : 'bg-gray-200'\n              }`}\n              role='switch'\n              aria-checked={alertsEnabled}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  alertsEnabled ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Current Report */}\n      {currentReport && (\n        <div className='bg-white p-6 rounded-lg border border-gray-200'>\n          <div className='flex items-center justify-between mb-4'>\n            <h4 className='text-md font-medium text-gray-900'>\n              {t('accessibility.latestReport', 'Latest Accessibility Report')}\n            </h4>\n            <span className='text-xs text-gray-500'>\n              {formatTimestamp(currentReport.timestamp)}\n            </span>\n          </div>\n\n          {/* Score Overview */}\n          <div className='grid grid-cols-1 md:grid-cols-4 gap-4 mb-6'>\n            <div className={`p-4 rounded-lg ${getScoreBgColor(currentReport.overallScore || 0)}`}>\n              <div className='text-center'>\n                <div\n                  className={`text-2xl font-bold ${getScoreColor(currentReport.overallScore || 0)}`}\n                >\n                  {currentReport.overallScore || 0}%\n                </div>\n                <div className='text-sm text-gray-600'>Overall Score</div>\n              </div>\n            </div>\n\n            <div className='p-4 rounded-lg bg-red-50'>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-red-600'>\n                  {currentReport.summary?.violationCount || currentReport.totalIssues || 0}\n                </div>\n                <div className='text-sm text-gray-600'>Violations</div>\n              </div>\n            </div>\n\n            <div className='p-4 rounded-lg bg-green-50'>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-green-600'>\n                  {currentReport.summary?.passCount || 0}\n                </div>\n                <div className='text-sm text-gray-600'>Passes</div>\n              </div>\n            </div>\n\n            <div className='p-4 rounded-lg bg-yellow-50'>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-yellow-600'>\n                  {currentReport.summary?.incompleteCount || 0}\n                </div>\n                <div className='text-sm text-gray-600'>Incomplete</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Issues List */}\n          {currentReport.violations && currentReport.violations.length > 0 && (\n            <div>\n              <h5 className='text-sm font-medium text-gray-900 mb-3'>Critical Issues</h5>\n              <div className='space-y-3'>\n                {currentReport.violations.slice(0, 5).map((violation, index) => (\n                  <div key={index} className='p-3 bg-red-50 rounded-md border border-red-200'>\n                    <div className='flex items-start'>\n                      <XCircleIcon className='w-5 h-5 text-red-500 mt-0.5 mr-3 flex-shrink-0' />\n                      <div className='flex-1'>\n                        <p className='text-sm font-medium text-red-900'>{violation.help}</p>\n                        <p className='text-xs text-red-700 mt-1'>{violation.description}</p>\n                        <div className='flex items-center mt-2'>\n                          <span\n                            className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${\n                              violation.impact === 'critical'\n                                ? 'bg-red-100 text-red-800'\n                                : violation.impact === 'serious'\n                                  ? 'bg-orange-100 text-orange-800'\n                                  : violation.impact === 'moderate'\n                                    ? 'bg-yellow-100 text-yellow-800'\n                                    : 'bg-gray-100 text-gray-800'\n                            }`}\n                          >\n                            {violation.impact}\n                          </span>\n                          <span className='text-xs text-red-600 ml-2'>\n                            {violation.nodes?.length || 0} elements affected\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n\n                {currentReport.violations.length > 5 && (\n                  <p className='text-sm text-gray-600 text-center'>\n                    And {currentReport.violations.length - 5} more violations...\n                  </p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Quick Fixes */}\n          {currentReport.results && (\n            <div className='mt-6'>\n              <h5 className='text-sm font-medium text-gray-900 mb-3'>Quick Fixes Available</h5>\n              <div className='space-y-2'>\n                {currentReport.results.slice(0, 3).map((result, index) => (\n                  <div key={index} className='p-3 bg-blue-50 rounded-md border border-blue-200'>\n                    <div className='flex items-center justify-between'>\n                      <span className='text-sm text-blue-900'>\n                        {result.suggestions?.[0] || 'Improvement suggestion available'}\n                      </span>\n                      <button className='text-xs text-blue-600 hover:text-blue-800 font-medium'>\n                        Apply Fix\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Test History */}\n      {testHistory.length > 0 && (\n        <div className='bg-white p-6 rounded-lg border border-gray-200'>\n          <h4 className='text-md font-medium text-gray-900 mb-4'>\n            {t('accessibility.testHistory', 'Test History')}\n          </h4>\n\n          <div className='space-y-3'>\n            {testHistory.slice(0, 5).map((historyReport, index) => (\n              <div\n                key={index}\n                className='flex items-center justify-between p-3 bg-gray-50 rounded-md'\n              >\n                <div className='flex items-center'>\n                  <div\n                    className={`w-8 h-8 rounded-full flex items-center justify-center ${getScoreBgColor(historyReport.overallScore || 0)}`}\n                  >\n                    <span\n                      className={`text-xs font-medium ${getScoreColor(historyReport.overallScore || 0)}`}\n                    >\n                      {historyReport.overallScore || 0}\n                    </span>\n                  </div>\n                  <div className='ml-3'>\n                    <p className='text-sm font-medium text-gray-900'>\n                      {formatTimestamp(historyReport.timestamp)}\n                    </p>\n                    <p className='text-xs text-gray-500'>\n                      {historyReport.summary?.violationCount || historyReport.totalIssues || 0}{' '}\n                      violations found\n                    </p>\n                  </div>\n                </div>\n                <button\n                  onClick={() => setCurrentReport(historyReport)}\n                  className='text-sm text-blue-600 hover:text-blue-800 font-medium'\n                >\n                  View Details\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Live Region for Screen Reader Announcements */}\n      <div\n        aria-live='polite'\n        aria-atomic='true'\n        className='sr-only'\n        id='accessibility-announcements'\n      />\n    </div>\n  );\n};\n\nexport default AccessibilitySettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\BackupSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ServerIcon' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShieldCheckIcon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":119,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":156,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport {\n  CloudArrowDownIcon,\n  CloudArrowUpIcon,\n  ArrowPathIcon,\n  DocumentArrowDownIcon,\n  ClockIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  InformationCircleIcon,\n  CalendarIcon,\n  ServerIcon,\n  ShieldCheckIcon,\n} from '@heroicons/react/24/outline';\n\nconst BackupSettings = () => {\n  const { t } = useTranslation(['settings']);\n  const { user } = useUser();\n  const { isAuthenticated } = useClerkAuth();\n\n  // Backup configuration state\n  const [backupSettings, setBackupSettings] = useState({\n    autoBackup: true,\n    frequency: 'weekly',\n    retention: '90',\n    includeAttachments: true,\n    encryptBackups: true,\n    notifyOnComplete: true,\n    notifyOnFailure: true,\n    backupLocation: 'cloud',\n  });\n\n  // Export/import state\n  const [exportLoading, setExportLoading] = useState(false);\n  const [importLoading, setImportLoading] = useState(false);\n  const [lastBackup, setLastBackup] = useState(null);\n  const [backupHistory, setBackupHistory] = useState([]);\n\n  // Load backup settings and history\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadBackupSettings();\n      loadBackupHistory();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadBackupSettings = () => {\n    // Load from localStorage or API\n    const saved = localStorage.getItem('backupSettings');\n    if (saved) {\n      setBackupSettings(JSON.parse(saved));\n    }\n\n    // Mock last backup date\n    setLastBackup(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)); // 7 days ago\n  };\n\n  const loadBackupHistory = () => {\n    // Mock backup history\n    const mockHistory = [\n      {\n        id: 1,\n        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n        type: 'automatic',\n        status: 'completed',\n        size: '245 MB',\n        duration: '2m 34s',\n      },\n      {\n        id: 2,\n        date: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n        type: 'manual',\n        status: 'completed',\n        size: '238 MB',\n        duration: '2m 18s',\n      },\n      {\n        id: 3,\n        date: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\n        type: 'automatic',\n        status: 'failed',\n        size: '0 MB',\n        duration: '0s',\n        error: 'Network timeout',\n      },\n    ];\n    setBackupHistory(mockHistory);\n  };\n\n  const handleSettingChange = (setting, value) => {\n    const newSettings = { ...backupSettings, [setting]: value };\n    setBackupSettings(newSettings);\n    localStorage.setItem('backupSettings', JSON.stringify(newSettings));\n  };\n\n  const handleManualBackup = async () => {\n    setExportLoading(true);\n    try {\n      // Simulate backup process\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Add to history\n      const newBackup = {\n        id: Date.now(),\n        date: new Date(),\n        type: 'manual',\n        status: 'completed',\n        size: '247 MB',\n        duration: '3m 2s',\n      };\n      setBackupHistory([newBackup, ...backupHistory]);\n      setLastBackup(new Date());\n\n      // Show success message\n      alert(t('settings:backup.manualBackupSuccess'));\n    } catch (error) {\n      alert(t('settings:backup.manualBackupError'));\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  const handleDataExport = async format => {\n    setExportLoading(true);\n    try {\n      // Simulate export process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Create mock download\n      const data = {\n        exportDate: new Date().toISOString(),\n        format: format,\n        data: {\n          clients: [],\n          invoices: [],\n          quotes: [],\n          expenses: [],\n          settings: backupSettings,\n        },\n      };\n\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `nexa-export-${format}-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      alert(t('settings:backup.exportSuccess'));\n    } catch (error) {\n      alert(t('settings:backup.exportError'));\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  const handleDataImport = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    setImportLoading(true);\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n\n      // Validate import data structure\n      if (!data.data || !data.exportDate) {\n        throw new Error('Invalid backup file format');\n      }\n\n      // Simulate import process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      alert(t('settings:backup.importSuccess'));\n    } catch (error) {\n      alert(t('settings:backup.importError', { error: error.message }));\n    } finally {\n      setImportLoading(false);\n      // Reset file input\n      event.target.value = '';\n    }\n  };\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircleIcon className='h-5 w-5 text-green-500' />;\n      case 'failed':\n        return <ExclamationTriangleIcon className='h-5 w-5 text-red-500' />;\n      default:\n        return <ClockIcon className='h-5 w-5 text-yellow-500' />;\n    }\n  };\n\n  const formatDate = date => {\n    return new Intl.DateTimeFormat('it-IT', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  };\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access backup settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div>\n        <h3 className='text-lg font-medium text-gray-900'>{t('settings:backup.title')}</h3>\n        <p className='mt-1 text-sm text-gray-500'>{t('settings:backup.description')}</p>\n      </div>\n\n      {/* Last Backup Status */}\n      <div className='bg-blue-50 border border-blue-200 rounded-md p-4'>\n        <div className='flex items-center'>\n          <InformationCircleIcon className='h-5 w-5 text-blue-400 mr-2' />\n          <div>\n            <p className='text-sm font-medium text-blue-900'>{t('settings:backup.lastBackup')}</p>\n            <p className='text-sm text-blue-700'>\n              {lastBackup ? formatDate(lastBackup) : t('settings:backup.noBackup')}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Manual Actions */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h4 className='text-md font-medium text-gray-900 mb-4'>\n          {t('settings:backup.manualActions')}\n        </h4>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n          {/* Manual Backup */}\n          <button\n            onClick={handleManualBackup}\n            disabled={exportLoading}\n            className='flex items-center justify-center px-4 py-3 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed'\n          >\n            {exportLoading ? (\n              <ArrowPathIcon className='animate-spin h-4 w-4 mr-2' />\n            ) : (\n              <CloudArrowUpIcon className='h-4 w-4 mr-2' />\n            )}\n            {t('settings:backup.createBackup')}\n          </button>\n\n          {/* Import Data */}\n          <label className='flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 cursor-pointer'>\n            <input\n              type='file'\n              accept='.json'\n              onChange={handleDataImport}\n              className='hidden'\n              disabled={importLoading}\n            />\n            {importLoading ? (\n              <ArrowPathIcon className='animate-spin h-4 w-4 mr-2' />\n            ) : (\n              <CloudArrowDownIcon className='h-4 w-4 mr-2' />\n            )}\n            {t('settings:backup.importData')}\n          </label>\n        </div>\n      </div>\n\n      {/* Data Export */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h4 className='text-md font-medium text-gray-900 mb-4'>\n          {t('settings:backup.dataExport')}\n        </h4>\n\n        <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n          <button\n            onClick={() => handleDataExport('complete')}\n            disabled={exportLoading}\n            className='flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50'\n          >\n            <DocumentArrowDownIcon className='h-4 w-4 mr-2' />\n            {t('settings:backup.exportComplete')}\n          </button>\n\n          <button\n            onClick={() => handleDataExport('clients')}\n            disabled={exportLoading}\n            className='flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50'\n          >\n            <DocumentArrowDownIcon className='h-4 w-4 mr-2' />\n            {t('settings:backup.exportClients')}\n          </button>\n\n          <button\n            onClick={() => handleDataExport('financial')}\n            disabled={exportLoading}\n            className='flex items-center justify-center px-4 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50'\n          >\n            <DocumentArrowDownIcon className='h-4 w-4 mr-2' />\n            {t('settings:backup.exportFinancial')}\n          </button>\n        </div>\n      </div>\n\n      {/* Automatic Backup Configuration */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h4 className='text-md font-medium text-gray-900 mb-4'>\n          {t('settings:backup.automaticSettings')}\n        </h4>\n\n        <div className='space-y-4'>\n          {/* Enable Auto Backup */}\n          <div className='flex items-center justify-between'>\n            <div>\n              <label className='text-sm font-medium text-gray-700'>\n                {t('settings:backup.enableAutoBackup')}\n              </label>\n              <p className='text-sm text-gray-500'>{t('settings:backup.enableAutoBackupDesc')}</p>\n            </div>\n            <label className='relative inline-flex items-center cursor-pointer'>\n              <input\n                type='checkbox'\n                checked={backupSettings.autoBackup}\n                onChange={e => handleSettingChange('autoBackup', e.target.checked)}\n                className='sr-only peer'\n              />\n              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n            </label>\n          </div>\n\n          {/* Backup Frequency */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('settings:backup.frequency')}\n            </label>\n            <select\n              value={backupSettings.frequency}\n              onChange={e => handleSettingChange('frequency', e.target.value)}\n              disabled={!backupSettings.autoBackup}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100'\n            >\n              <option value='daily'>{t('settings:backup.frequencyDaily')}</option>\n              <option value='weekly'>{t('settings:backup.frequencyWeekly')}</option>\n              <option value='monthly'>{t('settings:backup.frequencyMonthly')}</option>\n            </select>\n          </div>\n\n          {/* Retention Period */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('settings:backup.retention')}\n            </label>\n            <select\n              value={backupSettings.retention}\n              onChange={e => handleSettingChange('retention', e.target.value)}\n              disabled={!backupSettings.autoBackup}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100'\n            >\n              <option value='30'>{t('settings:backup.retention30')}</option>\n              <option value='90'>{t('settings:backup.retention90')}</option>\n              <option value='180'>{t('settings:backup.retention180')}</option>\n              <option value='365'>{t('settings:backup.retention365')}</option>\n            </select>\n          </div>\n\n          {/* Additional Options */}\n          <div className='space-y-3'>\n            <div className='flex items-center'>\n              <input\n                type='checkbox'\n                id='includeAttachments'\n                checked={backupSettings.includeAttachments}\n                onChange={e => handleSettingChange('includeAttachments', e.target.checked)}\n                disabled={!backupSettings.autoBackup}\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded disabled:opacity-50'\n              />\n              <label htmlFor='includeAttachments' className='ml-2 text-sm text-gray-700'>\n                {t('settings:backup.includeAttachments')}\n              </label>\n            </div>\n\n            <div className='flex items-center'>\n              <input\n                type='checkbox'\n                id='encryptBackups'\n                checked={backupSettings.encryptBackups}\n                onChange={e => handleSettingChange('encryptBackups', e.target.checked)}\n                disabled={!backupSettings.autoBackup}\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded disabled:opacity-50'\n              />\n              <label htmlFor='encryptBackups' className='ml-2 text-sm text-gray-700'>\n                {t('settings:backup.encryptBackups')}\n              </label>\n            </div>\n\n            <div className='flex items-center'>\n              <input\n                type='checkbox'\n                id='notifyOnComplete'\n                checked={backupSettings.notifyOnComplete}\n                onChange={e => handleSettingChange('notifyOnComplete', e.target.checked)}\n                disabled={!backupSettings.autoBackup}\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded disabled:opacity-50'\n              />\n              <label htmlFor='notifyOnComplete' className='ml-2 text-sm text-gray-700'>\n                {t('settings:backup.notifyOnComplete')}\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Backup History */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h4 className='text-md font-medium text-gray-900 mb-4'>{t('settings:backup.history')}</h4>\n\n        <div className='overflow-hidden'>\n          <table className='min-w-full divide-y divide-gray-200'>\n            <thead className='bg-gray-50'>\n              <tr>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  {t('settings:backup.historyDate')}\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  {t('settings:backup.historyType')}\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  {t('settings:backup.historyStatus')}\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  {t('settings:backup.historySize')}\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  {t('settings:backup.historyDuration')}\n                </th>\n              </tr>\n            </thead>\n            <tbody className='bg-white divide-y divide-gray-200'>\n              {backupHistory.map(backup => (\n                <tr key={backup.id} className='hover:bg-gray-50'>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    {formatDate(backup.date)}\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    <span\n                      className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        backup.type === 'automatic'\n                          ? 'bg-blue-100 text-blue-800'\n                          : 'bg-green-100 text-green-800'\n                      }`}\n                    >\n                      {t(\n                        `settings:backup.type${backup.type.charAt(0).toUpperCase() + backup.type.slice(1)}`,\n                      )}\n                    </span>\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    <div className='flex items-center'>\n                      {getStatusIcon(backup.status)}\n                      <span className='ml-2 capitalize'>{backup.status}</span>\n                      {backup.error && (\n                        <span className='ml-2 text-red-600 text-xs'>({backup.error})</span>\n                      )}\n                    </div>\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    {backup.size}\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    {backup.duration}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BackupSettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\BillingSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\BillingSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CogIcon' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReceiptPercentIcon' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TEMPLATE_TYPES' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'billingLoading' is assigned a value but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setInvoices' is assigned a value but never used.","line":96,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvoiceSettings'. Either include it or remove the dependency array.","line":111,"column":6,"nodeType":"ArrayExpression","endLine":111,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loadInvoiceSettings, user?.id]","fix":{"range":[3609,3636],"text":"[isAuthenticated, loadInvoiceSettings, user?.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generatePreview'. Either include it or remove the dependency array.","line":118,"column":6,"nodeType":"ArrayExpression","endLine":118,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [generatePreview, invoiceSettings, selectedTemplate]","fix":{"range":[3786,3821],"text":"[generatePreview, invoiceSettings, selectedTemplate]"}}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":131,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":131,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":169,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":169,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":177,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":177,"endColumn":90},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":180,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":180,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleGeneratePreviewNumber' is assigned a value but never used.","line":186,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":202,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":202,"endColumn":86},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":206,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":206,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":210,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":211,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'invoiceId' is defined but never used.","line":214,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":215,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":215,"endColumn":90},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":364,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12776,12818],"text":"You don&apos;t have an active subscription yet."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12776,12818],"text":"You don&lsquo;t have an active subscription yet."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12776,12818],"text":"You don&#39;t have an active subscription yet."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12776,12818],"text":"You don&rsquo;t have an active subscription yet."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuthBypass as useAuth } from '@hooks/useClerkBypass';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport {\n  CreditCardIcon,\n  PlusIcon,\n  ArrowUpTrayIcon,\n  CogIcon,\n  DocumentTextIcon,\n  ReceiptPercentIcon,\n  PaintBrushIcon,\n  CalendarIcon,\n  EyeIcon,\n  SparklesIcon,\n  Cog6ToothIcon,\n  DocumentDuplicateIcon,\n  HashtagIcon,\n  SwatchIcon,\n  AdjustmentsHorizontalIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline';\nimport SettingsTable from '@components/settings/SettingsTable';\nimport {\n  InvoiceSettingsService,\n  TEMPLATE_TYPES,\n  NUMBERING_FORMATS,\n  LOGO_POSITIONS,\n  CURRENCIES,\n  DATE_FORMATS,\n  NUMBER_FORMATS,\n} from '@lib/invoiceSettingsService';\n\nexport default function BillingSettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useAuth();\n  const { isAuthenticated } = useClerkAuth();\n  const [activeTab, setActiveTab] = useState('subscription');\n  const [loading, setLoading] = useState(false);\n  const [settingsLoading, setSettingsLoading] = useState(false);\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n\n  // Real subscription and billing data - to be connected to actual billing service\n  const [subscriptionInfo, setSubscriptionInfo] = useState(null);\n  const [paymentMethods, setPaymentMethods] = useState([]);\n  const [billingLoading, setBillingLoading] = useState(true);\n\n  // Load real billing data\n  useEffect(() => {\n    const loadBillingData = async () => {\n      try {\n        setBillingLoading(true);\n        // TODO: Replace with actual billing service calls\n        // const subscription = await BillingService.getSubscription();\n        // const methods = await BillingService.getPaymentMethods();\n        // setSubscriptionInfo(subscription);\n        // setPaymentMethods(methods);\n\n        // For now, set empty state to show no demo data\n        setSubscriptionInfo(null);\n        setPaymentMethods([]);\n      } catch (error) {\n        console.error('Error loading billing data:', error);\n      } finally {\n        setBillingLoading(false);\n      }\n    };\n\n    loadBillingData();\n  }, []);\n\n  const [invoiceSettings, setInvoiceSettings] = useState({\n    prefix: 'INV',\n    next_number: 1,\n    numbering_format: NUMBERING_FORMATS.SEQUENTIAL,\n    template_id: null,\n    layout_style: 'professional',\n    logo_position: LOGO_POSITIONS.LEFT,\n    payment_terms: 30,\n    tax_rate: 22.0,\n    currency: CURRENCIES.EUR,\n    brand_color: '#2563eb',\n    footer_text: 'Thank you for your business!',\n    include_notes: true,\n    include_tax_breakdown: true,\n    auto_reminders: true,\n    reminder_days: '7,14,30',\n    language: 'en',\n    date_format: DATE_FORMATS.DD_MM_YYYY,\n    number_format: NUMBER_FORMATS.EUROPEAN,\n  });\n\n  const [invoices, setInvoices] = useState([]);\n\n  const tabs = [\n    { id: 'subscription', label: t('billing.tabs.subscription'), icon: CreditCardIcon },\n    { id: 'payment', label: t('billing.tabs.payment'), icon: CreditCardIcon },\n    { id: 'invoices', label: t('billing.tabs.invoices'), icon: DocumentTextIcon },\n    { id: 'customization', label: t('billing.tabs.customization'), icon: PaintBrushIcon },\n  ];\n\n  // Load invoice settings and templates on component mount\n  useEffect(() => {\n    if (isAuthenticated && user?.id) {\n      loadInvoiceSettings();\n      loadTemplates();\n    }\n  }, [isAuthenticated, user?.id]);\n\n  // Generate preview when settings change\n  useEffect(() => {\n    if (invoiceSettings && selectedTemplate) {\n      generatePreview();\n    }\n  }, [invoiceSettings, selectedTemplate]);\n\n  const loadInvoiceSettings = async () => {\n    try {\n      setSettingsLoading(true);\n      const settings = await InvoiceSettingsService.getInvoiceSettings(user.id);\n      setInvoiceSettings(settings);\n      if (settings.template_id) {\n        const template = await InvoiceSettingsService.getTemplateConfig(settings.template_id);\n        setSelectedTemplate(template);\n      }\n    } catch (error) {\n      console.error('Error loading invoice settings:', error);\n      showNotification && showNotification(t('billing.alerts.loadError'), 'error');\n    } finally {\n      setSettingsLoading(false);\n    }\n  };\n\n  const loadTemplates = async () => {\n    try {\n      const templatesList = await InvoiceSettingsService.getTemplates();\n      setTemplates(templatesList);\n    } catch (error) {\n      console.error('Error loading templates:', error);\n    }\n  };\n\n  const generatePreview = async () => {\n    try {\n      const preview = InvoiceSettingsService.generatePreview(\n        invoiceSettings,\n        selectedTemplate?.config || {},\n      );\n      setPreviewData(preview);\n    } catch (error) {\n      console.error('Error generating preview:', error);\n    }\n  };\n\n  const handleInvoiceSettingChange = (key, value) => {\n    setInvoiceSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleTemplateSelect = async templateId => {\n    try {\n      const template = await InvoiceSettingsService.getTemplateConfig(templateId);\n      setSelectedTemplate(template);\n      handleInvoiceSettingChange('template_id', templateId);\n    } catch (error) {\n      console.error('Error selecting template:', error);\n      showNotification && showNotification(t('billing.alerts.templateError'), 'error');\n    }\n  };\n\n  const handleSaveInvoiceSettings = async () => {\n    setLoading(true);\n    try {\n      await InvoiceSettingsService.saveInvoiceSettings(user.id, invoiceSettings);\n      showNotification && showNotification(t('billing.alerts.settingsSaved'), 'success');\n    } catch (error) {\n      console.error('Error saving invoice settings:', error);\n      showNotification && showNotification(t('billing.alerts.saveError'), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGeneratePreviewNumber = async () => {\n    try {\n      const previewNumber = await InvoiceSettingsService.generateInvoiceNumber(\n        user.id,\n        invoiceSettings.numbering_format,\n        invoiceSettings.prefix,\n        { preview: true },\n      );\n      return previewNumber;\n    } catch (error) {\n      console.error('Error generating preview number:', error);\n      return `${invoiceSettings.prefix}-PREVIEW`;\n    }\n  };\n\n  const handleChangePlan = () => {\n    showNotification && showNotification(t('billing.alerts.changePlanInfo'), 'info');\n  };\n\n  const handleAddPaymentMethod = () => {\n    showNotification && showNotification(t('billing.alerts.addPaymentMethodInfo'), 'info');\n  };\n\n  const handleEditPaymentMethod = methodId => {\n    showNotification &&\n      showNotification(t('billing.alerts.editPaymentMethodInfo', { methodId }), 'info');\n  };\n\n  const handleDownloadInvoice = invoiceId => {\n    showNotification && showNotification(t('billing.alerts.downloadStarted'), 'success');\n  };\n\n  const invoiceHeaders = [\n    { label: t('billing.invoiceNumber') },\n    { label: t('billing.date') },\n    { label: t('billing.amount') },\n    { label: t('billing.status') },\n    { label: '', className: 'relative' },\n  ];\n\n  const renderInvoiceRow = invoice => (\n    <>\n      <td className='px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900'>\n        {invoice.number}\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>{invoice.date}</td>\n      <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-500'>{invoice.amount}</td>\n      <td className='px-6 py-4 whitespace-nowrap'>\n        <span\n          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n            invoice.status === 'Paid'\n              ? 'bg-green-100 text-green-800'\n              : 'bg-yellow-100 text-yellow-800'\n          }`}\n        >\n          {invoice.status}\n        </span>\n      </td>\n      <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium'>\n        <button\n          type='button'\n          onClick={() => handleDownloadInvoice(invoice.id)}\n          className='text-blue-600 hover:text-blue-900'\n        >\n          <ArrowUpTrayIcon className='h-5 w-5' />\n        </button>\n      </td>\n    </>\n  );\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access billing settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show loading state\n  if (loading) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\n          <p className='text-gray-500'>Loading billing information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h2 className='text-2xl font-bold text-gray-900'>{t('billing.title')}</h2>\n        <p className='mt-1 text-sm text-gray-600'>{t('billing.description')}</p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className='border-b border-gray-200'>\n        <nav className='-mb-px flex space-x-8'>\n          {tabs.map(tab => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <Icon className='h-4 w-4' />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className='mt-6'>\n        {/* Subscription Tab */}\n        {activeTab === 'subscription' && (\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n              <CreditCardIcon className='h-5 w-5 mr-2' />\n              {t('billing.subscription.title')}\n            </h3>\n            {subscriptionInfo ? (\n              <>\n                <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n                  <div>\n                    <p className='text-sm text-gray-600 mb-2'>\n                      {t('billing.subscription.current')}\n                    </p>\n                    <p className='text-xl font-semibold text-gray-900'>{subscriptionInfo.plan}</p>\n                    <p className='text-sm text-gray-500'>\n                      {subscriptionInfo.price} / {subscriptionInfo.billingCycle}\n                    </p>\n                  </div>\n                  <div>\n                    <p className='text-sm text-gray-600 mb-2'>\n                      {t('billing.subscription.renewal')}\n                    </p>\n                    <p className='text-lg font-medium text-gray-900'>\n                      {subscriptionInfo.nextRenewal}\n                    </p>\n                  </div>\n                </div>\n                <div className='mt-6'>\n                  <h4 className='text-sm font-medium text-gray-900 mb-3'>Features Included:</h4>\n                  <ul className='space-y-2'>\n                    {subscriptionInfo.features.map((feature, index) => (\n                      <li key={index} className='flex items-center text-sm text-gray-600'>\n                        <CheckCircleIcon className='h-4 w-4 text-green-500 mr-2' />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div className='mt-6 pt-4 border-t border-gray-200'>\n                  <button\n                    onClick={handleChangePlan}\n                    className='px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                  >\n                    {t('billing.subscription.upgrade')}\n                  </button>\n                </div>\n              </>\n            ) : (\n              <div className='text-center py-8'>\n                <CreditCardIcon className='h-12 w-12 text-gray-300 mx-auto mb-4' />\n                <h3 className='text-lg font-medium text-gray-900 mb-2'>No subscription found</h3>\n                <p className='text-gray-500 mb-6'>You don't have an active subscription yet.</p>\n                <button\n                  onClick={handleChangePlan}\n                  className='px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n                >\n                  Choose a Plan\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Payment Methods Tab */}\n        {activeTab === 'payment' && (\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <div className='flex justify-between items-center mb-6'>\n              <h3 className='text-lg font-medium text-gray-900 flex items-center'>\n                <CreditCardIcon className='h-5 w-5 mr-2' />\n                {t('billing.payment.methods')}\n              </h3>\n              <button\n                onClick={handleAddPaymentMethod}\n                className='inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n              >\n                <PlusIcon className='h-4 w-4 mr-1' />\n                {t('billing.payment.add')}\n              </button>\n            </div>\n            <div className='space-y-4'>\n              {paymentMethods.length > 0 ? (\n                paymentMethods.map(method => (\n                  <div\n                    key={method.id}\n                    className='flex items-center justify-between p-4 border border-gray-200 rounded-lg'\n                  >\n                    <div className='flex items-center'>\n                      <div className='flex-shrink-0'>\n                        <CreditCardIcon className='h-6 w-6 text-gray-600' />\n                      </div>\n                      <div className='ml-4'>\n                        <p className='text-sm font-medium text-gray-900'>\n                          {method.type} ÔÇóÔÇóÔÇóÔÇó {method.last4}\n                        </p>\n                        <p className='text-xs text-gray-500'>\n                          {t('billing.payment.expires')} {method.expiry}\n                        </p>\n                      </div>\n                    </div>\n                    <div className='flex items-center'>\n                      {method.isDefault && (\n                        <span className='mr-4 inline-flex items-center px-2.5 py-0.5 rounded-full bg-green-100 text-green-800 text-xs font-medium'>\n                          {t('billing.payment.defaultCard')}\n                        </span>\n                      )}\n                      <button\n                        type='button'\n                        onClick={() => handleEditPaymentMethod(method.id)}\n                        className='text-sm text-gray-500 hover:text-gray-700'\n                      >\n                        {t('billing.payment.edit')}\n                      </button>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className='text-center py-8'>\n                  <CreditCardIcon className='h-12 w-12 text-gray-300 mx-auto mb-4' />\n                  <h3 className='text-lg font-medium text-gray-900 mb-2'>No payment methods</h3>\n                  <p className='text-gray-500 mb-6'>\n                    Add a payment method to manage your subscription.\n                  </p>\n                  <button\n                    onClick={handleAddPaymentMethod}\n                    className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n                  >\n                    <PlusIcon className='h-4 w-4 mr-2' />\n                    Add Payment Method\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Invoices Tab */}\n        {activeTab === 'invoices' && (\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n              <DocumentTextIcon className='h-5 w-5 mr-2' />\n              {t('billing.invoicesTitle')}\n            </h3>\n            <p className='text-sm text-gray-600 mb-6'>{t('billing.invoicesDescription')}</p>\n\n            <SettingsTable\n              headers={invoiceHeaders}\n              data={invoices}\n              renderRow={renderInvoiceRow}\n              emptyMessage={t('billing.noInvoices')}\n            />\n          </div>\n        )}\n\n        {/* Enhanced Invoice Customization Tab */}\n        {activeTab === 'customization' && (\n          <div className='space-y-6'>\n            {settingsLoading ? (\n              <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                <div className='flex items-center justify-center py-8'>\n                  <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n                  <span className='ml-2 text-gray-600'>{t('billing.loadingSettings')}</span>\n                </div>\n              </div>\n            ) : (\n              <>\n                {/* Template Selection */}\n                <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                  <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n                    <DocumentDuplicateIcon className='h-5 w-5 mr-2' />\n                    {t('billing.templates.title')}\n                  </h3>\n                  <p className='text-sm text-gray-600 mb-6'>{t('billing.templates.description')}</p>\n\n                  <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n                    {templates.map(template => (\n                      <div\n                        key={template.id}\n                        className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all ${\n                          invoiceSettings.template_id === template.id\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'border-gray-200 hover:border-gray-300'\n                        }`}\n                        onClick={() => handleTemplateSelect(template.id)}\n                      >\n                        <div className='flex items-center justify-between mb-3'>\n                          <h4 className='font-medium text-gray-900'>{template.name}</h4>\n                          {invoiceSettings.template_id === template.id && (\n                            <CheckCircleIcon className='h-5 w-5 text-blue-500' />\n                          )}\n                        </div>\n                        <p className='text-sm text-gray-600 mb-3'>{template.description}</p>\n                        <div className='flex items-center text-xs text-gray-500'>\n                          <SparklesIcon className='h-3 w-3 mr-1' />\n                          {template.template_type}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Numbering Configuration */}\n                <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                  <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n                    <HashtagIcon className='h-5 w-5 mr-2' />\n                    {t('billing.numbering.title')}\n                  </h3>\n\n                  <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.numbering.format')}\n                      </label>\n                      <select\n                        value={invoiceSettings.numbering_format}\n                        onChange={e =>\n                          handleInvoiceSettingChange('numbering_format', e.target.value)\n                        }\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      >\n                        <option value={NUMBERING_FORMATS.SEQUENTIAL}>\n                          {t('billing.numbering.sequential')}\n                        </option>\n                        <option value={NUMBERING_FORMATS.DATE_BASED}>\n                          {t('billing.numbering.dateBased')}\n                        </option>\n                        <option value={NUMBERING_FORMATS.YEARLY_RESET}>\n                          {t('billing.numbering.yearlyReset')}\n                        </option>\n                        <option value={NUMBERING_FORMATS.CUSTOM}>\n                          {t('billing.numbering.custom')}\n                        </option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.numbering.prefix')}\n                      </label>\n                      <input\n                        type='text'\n                        value={invoiceSettings.prefix}\n                        onChange={e => handleInvoiceSettingChange('prefix', e.target.value)}\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.numbering.nextNumber')}\n                      </label>\n                      <input\n                        type='number'\n                        min='1'\n                        value={invoiceSettings.next_number}\n                        onChange={e =>\n                          handleInvoiceSettingChange('next_number', parseInt(e.target.value))\n                        }\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.numbering.preview')}\n                      </label>\n                      <div className='px-3 py-2 bg-gray-50 border border-gray-300 rounded-md text-sm text-gray-700'>\n                        {InvoiceSettingsService.formatSampleNumber(invoiceSettings)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Layout and Branding */}\n                <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                  <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n                    <SwatchIcon className='h-5 w-5 mr-2' />\n                    {t('billing.branding.title')}\n                  </h3>\n\n                  <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.branding.logoPosition')}\n                      </label>\n                      <select\n                        value={invoiceSettings.logo_position}\n                        onChange={e => handleInvoiceSettingChange('logo_position', e.target.value)}\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      >\n                        <option value={LOGO_POSITIONS.LEFT}>{t('billing.branding.left')}</option>\n                        <option value={LOGO_POSITIONS.CENTER}>\n                          {t('billing.branding.center')}\n                        </option>\n                        <option value={LOGO_POSITIONS.RIGHT}>{t('billing.branding.right')}</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.branding.brandColor')}\n                      </label>\n                      <input\n                        type='color'\n                        value={invoiceSettings.brand_color}\n                        onChange={e => handleInvoiceSettingChange('brand_color', e.target.value)}\n                        className='w-full h-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Business Settings */}\n                <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                  <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n                    <Cog6ToothIcon className='h-5 w-5 mr-2' />\n                    {t('billing.business.title')}\n                  </h3>\n\n                  <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.business.paymentTerms')}\n                      </label>\n                      <select\n                        value={invoiceSettings.payment_terms}\n                        onChange={e =>\n                          handleInvoiceSettingChange('payment_terms', parseInt(e.target.value))\n                        }\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      >\n                        <option value={7}>7 {t('billing.business.days')}</option>\n                        <option value={14}>14 {t('billing.business.days')}</option>\n                        <option value={30}>30 {t('billing.business.days')}</option>\n                        <option value={60}>60 {t('billing.business.days')}</option>\n                        <option value={90}>90 {t('billing.business.days')}</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.business.taxRate')}\n                      </label>\n                      <input\n                        type='number'\n                        min='0'\n                        max='100'\n                        step='0.01'\n                        value={invoiceSettings.tax_rate}\n                        onChange={e =>\n                          handleInvoiceSettingChange('tax_rate', parseFloat(e.target.value))\n                        }\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      />\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.business.currency')}\n                      </label>\n                      <select\n                        value={invoiceSettings.currency}\n                        onChange={e => handleInvoiceSettingChange('currency', e.target.value)}\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      >\n                        {Object.values(CURRENCIES).map(currency => (\n                          <option key={currency} value={currency}>\n                            {currency}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className='block text-sm font-medium text-gray-700 mb-2'>\n                        {t('billing.business.dateFormat')}\n                      </label>\n                      <select\n                        value={invoiceSettings.date_format}\n                        onChange={e => handleInvoiceSettingChange('date_format', e.target.value)}\n                        className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      >\n                        {Object.values(DATE_FORMATS).map(format => (\n                          <option key={format} value={format}>\n                            {format}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n\n                  <div className='mt-6'>\n                    <label className='block text-sm font-medium text-gray-700 mb-2'>\n                      {t('billing.business.footerText')}\n                    </label>\n                    <textarea\n                      value={invoiceSettings.footer_text}\n                      onChange={e => handleInvoiceSettingChange('footer_text', e.target.value)}\n                      rows={3}\n                      className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    />\n                  </div>\n                </div>\n\n                {/* Options and Preferences */}\n                <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                  <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n                    <AdjustmentsHorizontalIcon className='h-5 w-5 mr-2' />\n                    {t('billing.options.title')}\n                  </h3>\n\n                  <div className='space-y-4'>\n                    <div className='flex items-center'>\n                      <input\n                        type='checkbox'\n                        id='autoReminders'\n                        checked={invoiceSettings.auto_reminders}\n                        onChange={e =>\n                          handleInvoiceSettingChange('auto_reminders', e.target.checked)\n                        }\n                        className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n                      />\n                      <label htmlFor='autoReminders' className='ml-2 text-sm text-gray-900'>\n                        {t('billing.options.autoReminders')}\n                      </label>\n                    </div>\n\n                    <div className='flex items-center'>\n                      <input\n                        type='checkbox'\n                        id='includeTaxBreakdown'\n                        checked={invoiceSettings.include_tax_breakdown}\n                        onChange={e =>\n                          handleInvoiceSettingChange('include_tax_breakdown', e.target.checked)\n                        }\n                        className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n                      />\n                      <label htmlFor='includeTaxBreakdown' className='ml-2 text-sm text-gray-900'>\n                        {t('billing.options.includeTaxBreakdown')}\n                      </label>\n                    </div>\n\n                    <div className='flex items-center'>\n                      <input\n                        type='checkbox'\n                        id='includeNotes'\n                        checked={invoiceSettings.include_notes}\n                        onChange={e =>\n                          handleInvoiceSettingChange('include_notes', e.target.checked)\n                        }\n                        className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n                      />\n                      <label htmlFor='includeNotes' className='ml-2 text-sm text-gray-900'>\n                        {t('billing.options.includeNotes')}\n                      </label>\n                    </div>\n\n                    {invoiceSettings.auto_reminders && (\n                      <div className='ml-6'>\n                        <label className='block text-sm font-medium text-gray-700 mb-2'>\n                          {t('billing.options.reminderDays')}\n                        </label>\n                        <input\n                          type='text'\n                          value={invoiceSettings.reminder_days}\n                          onChange={e =>\n                            handleInvoiceSettingChange('reminder_days', e.target.value)\n                          }\n                          placeholder='7,14,30'\n                          className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                        />\n                        <p className='text-xs text-gray-500 mt-1'>\n                          {t('billing.options.reminderDaysHelp')}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Preview Section */}\n                {previewData && (\n                  <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                    <div className='flex items-center justify-between mb-4'>\n                      <h3 className='text-lg font-medium text-gray-900 flex items-center'>\n                        <EyeIcon className='h-5 w-5 mr-2' />\n                        {t('billing.preview.title')}\n                      </h3>\n                      <button\n                        onClick={() => setShowPreview(!showPreview)}\n                        className='text-sm text-blue-600 hover:text-blue-700'\n                      >\n                        {showPreview ? t('billing.preview.hide') : t('billing.preview.show')}\n                      </button>\n                    </div>\n\n                    {showPreview && (\n                      <div className='bg-gray-50 border rounded-lg p-4'>\n                        <div className='text-sm space-y-2'>\n                          <div>\n                            <strong>{t('billing.preview.number')}:</strong>{' '}\n                            {previewData.invoiceNumber}\n                          </div>\n                          <div>\n                            <strong>{t('billing.preview.template')}:</strong>{' '}\n                            {selectedTemplate?.name || 'Default'}\n                          </div>\n                          <div>\n                            <strong>{t('billing.preview.currency')}:</strong>{' '}\n                            {invoiceSettings.currency}\n                          </div>\n                          <div>\n                            <strong>{t('billing.preview.terms')}:</strong>{' '}\n                            {invoiceSettings.payment_terms} {t('billing.business.days')}\n                          </div>\n                          <div>\n                            <strong>{t('billing.preview.taxRate')}:</strong>{' '}\n                            {invoiceSettings.tax_rate}%\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Save Button */}\n                <div className='bg-white border border-gray-200 rounded-lg p-6'>\n                  <div className='flex justify-end'>\n                    <button\n                      onClick={handleSaveInvoiceSettings}\n                      disabled={loading}\n                      className='px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50'\n                    >\n                      {loading ? t('common.saving') : t('billing.saveSettings')}\n                    </button>\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\BillingSettingsFallback.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":20,"endColumn":16,"suggestions":[{"fix":{"range":[542,606],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":21,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":22,"endColumn":86}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { CreditCardIcon, DocumentTextIcon } from '@heroicons/react/24/outline';\n\nconst BillingSettingsFallback = ({ showNotification }) => {\n  const [settings, setSettings] = useState({\n    currency: 'EUR',\n    tax_rate: '22',\n    payment_terms: '30',\n    invoice_prefix: 'INV',\n    quote_prefix: 'QUO',\n  });\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setSettings(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSave = e => {\n    e.preventDefault();\n    console.log('­ƒÆ¥ Billing settings saved (demo mode):', settings);\n    showNotification &&\n      showNotification('Billing settings saved successfully (demo mode)', 'success');\n  };\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h2 className='text-2xl font-bold text-gray-900'>Billing Settings</h2>\n        <p className='mt-1 text-sm text-gray-600'>Configure your billing and invoice preferences</p>\n        <div className='mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg'>\n          <p className='text-sm text-blue-700'>\n            ­ƒº¬ <strong>Demo Mode:</strong> This is a simplified version. Changes are not saved to\n            the database.\n          </p>\n        </div>\n      </div>\n\n      {/* Billing Configuration */}\n      <form onSubmit={handleSave} className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <CreditCardIcon className='h-5 w-5 mr-2' />\n          Billing Configuration\n        </h3>\n        <p className='text-sm text-gray-600 mb-6'>Set up your default billing preferences</p>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Currency */}\n          <div>\n            <label htmlFor='currency' className='block text-sm font-medium text-gray-700 mb-2'>\n              Default Currency\n            </label>\n            <select\n              id='currency'\n              name='currency'\n              value={settings.currency}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n            >\n              <option value='EUR'>EUR (Ôé¼)</option>\n              <option value='USD'>USD ($)</option>\n              <option value='GBP'>GBP (┬ú)</option>\n            </select>\n          </div>\n\n          {/* Tax Rate */}\n          <div>\n            <label htmlFor='tax_rate' className='block text-sm font-medium text-gray-700 mb-2'>\n              Default Tax Rate (%)\n            </label>\n            <input\n              type='number'\n              id='tax_rate'\n              name='tax_rate'\n              value={settings.tax_rate}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='22'\n              min='0'\n              max='100'\n              step='0.01'\n            />\n          </div>\n\n          {/* Payment Terms */}\n          <div>\n            <label htmlFor='payment_terms' className='block text-sm font-medium text-gray-700 mb-2'>\n              Payment Terms (days)\n            </label>\n            <input\n              type='number'\n              id='payment_terms'\n              name='payment_terms'\n              value={settings.payment_terms}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='30'\n              min='1'\n            />\n          </div>\n\n          {/* Invoice Prefix */}\n          <div>\n            <label\n              htmlFor='invoice_prefix'\n              className='block text-sm font-medium text-gray-700 mb-2'\n            >\n              Invoice Number Prefix\n            </label>\n            <input\n              type='text'\n              id='invoice_prefix'\n              name='invoice_prefix'\n              value={settings.invoice_prefix}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='INV'\n            />\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className='mt-6 flex justify-end'>\n          <button\n            type='submit'\n            className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n          >\n            Save Settings\n          </button>\n        </div>\n      </form>\n\n      {/* Invoice Templates */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <DocumentTextIcon className='h-5 w-5 mr-2' />\n          Invoice Templates\n        </h3>\n        <p className='text-sm text-gray-600 mb-6'>Manage your invoice and quote templates</p>\n\n        <div className='space-y-4'>\n          <div className='border border-gray-200 rounded-lg p-4'>\n            <h4 className='font-medium text-gray-900'>Default Template</h4>\n            <p className='text-sm text-gray-600 mt-1'>\n              Standard invoice template with company branding\n            </p>\n            <div className='mt-3 flex space-x-3'>\n              <button className='px-3 py-1 text-sm bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100'>\n                Preview\n              </button>\n              <button className='px-3 py-1 text-sm bg-gray-50 text-gray-700 rounded-md hover:bg-gray-100'>\n                Edit\n              </button>\n            </div>\n          </div>\n\n          <div className='border border-gray-200 rounded-lg p-4'>\n            <h4 className='font-medium text-gray-900'>Minimal Template</h4>\n            <p className='text-sm text-gray-600 mt-1'>\n              Clean, minimal design for professional invoices\n            </p>\n            <div className='mt-3 flex space-x-3'>\n              <button className='px-3 py-1 text-sm bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100'>\n                Preview\n              </button>\n              <button className='px-3 py-1 text-sm bg-gray-50 text-gray-700 rounded-md hover:bg-gray-100'>\n                Edit\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BillingSettingsFallback;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\BusinessProfileSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PhoneIcon' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EnvelopeIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GlobeAltIcon' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IdentificationIcon' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserGroupIcon' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, user]","fix":{"range":[880,886],"text":"[loadProfile, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuthBypass as useAuth } from '@hooks/useClerkBypass';\nimport { businessService } from '@lib/businessService';\nimport FileUploadField from '@components/settings/FileUploadField';\nimport {\n  BuildingOfficeIcon,\n  MapPinIcon,\n  PhoneIcon,\n  EnvelopeIcon,\n  GlobeAltIcon,\n  IdentificationIcon,\n  UserGroupIcon,\n  BriefcaseIcon,\n} from '@heroicons/react/24/outline';\n\nconst BusinessProfileSettings = ({ showNotification }) => {\n  const { t } = useTranslation('settings');\n  const { user } = useAuth();\n  const [profile, setProfile] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [uploadingLogo, setUploadingLogo] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadProfile();\n    }\n  }, [user]);\n\n  const loadProfile = async () => {\n    setLoading(true);\n    try {\n      const data = await businessService.getBusinessProfileByUserId(user.id);\n      if (data) {\n        setProfile(data.data || {});\n      }\n    } catch (error) {\n      console.error('Error loading business profile:', error);\n      showNotification(t('businessProfile.alerts.loadError'), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setProfile(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSave = async e => {\n    e.preventDefault();\n    setSaving(true);\n    try {\n      await businessService.updateBusinessProfile(user.id, profile);\n      showNotification(t('businessProfile.alerts.updateSuccess'), 'success');\n    } catch (error) {\n      console.error('Error saving business profile:', error);\n      showNotification(t('businessProfile.alerts.updateFailure'), 'error');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleLogoUpload = async file => {\n    if (!file) return;\n    setUploadingLogo(true);\n    try {\n      const logoUrl = await businessService.uploadCompanyLogo(user.id, file);\n      const updatedProfile = { ...profile, logo_url: logoUrl };\n      setProfile(updatedProfile);\n      await businessService.updateBusinessProfile(user.id, updatedProfile);\n      showNotification(t('businessProfile.alerts.logoUpdateSuccess'), 'success');\n    } catch (error) {\n      console.error('Error uploading logo:', error);\n      showNotification(t('businessProfile.alerts.logoUpdateFailure'), 'error');\n    } finally {\n      setUploadingLogo(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className='flex justify-center items-center p-8'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSave} className='space-y-8'>\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <BuildingOfficeIcon className='h-5 w-5 mr-2' />\n          {t('businessProfile.companyInfo.title')}\n        </h3>\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          <div>\n            <label htmlFor='company_name' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.companyName.label')}\n            </label>\n            <input\n              type='text'\n              name='company_name'\n              id='company_name'\n              value={profile.company_name || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n          <div>\n            <label htmlFor='tax_id' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.taxId.label')}\n            </label>\n            <input\n              type='text'\n              name='tax_id'\n              id='tax_id'\n              value={profile.tax_id || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <BriefcaseIcon className='h-5 w-5 mr-2' />\n          {t('businessProfile.businessDetails.title')}\n        </h3>\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          <div>\n            <label htmlFor='business_type' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.businessType.label')}\n            </label>\n            <input\n              type='text'\n              name='business_type'\n              id='business_type'\n              value={profile.business_type || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n          <div>\n            <label htmlFor='industry' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.industry.label')}\n            </label>\n            <input\n              type='text'\n              name='industry'\n              id='industry'\n              value={profile.industry || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n          <div>\n            <label htmlFor='employee_count' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.employeeCount.label')}\n            </label>\n            <input\n              type='number'\n              name='employee_count'\n              id='employee_count'\n              value={profile.employee_count || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <MapPinIcon className='h-5 w-5 mr-2' />\n          {t('businessProfile.contactInfo.title')}\n        </h3>\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          <div>\n            <label htmlFor='address' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.address.label')}\n            </label>\n            <input\n              type='text'\n              name='address'\n              id='address'\n              value={profile.address || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n          <div>\n            <label htmlFor='phone' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.phone.label')}\n            </label>\n            <input\n              type='text'\n              name='phone'\n              id='phone'\n              value={profile.phone || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n          <div>\n            <label htmlFor='email' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.email.label')}\n            </label>\n            <input\n              type='email'\n              name='email'\n              id='email'\n              value={profile.email || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n          <div>\n            <label htmlFor='website' className='block text-sm font-medium text-gray-700'>\n              {t('businessProfile.website.label')}\n            </label>\n            <input\n              type='url'\n              name='website'\n              id='website'\n              value={profile.website || ''}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4'>\n          {t('businessProfile.logo.title')}\n        </h3>\n        <FileUploadField\n          label={t('businessProfile.logo.label')}\n          onFileUpload={handleLogoUpload}\n          currentImageUrl={profile.logo_url}\n          storagePath='company_logos'\n          disabled={uploadingLogo}\n          loading={uploadingLogo}\n        />\n      </div>\n\n      <div className='flex justify-end'>\n        <button\n          type='submit'\n          disabled={saving}\n          className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300'\n        >\n          {saving ? t('common.saving') : t('common.saveChanges')}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default BusinessProfileSettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\CompanySection.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profileData' is assigned a value but never used.","line":16,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSaving' is assigned a value but never used.","line":17,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveProfile' is assigned a value but never used.","line":19,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleProfileChange' is assigned a value but never used.","line":20,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isUploading' is assigned a value but never used.","line":24,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uploadProgress' is assigned a value but never used.","line":25,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uploadCompanyLogo' is assigned a value but never used.","line":27,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clearError' is assigned a value but never used.","line":28,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '@lib/supabaseClient';\nimport SettingsFormSection from '@components/settings/SettingsFormSection';\nimport FileUploadField from '@components/settings/FileUploadField';\nimport { useProfile } from '@hooks/useProfile';\nimport { useFileUpload } from '@hooks/useFileUpload';\n\nconst CompanySection = ({ user, company, onCompanyUpdate, onImageUpload }) => {\n  const { t } = useTranslation('settings');\n  const [localCompany, setLocalCompany] = useState(company || {});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const {\n    profileData,\n    isSaving,\n    error: profileError,\n    saveProfile,\n    handleProfileChange,\n  } = useProfile();\n\n  const {\n    isUploading,\n    uploadProgress,\n    error: uploadError,\n    uploadCompanyLogo,\n    clearError,\n  } = useFileUpload();\n\n  useEffect(() => {\n    setLocalCompany(company || {});\n  }, [company]);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setLocalCompany(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (!user) {\n        throw new Error(t('company.alerts.userNotAuthenticated'));\n      }\n\n      const updates = {\n        ...localCompany,\n        updated_at: new Date(),\n      };\n\n      const { error: updateError } = await supabase\n        .from('companies')\n        .update(updates)\n        .eq('id', company.id);\n\n      if (updateError) {\n        throw updateError;\n      }\n\n      onCompanyUpdate(updates);\n      alert(t('company.alerts.updateSuccess'));\n    } catch (error) {\n      console.error(t('company.alerts.updateError'), error);\n      setError(t('company.alerts.updateFailure'));\n      alert(t('company.alerts.genericError') + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLogoUpload = async file => {\n    if (!file) return;\n    setLoading(true);\n    try {\n      const { data: uploadData, error: uploadError } = await onImageUpload('logo', file);\n      if (uploadError) throw uploadError;\n\n      const updatedCompany = { ...localCompany, logo_url: uploadData.publicUrl };\n      setLocalCompany(updatedCompany);\n      onCompanyUpdate(updatedCompany);\n\n      alert(t('company.alerts.logoUpdateSuccess'));\n    } catch (error) {\n      console.error(t('company.alerts.logoUpdateError'), error);\n      alert(t('company.alerts.logoUpdateFailure'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFaviconUpload = async file => {\n    if (!file) return;\n    setLoading(true);\n    try {\n      const { data: uploadData, error: uploadError } = await onImageUpload('favicon', file);\n      if (uploadError) throw uploadError;\n\n      const updatedCompany = { ...localCompany, favicon_url: uploadData.publicUrl };\n      setLocalCompany(updatedCompany);\n      onCompanyUpdate(updatedCompany);\n\n      alert(t('company.alerts.faviconUpdateSuccess'));\n    } catch (error) {\n      console.error(t('company.alerts.faviconUpdateError'), error);\n      alert(t('company.alerts.faviconUpdateFailure'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fields = [\n    {\n      id: 'name',\n      name: 'name',\n      label: t('company.name.label'),\n      type: 'text',\n      value: localCompany.name || '',\n    },\n    {\n      id: 'address',\n      name: 'address',\n      label: t('company.address.label'),\n      type: 'text',\n      value: localCompany.address || '',\n    },\n    {\n      id: 'city',\n      name: 'city',\n      label: t('company.city.label'),\n      type: 'text',\n      value: localCompany.city || '',\n    },\n    {\n      id: 'country',\n      name: 'country',\n      label: t('company.country.label'),\n      type: 'text',\n      value: localCompany.country || '',\n    },\n    {\n      id: 'vat_number',\n      name: 'vat_number',\n      label: t('company.vatNumber.label'),\n      type: 'text',\n      value: localCompany.vat_number || '',\n    },\n    {\n      id: 'phone',\n      name: 'phone',\n      label: t('company.phone.label'),\n      type: 'text',\n      value: localCompany.phone || '',\n    },\n    {\n      id: 'email',\n      name: 'email',\n      label: t('company.email.label'),\n      type: 'email',\n      value: localCompany.email || '',\n    },\n    {\n      id: 'website',\n      name: 'website',\n      label: t('company.website.label'),\n      type: 'url',\n      value: localCompany.website || '',\n    },\n  ];\n\n  return (\n    <div id='company' className='bg-white p-4 rounded-lg shadow-md dark:bg-gray-800'>\n      <h3 className='text-lg font-semibold mb-4 text-gray-900 dark:text-white'>\n        {t('company.title')}\n      </h3>\n      <SettingsFormSection\n        fields={fields}\n        formData={localCompany}\n        onInputChange={handleInputChange}\n        onFormSubmit={handleFormSubmit}\n        loading={loading}\n        submitButtonText={t('company.buttons.save')}\n      />\n\n      {error && <p className='text-red-500 text-sm mt-2'>{error}</p>}\n\n      <div className='mt-6 grid grid-cols-1 md:grid-cols-2 gap-6'>\n        <FileUploadField\n          label={t('company.logo.title')}\n          onFileUpload={handleLogoUpload}\n          currentImageUrl={localCompany.logo_url}\n          storagePath='company_logos'\n          disabled={loading}\n        />\n        <FileUploadField\n          label={t('company.favicon.title')}\n          onFileUpload={handleFaviconUpload}\n          currentImageUrl={localCompany.favicon_url}\n          storagePath='company_favicons'\n          disabled={loading}\n        />\n      </div>\n\n      {/* Error Display */}\n      {(profileError || uploadError) && (\n        <div className='mb-6 p-4 bg-red-50 border border-red-200 rounded-md'>\n          <p className='text-sm text-red-600'>{profileError || uploadError}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CompanySection;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\CompanySettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompanyData'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loadCompanyData, user]","fix":{"range":[1092,1115],"text":"[isAuthenticated, loadCompanyData, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":44,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":44,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":63,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":63,"endColumn":90},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":66,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":66,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":83,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":83,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":86,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":103,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":103,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":106,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":106,"endColumn":95}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuthBypass as useAuth } from '@hooks/useClerkBypass';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport {\n  BuildingOfficeIcon,\n  MapPinIcon,\n  PhoneIcon,\n  EnvelopeIcon,\n  GlobeAltIcon,\n  IdentificationIcon,\n} from '@heroicons/react/24/outline';\nimport { supabase } from '@lib/supabaseClient';\nimport { businessService } from '@lib/businessService';\nimport FileUploadField from '@components/settings/FileUploadField';\n\nexport default function CompanySettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useAuth();\n  const { isAuthenticated } = useClerkAuth();\n  const [company, setCompany] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [uploadingLogo, setUploadingLogo] = useState(false);\n  const [uploadingFavicon, setUploadingFavicon] = useState(false);\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadCompanyData();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadCompanyData = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      const profile = await businessService.getBusinessProfile(user.id);\n      if (profile) {\n        setCompany(profile);\n      }\n    } catch (error) {\n      console.error('Error loading company data:', error);\n      showNotification && showNotification(t('company.alerts.loadError'), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setCompany(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSave = async e => {\n    e.preventDefault();\n    if (!user) return;\n\n    setSaving(true);\n    try {\n      const updatedProfile = await businessService.updateBusinessProfile(user.id, company);\n      setCompany(updatedProfile);\n      showNotification && showNotification(t('company.alerts.updateSuccess'), 'success');\n    } catch (error) {\n      console.error('Error updating company:', error);\n      showNotification && showNotification(t('company.alerts.updateFailure'), 'error');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleLogoUpload = async file => {\n    if (!file) return;\n\n    setUploadingLogo(true);\n    try {\n      const logoUrl = await businessService.uploadCompanyLogo(user.id, file);\n      const updatedCompany = { ...company, logo_url: logoUrl };\n      setCompany(updatedCompany);\n\n      // Save to database\n      await businessService.updateBusinessProfile(user.id, updatedCompany);\n      showNotification && showNotification(t('company.alerts.logoUpdateSuccess'), 'success');\n    } catch (error) {\n      console.error('Error uploading logo:', error);\n      showNotification && showNotification(t('company.alerts.logoUpdateFailure'), 'error');\n    } finally {\n      setUploadingLogo(false);\n    }\n  };\n\n  const handleFaviconUpload = async file => {\n    if (!file) return;\n\n    setUploadingFavicon(true);\n    try {\n      const faviconUrl = await businessService.uploadCompanyFavicon(user.id, file);\n      const updatedCompany = { ...company, favicon_url: faviconUrl };\n      setCompany(updatedCompany);\n\n      // Save to database\n      await businessService.updateBusinessProfile(user.id, updatedCompany);\n      showNotification && showNotification(t('company.alerts.faviconUpdateSuccess'), 'success');\n    } catch (error) {\n      console.error('Error uploading favicon:', error);\n      showNotification && showNotification(t('company.alerts.faviconUpdateFailure'), 'error');\n    } finally {\n      setUploadingFavicon(false);\n    }\n  };\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access company settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className='flex justify-center items-center p-8'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h2 className='text-2xl font-bold text-gray-900'>{t('company.title')}</h2>\n        <p className='mt-1 text-sm text-gray-600'>{t('company.description')}</p>\n      </div>\n\n      {/* Company Branding */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <BuildingOfficeIcon className='h-5 w-5 mr-2' />\n          {t('company.branding.title')}\n        </h3>\n        <p className='text-sm text-gray-600 mb-6'>{t('company.branding.description')}</p>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          <FileUploadField\n            label={t('company.logo.title')}\n            onFileUpload={handleLogoUpload}\n            currentImageUrl={company.logo_url}\n            storagePath='company_logos'\n            disabled={uploadingLogo}\n            loading={uploadingLogo}\n            acceptedFormats={['image/png', 'image/jpeg', 'image/svg+xml']}\n            maxSize={5 * 1024 * 1024} // 5MB\n          />\n          <FileUploadField\n            label={t('company.favicon.title')}\n            onFileUpload={handleFaviconUpload}\n            currentImageUrl={company.favicon_url}\n            storagePath='company_favicons'\n            disabled={uploadingFavicon}\n            loading={uploadingFavicon}\n            acceptedFormats={['image/png', 'image/x-icon', 'image/vnd.microsoft.icon']}\n            maxSize={1 * 1024 * 1024} // 1MB\n          />\n        </div>\n      </div>\n\n      {/* Company Information */}\n      <form onSubmit={handleSave} className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <IdentificationIcon className='h-5 w-5 mr-2' />\n          {t('company.information.title')}\n        </h3>\n        <p className='text-sm text-gray-600 mb-6'>{t('company.information.description')}</p>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Company Name */}\n          <div>\n            <label htmlFor='name' className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('company.name.label')} *\n            </label>\n            <input\n              type='text'\n              id='name'\n              name='name'\n              value={company.name || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.name.placeholder')}\n              required\n            />\n          </div>\n\n          {/* VAT Number */}\n          <div>\n            <label htmlFor='vat_number' className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('company.vatNumber.label')}\n            </label>\n            <input\n              type='text'\n              id='vat_number'\n              name='vat_number'\n              value={company.vat_number || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.vatNumber.placeholder')}\n            />\n          </div>\n\n          {/* Address */}\n          <div className='md:col-span-2'>\n            <label\n              htmlFor='address'\n              className='block text-sm font-medium text-gray-700 mb-2 flex items-center'\n            >\n              <MapPinIcon className='h-4 w-4 mr-1' />\n              {t('company.address.label')}\n            </label>\n            <input\n              type='text'\n              id='address'\n              name='address'\n              value={company.address || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.address.placeholder')}\n            />\n          </div>\n\n          {/* City */}\n          <div>\n            <label htmlFor='city' className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('company.city.label')}\n            </label>\n            <input\n              type='text'\n              id='city'\n              name='city'\n              value={company.city || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.city.placeholder')}\n            />\n          </div>\n\n          {/* Country */}\n          <div>\n            <label htmlFor='country' className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('company.country.label')}\n            </label>\n            <input\n              type='text'\n              id='country'\n              name='country'\n              value={company.country || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.country.placeholder')}\n            />\n          </div>\n\n          {/* Phone */}\n          <div>\n            <label\n              htmlFor='phone'\n              className='block text-sm font-medium text-gray-700 mb-2 flex items-center'\n            >\n              <PhoneIcon className='h-4 w-4 mr-1' />\n              {t('company.phone.label')}\n            </label>\n            <input\n              type='tel'\n              id='phone'\n              name='phone'\n              value={company.phone || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.phone.placeholder')}\n            />\n          </div>\n\n          {/* Email */}\n          <div>\n            <label\n              htmlFor='email'\n              className='block text-sm font-medium text-gray-700 mb-2 flex items-center'\n            >\n              <EnvelopeIcon className='h-4 w-4 mr-1' />\n              {t('company.email.label')}\n            </label>\n            <input\n              type='email'\n              id='email'\n              name='email'\n              value={company.email || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.email.placeholder')}\n            />\n          </div>\n\n          {/* Website */}\n          <div className='md:col-span-2'>\n            <label\n              htmlFor='website'\n              className='block text-sm font-medium text-gray-700 mb-2 flex items-center'\n            >\n              <GlobeAltIcon className='h-4 w-4 mr-1' />\n              {t('company.website.label')}\n            </label>\n            <input\n              type='url'\n              id='website'\n              name='website'\n              value={company.website || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder={t('company.website.placeholder')}\n            />\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className='mt-6 flex justify-end'>\n          <button\n            type='submit'\n            disabled={saving}\n            className='px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center'\n          >\n            {saving ? (\n              <>\n                <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2'></div>\n                {t('common.saving')}\n              </>\n            ) : (\n              t('company.buttons.save')\n            )}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\CompanySettingsFallback.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BuildingOfficeIcon' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used.","line":6,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[732,795],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":29,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":30,"endColumn":86}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { BuildingOfficeIcon, IdentificationIcon, MapPinIcon } from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\n\nconst CompanySettingsFallback = ({ showNotification }) => {\n  const { t } = useTranslation('settings');\n  const [company, setCompany] = useState({\n    name: 'Demo Company',\n    vat_number: '',\n    address: '',\n    city: '',\n    postal_code: '',\n    country: '',\n    phone: '',\n    email: '',\n    website: '',\n    logo_url: '',\n    favicon_url: '',\n  });\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setCompany(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSave = e => {\n    e.preventDefault();\n    console.log('­ƒÆ¥ Company settings saved (demo mode):', company);\n    showNotification &&\n      showNotification('Company settings saved successfully (demo mode)', 'success');\n  };\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h2 className='text-2xl font-bold text-gray-900'>Company Settings</h2>\n        <p className='mt-1 text-sm text-gray-600'>Manage your company information and branding</p>\n        <div className='mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg'>\n          <p className='text-sm text-blue-700'>\n            ­ƒº¬ <strong>Demo Mode:</strong> This is a simplified version. Changes are not saved to\n            the database.\n          </p>\n        </div>\n      </div>\n\n      {/* Company Information */}\n      <form onSubmit={handleSave} className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <IdentificationIcon className='h-5 w-5 mr-2' />\n          Company Information\n        </h3>\n        <p className='text-sm text-gray-600 mb-6'>\n          Update your company details and contact information\n        </p>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Company Name */}\n          <div>\n            <label htmlFor='name' className='block text-sm font-medium text-gray-700 mb-2'>\n              Company Name *\n            </label>\n            <input\n              type='text'\n              id='name'\n              name='name'\n              value={company.name || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter company name'\n              required\n            />\n          </div>\n\n          {/* VAT Number */}\n          <div>\n            <label htmlFor='vat_number' className='block text-sm font-medium text-gray-700 mb-2'>\n              VAT Number\n            </label>\n            <input\n              type='text'\n              id='vat_number'\n              name='vat_number'\n              value={company.vat_number || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter VAT number'\n            />\n          </div>\n\n          {/* Address */}\n          <div className='md:col-span-2'>\n            <label\n              htmlFor='address'\n              className='block text-sm font-medium text-gray-700 mb-2 flex items-center'\n            >\n              <MapPinIcon className='h-4 w-4 mr-1' />\n              Address\n            </label>\n            <input\n              type='text'\n              id='address'\n              name='address'\n              value={company.address || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter company address'\n            />\n          </div>\n\n          {/* City */}\n          <div>\n            <label htmlFor='city' className='block text-sm font-medium text-gray-700 mb-2'>\n              City\n            </label>\n            <input\n              type='text'\n              id='city'\n              name='city'\n              value={company.city || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter city'\n            />\n          </div>\n\n          {/* Postal Code */}\n          <div>\n            <label htmlFor='postal_code' className='block text-sm font-medium text-gray-700 mb-2'>\n              Postal Code\n            </label>\n            <input\n              type='text'\n              id='postal_code'\n              name='postal_code'\n              value={company.postal_code || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter postal code'\n            />\n          </div>\n\n          {/* Email */}\n          <div>\n            <label htmlFor='email' className='block text-sm font-medium text-gray-700 mb-2'>\n              Email\n            </label>\n            <input\n              type='email'\n              id='email'\n              name='email'\n              value={company.email || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter company email'\n            />\n          </div>\n\n          {/* Phone */}\n          <div>\n            <label htmlFor='phone' className='block text-sm font-medium text-gray-700 mb-2'>\n              Phone\n            </label>\n            <input\n              type='tel'\n              id='phone'\n              name='phone'\n              value={company.phone || ''}\n              onChange={handleInputChange}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'\n              placeholder='Enter phone number'\n            />\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className='mt-6 flex justify-end'>\n          <button\n            type='submit'\n            className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n          >\n            Save Changes\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CompanySettingsFallback;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\DataExportSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\DataExportSettingsFallback.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":12,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":12,"endColumn":14,"suggestions":[{"fix":{"range":[296,372],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":16,"suggestions":[{"fix":{"range":[677,807],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":34,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":35,"endColumn":91}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  ArrowDownTrayIcon,\n  DocumentArrowDownIcon,\n  TableCellsIcon,\n  DocumentTextIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function DataExportSettingsFallback({ showNotification }) {\n  console.log('­ƒôñ DataExportSettingsFallback: Component mounted - Demo Mode');\n\n  const [exportSettings, setExportSettings] = useState({\n    format: 'csv',\n    includeHeaders: true,\n    dateRange: 'last_30_days',\n    includeDeletedRecords: false,\n    compression: false,\n  });\n\n  const [isExporting, setIsExporting] = useState(false);\n\n  const handleExport = async dataType => {\n    console.log('­ƒôñ DataExportSettingsFallback: Exporting data (Demo Mode)', {\n      dataType,\n      settings: exportSettings,\n    });\n    setIsExporting(true);\n\n    // Simulate export process\n    setTimeout(() => {\n      setIsExporting(false);\n      showNotification &&\n        showNotification(`${dataType} data exported successfully (Demo Mode)`, 'success');\n    }, 2000);\n  };\n\n  const exportOptions = [\n    {\n      id: 'clients',\n      name: 'Client Data',\n      description: 'Export all client information and contact details',\n      icon: TableCellsIcon,\n      estimatedSize: '2.3 MB',\n    },\n    {\n      id: 'invoices',\n      name: 'Invoice Data',\n      description: 'Export invoices, payments, and billing information',\n      icon: DocumentTextIcon,\n      estimatedSize: '5.7 MB',\n    },\n    {\n      id: 'transactions',\n      name: 'Transaction History',\n      description: 'Export all financial transactions and records',\n      icon: DocumentArrowDownIcon,\n      estimatedSize: '1.8 MB',\n    },\n    {\n      id: 'analytics',\n      name: 'Analytics Data',\n      description: 'Export reports and analytics data',\n      icon: ArrowDownTrayIcon,\n      estimatedSize: '800 KB',\n    },\n  ];\n\n  return (\n    <div className='space-y-6'>\n      {/* Demo Mode Banner */}\n      <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>\n        <div className='flex items-center'>\n          <ExclamationTriangleIcon className='h-5 w-5 text-blue-600 mr-2' />\n          <p className='text-blue-800 font-medium'>Demo Mode - Data Export Settings</p>\n        </div>\n        <p className='text-blue-700 text-sm mt-1'>\n          This is a simplified version without database dependencies. Export functions are\n          simulated.\n        </p>\n      </div>\n\n      {/* Export Settings */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-xl font-semibold text-gray-900 mb-4'>Export Settings</h2>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n          {/* Export Format */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>Export Format</label>\n            <select\n              value={exportSettings.format}\n              onChange={e => setExportSettings({ ...exportSettings, format: e.target.value })}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n            >\n              <option value='csv'>CSV (Comma Separated Values)</option>\n              <option value='xlsx'>Excel (XLSX)</option>\n              <option value='json'>JSON</option>\n              <option value='pdf'>PDF Report</option>\n            </select>\n          </div>\n\n          {/* Date Range */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>Date Range</label>\n            <select\n              value={exportSettings.dateRange}\n              onChange={e => setExportSettings({ ...exportSettings, dateRange: e.target.value })}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n            >\n              <option value='last_7_days'>Last 7 Days</option>\n              <option value='last_30_days'>Last 30 Days</option>\n              <option value='last_90_days'>Last 90 Days</option>\n              <option value='last_year'>Last Year</option>\n              <option value='all_time'>All Time</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Export Options */}\n        <div className='mt-6 space-y-4'>\n          <div className='flex items-center'>\n            <input\n              id='include-headers'\n              type='checkbox'\n              checked={exportSettings.includeHeaders}\n              onChange={e =>\n                setExportSettings({ ...exportSettings, includeHeaders: e.target.checked })\n              }\n              className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n            />\n            <label htmlFor='include-headers' className='ml-2 block text-sm text-gray-700'>\n              Include column headers\n            </label>\n          </div>\n\n          <div className='flex items-center'>\n            <input\n              id='include-deleted'\n              type='checkbox'\n              checked={exportSettings.includeDeletedRecords}\n              onChange={e =>\n                setExportSettings({ ...exportSettings, includeDeletedRecords: e.target.checked })\n              }\n              className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n            />\n            <label htmlFor='include-deleted' className='ml-2 block text-sm text-gray-700'>\n              Include deleted records\n            </label>\n          </div>\n\n          <div className='flex items-center'>\n            <input\n              id='compression'\n              type='checkbox'\n              checked={exportSettings.compression}\n              onChange={e =>\n                setExportSettings({ ...exportSettings, compression: e.target.checked })\n              }\n              className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n            />\n            <label htmlFor='compression' className='ml-2 block text-sm text-gray-700'>\n              Compress files (ZIP)\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {/* Export Options */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-xl font-semibold text-gray-900 mb-4'>Available Exports</h2>\n\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n          {exportOptions.map(option => (\n            <div\n              key={option.id}\n              className='border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors'\n            >\n              <div className='flex items-start justify-between'>\n                <div className='flex items-start space-x-3'>\n                  <option.icon className='h-6 w-6 text-gray-400 mt-1' />\n                  <div>\n                    <h3 className='font-medium text-gray-900'>{option.name}</h3>\n                    <p className='text-sm text-gray-500 mt-1'>{option.description}</p>\n                    <p className='text-xs text-gray-400 mt-2'>\n                      Estimated size: {option.estimatedSize}\n                    </p>\n                  </div>\n                </div>\n                <button\n                  onClick={() => handleExport(option.name)}\n                  disabled={isExporting}\n                  className='px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors'\n                >\n                  {isExporting ? 'Exporting...' : 'Export'}\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Export History */}\n      <div className='bg-white rounded-lg shadow p-6'>\n        <h2 className='text-xl font-semibold text-gray-900 mb-4'>Recent Exports</h2>\n\n        <div className='space-y-3'>\n          {[\n            { name: 'Client Data Export', date: '2024-01-15', size: '2.3 MB', status: 'completed' },\n            { name: 'Invoice Report', date: '2024-01-14', size: '5.7 MB', status: 'completed' },\n            { name: 'Analytics Data', date: '2024-01-13', size: '800 KB', status: 'completed' },\n          ].map((export_item, index) => (\n            <div\n              key={index}\n              className='flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0'\n            >\n              <div>\n                <p className='font-medium text-gray-900'>{export_item.name}</p>\n                <p className='text-sm text-gray-500'>\n                  {export_item.date} ÔÇó {export_item.size}\n                </p>\n              </div>\n              <div className='flex items-center space-x-2'>\n                <CheckCircleIcon className='h-4 w-4 text-green-500' />\n                <span className='text-sm text-green-600 capitalize'>{export_item.status}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\EmailSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircleIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editingTemplate' is assigned a value but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newTemplateModal' is assigned a value but never used.","line":41,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEmailData'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loadEmailData, user]","fix":{"range":[1880,1903],"text":"[isAuthenticated, loadEmailData, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSaveTemplate' is assigned a value but never used.","line":138,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport {\n  EnvelopeIcon,\n  PencilIcon,\n  EyeIcon,\n  CheckCircleIcon,\n  XMarkIcon,\n  PlusIcon,\n  TrashIcon,\n  Cog6ToothIcon,\n  ChartBarIcon,\n  PlayIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useTranslation } from 'react-i18next';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport Logger from '@utils/Logger';\nimport EmailSettingsService from '@lib/emailSettingsService';\n\nexport default function EmailSettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useUser();\n  const { isAuthenticated } = useClerkAuth();\n\n  // Component state\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('notifications');\n\n  // Email settings state\n  const [emailSettings, setEmailSettings] = useState(null);\n  const [notificationPreferences, setNotificationPreferences] = useState(null);\n  const [emailTemplates, setEmailTemplates] = useState([]);\n  const [emailActivity, setEmailActivity] = useState([]);\n  const [emailStats, setEmailStats] = useState(null);\n\n  // UI state\n  const [editingTemplate, setEditingTemplate] = useState(null);\n  const [previewTemplate, setPreviewTemplate] = useState(null);\n  const [newTemplateModal, setNewTemplateModal] = useState(false);\n  const [testEmailModal, setTestEmailModal] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n\n  // Form state\n  const [testEmail, setTestEmail] = useState(user?.emailAddresses?.[0]?.emailAddress || '');\n  const [smtpTestEmail, setSmtpTestEmail] = useState(user?.emailAddresses?.[0]?.emailAddress || '');\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadEmailData();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadEmailData = async () => {\n    try {\n      setIsLoading(true);\n\n      const [settings, preferences, templates, activity, stats] = await Promise.all([\n        EmailSettingsService.getEmailSettings(),\n        EmailSettingsService.getNotificationPreferences(),\n        EmailSettingsService.getEmailTemplates(),\n        EmailSettingsService.getEmailActivity({ limit: 50 }),\n        EmailSettingsService.getEmailStats('30d'),\n      ]);\n\n      setEmailSettings(settings);\n      setNotificationPreferences(preferences);\n      setEmailTemplates(templates);\n      setEmailActivity(activity);\n      setEmailStats(stats);\n\n      Logger.info('Email data loaded successfully');\n    } catch (error) {\n      Logger.error('Error loading email data:', error);\n      showNotification?.('Error loading email settings', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSaveEmailSettings = async () => {\n    try {\n      setIsSaving(true);\n\n      const validation = EmailSettingsService.validateSmtpSettings(emailSettings);\n      if (!validation.isValid) {\n        showNotification?.(validation.errors[0], 'error');\n        return;\n      }\n\n      await EmailSettingsService.saveEmailSettings(emailSettings);\n      showNotification?.('Email settings saved successfully', 'success');\n      Logger.info('Email settings saved');\n    } catch (error) {\n      Logger.error('Error saving email settings:', error);\n      showNotification?.('Error saving email settings', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleSaveNotificationPreferences = async () => {\n    try {\n      setIsSaving(true);\n      await EmailSettingsService.saveNotificationPreferences(notificationPreferences);\n      showNotification?.('Notification preferences saved successfully', 'success');\n      Logger.info('Notification preferences saved');\n    } catch (error) {\n      Logger.error('Error saving notification preferences:', error);\n      showNotification?.('Error saving notification preferences', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTestEmailConfiguration = async () => {\n    try {\n      setIsSaving(true);\n      const result = await EmailSettingsService.testEmailConfiguration(\n        smtpTestEmail,\n        emailSettings,\n      );\n\n      if (result.success) {\n        showNotification?.('Test email sent successfully! Check your inbox.', 'success');\n      } else {\n        showNotification?.(result.error || 'Test email failed', 'error');\n      }\n    } catch (error) {\n      Logger.error('Error testing email configuration:', error);\n      showNotification?.('Error testing email configuration', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleSaveTemplate = async templateData => {\n    try {\n      setIsSaving(true);\n\n      const validation = EmailSettingsService.validateEmailTemplate(templateData);\n      if (!validation.isValid) {\n        showNotification?.(validation.errors[0], 'error');\n        return;\n      }\n\n      await EmailSettingsService.saveEmailTemplate(templateData);\n      await loadEmailData(); // Reload to get updated templates\n\n      showNotification?.('Email template saved successfully', 'success');\n      setEditingTemplate(null);\n      setNewTemplateModal(false);\n    } catch (error) {\n      Logger.error('Error saving email template:', error);\n      showNotification?.('Error saving email template', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDeleteTemplate = async templateKey => {\n    try {\n      if (!window.confirm('Are you sure you want to delete this template?')) {\n        return;\n      }\n\n      await EmailSettingsService.deleteEmailTemplate(templateKey);\n      await loadEmailData(); // Reload to get updated templates\n\n      showNotification?.('Email template deleted successfully', 'success');\n    } catch (error) {\n      Logger.error('Error deleting email template:', error);\n      showNotification?.('Error deleting email template', 'error');\n    }\n  };\n\n  const handlePreviewTemplate = async templateKey => {\n    try {\n      const preview = await EmailSettingsService.previewEmailTemplate(templateKey);\n      setPreviewTemplate(preview);\n    } catch (error) {\n      Logger.error('Error previewing email template:', error);\n      showNotification?.('Error previewing email template', 'error');\n    }\n  };\n\n  const handleSendTestEmail = async templateKey => {\n    try {\n      setIsSaving(true);\n      const result = await EmailSettingsService.sendTestEmail(templateKey, testEmail);\n\n      if (result.success) {\n        showNotification?.('Test email sent successfully!', 'success');\n        setTestEmailModal(null);\n        await loadEmailData(); // Reload activity\n      } else {\n        showNotification?.('Error sending test email', 'error');\n      }\n    } catch (error) {\n      Logger.error('Error sending test email:', error);\n      showNotification?.('Error sending test email', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Render providers configuration tab\n  const renderProvidersTab = () => (\n    <div className='space-y-6'>\n      <div>\n        <h4 className='text-lg font-medium text-gray-900 mb-4'>\n          {t('email.providers.title', 'Email Provider Configuration')}\n        </h4>\n        <p className='text-sm text-gray-600 mb-6'>\n          {t(\n            'email.providers.description',\n            'Configure your email service provider for sending emails.',\n          )}\n        </p>\n      </div>\n\n      {/* Provider Selection */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4'>Email Provider</h5>\n        <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n          {Object.entries(EmailSettingsService.providers).map(([key, provider]) => (\n            <div\n              key={key}\n              onClick={() => setEmailSettings({ ...emailSettings, provider: key })}\n              className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${\n                emailSettings?.provider === key\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n            >\n              <div className='text-2xl mb-2'>{provider.icon}</div>\n              <div className='font-medium text-gray-900'>{provider.name}</div>\n              <div className='text-sm text-gray-600'>{provider.description}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Provider Configuration */}\n      {emailSettings?.provider === 'smtp' && (\n        <div className='bg-white border border-gray-200 rounded-lg p-6'>\n          <h5 className='text-md font-medium text-gray-900 mb-4'>SMTP Configuration</h5>\n          <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>SMTP Host</label>\n              <input\n                type='text'\n                value={emailSettings.smtp_host || ''}\n                onChange={e => setEmailSettings({ ...emailSettings, smtp_host: e.target.value })}\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='smtp.gmail.com'\n              />\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>SMTP Port</label>\n              <input\n                type='number'\n                value={emailSettings.smtp_port || 587}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_port: parseInt(e.target.value) })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              />\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>Username</label>\n              <input\n                type='text'\n                value={emailSettings.smtp_username || ''}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_username: e.target.value })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='your-email@gmail.com'\n              />\n            </div>\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>Password</label>\n              <input\n                type='password'\n                value={emailSettings.smtp_password || ''}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_password: e.target.value })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                placeholder='your-app-password'\n              />\n            </div>\n          </div>\n\n          <div className='mt-4'>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>Encryption</label>\n            <select\n              value={emailSettings.smtp_encryption || 'tls'}\n              onChange={e =>\n                setEmailSettings({ ...emailSettings, smtp_encryption: e.target.value })\n              }\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n            >\n              <option value='tls'>TLS</option>\n              <option value='ssl'>SSL</option>\n              <option value='none'>None</option>\n            </select>\n          </div>\n        </div>\n      )}\n\n      {/* From Address Configuration */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4'>From Address</h5>\n        <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>From Email</label>\n            <input\n              type='email'\n              value={emailSettings?.from_email || ''}\n              onChange={e => setEmailSettings({ ...emailSettings, from_email: e.target.value })}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              placeholder='noreply@yourcompany.com'\n            />\n          </div>\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>From Name</label>\n            <input\n              type='text'\n              value={emailSettings?.from_name || ''}\n              onChange={e => setEmailSettings({ ...emailSettings, from_name: e.target.value })}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              placeholder='Your Company'\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Test Configuration */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4'>Test Configuration</h5>\n        <div className='flex items-center space-x-4'>\n          <div className='flex-1'>\n            <input\n              type='email'\n              value={smtpTestEmail}\n              onChange={e => setSmtpTestEmail(e.target.value)}\n              className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n              placeholder='test@example.com'\n            />\n          </div>\n          <button\n            onClick={handleTestEmailConfiguration}\n            disabled={isSaving || !smtpTestEmail}\n            className='bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 disabled:opacity-50 flex items-center space-x-2'\n          >\n            <PlayIcon className='h-4 w-4' />\n            <span>{isSaving ? 'Testing...' : 'Send Test'}</span>\n          </button>\n        </div>\n      </div>\n\n      <div className='flex justify-end'>\n        <button\n          onClick={handleSaveEmailSettings}\n          disabled={isSaving}\n          className='bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50'\n        >\n          {isSaving ? 'Saving...' : 'Save Email Settings'}\n        </button>\n      </div>\n    </div>\n  );\n\n  // Render notifications preferences tab\n  const renderNotificationSettings = () => (\n    <div className='space-y-6'>\n      <div>\n        <h4 className='text-lg font-medium text-gray-900 mb-4'>\n          {t('email.notifications.title', 'Email Notifications')}\n        </h4>\n        <p className='text-sm text-gray-600 mb-6'>\n          {t(\n            'email.notifications.description',\n            'Choose which email notifications you want to receive.',\n          )}\n        </p>\n      </div>\n\n      {/* Invoice Notifications */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4 flex items-center'>\n          <span className='mr-2'>­ƒº¥</span> Invoice Notifications\n        </h5>\n        <div className='space-y-4'>\n          {[\n            {\n              key: 'invoice_sent',\n              label: 'Invoice Sent',\n              desc: 'When an invoice is sent to a client',\n            },\n            {\n              key: 'invoice_viewed',\n              label: 'Invoice Viewed',\n              desc: 'When a client views an invoice',\n            },\n            {\n              key: 'invoice_paid',\n              label: 'Invoice Paid',\n              desc: 'When an invoice is marked as paid',\n            },\n            {\n              key: 'invoice_overdue',\n              label: 'Invoice Overdue',\n              desc: 'When an invoice becomes overdue',\n            },\n            {\n              key: 'invoice_cancelled',\n              label: 'Invoice Cancelled',\n              desc: 'When an invoice is cancelled',\n            },\n          ].map(({ key, label, desc }) => (\n            <div key={key} className='flex items-center justify-between'>\n              <div>\n                <label className='text-sm font-medium text-gray-700'>{label}</label>\n                <p className='text-xs text-gray-500'>{desc}</p>\n              </div>\n              <input\n                type='checkbox'\n                checked={notificationPreferences?.[key] || false}\n                onChange={e =>\n                  setNotificationPreferences({\n                    ...notificationPreferences,\n                    [key]: e.target.checked,\n                  })\n                }\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Payment Notifications */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4 flex items-center'>\n          <span className='mr-2'>­ƒÆ░</span> Payment Notifications\n        </h5>\n        <div className='space-y-4'>\n          {[\n            {\n              key: 'payment_received',\n              label: 'Payment Received',\n              desc: 'When a payment is received',\n            },\n            {\n              key: 'payment_failed',\n              label: 'Payment Failed',\n              desc: 'When a payment attempt fails',\n            },\n            {\n              key: 'payment_refunded',\n              label: 'Payment Refunded',\n              desc: 'When a payment is refunded',\n            },\n            {\n              key: 'payment_reminder_sent',\n              label: 'Reminder Sent',\n              desc: 'When payment reminders are sent',\n            },\n          ].map(({ key, label, desc }) => (\n            <div key={key} className='flex items-center justify-between'>\n              <div>\n                <label className='text-sm font-medium text-gray-700'>{label}</label>\n                <p className='text-xs text-gray-500'>{desc}</p>\n              </div>\n              <input\n                type='checkbox'\n                checked={notificationPreferences?.[key] || false}\n                onChange={e =>\n                  setNotificationPreferences({\n                    ...notificationPreferences,\n                    [key]: e.target.checked,\n                  })\n                }\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quote Notifications */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4 flex items-center'>\n          <span className='mr-2'>­ƒôØ</span> Quote Notifications\n        </h5>\n        <div className='space-y-4'>\n          {[\n            { key: 'quote_sent', label: 'Quote Sent', desc: 'When a quote is sent to a client' },\n            {\n              key: 'quote_accepted',\n              label: 'Quote Accepted',\n              desc: 'When a client accepts a quote',\n            },\n            {\n              key: 'quote_declined',\n              label: 'Quote Declined',\n              desc: 'When a client declines a quote',\n            },\n            { key: 'quote_expired', label: 'Quote Expired', desc: 'When a quote expires' },\n          ].map(({ key, label, desc }) => (\n            <div key={key} className='flex items-center justify-between'>\n              <div>\n                <label className='text-sm font-medium text-gray-700'>{label}</label>\n                <p className='text-xs text-gray-500'>{desc}</p>\n              </div>\n              <input\n                type='checkbox'\n                checked={notificationPreferences?.[key] || false}\n                onChange={e =>\n                  setNotificationPreferences({\n                    ...notificationPreferences,\n                    [key]: e.target.checked,\n                  })\n                }\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* System Notifications */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h5 className='text-md font-medium text-gray-900 mb-4 flex items-center'>\n          <span className='mr-2'>ÔÜÖ´©Å</span> System Notifications\n        </h5>\n        <div className='space-y-4'>\n          {[\n            {\n              key: 'system_backup',\n              label: 'System Backup',\n              desc: 'Backup completion notifications',\n            },\n            { key: 'system_maintenance', label: 'Maintenance', desc: 'System maintenance updates' },\n            {\n              key: 'system_security',\n              label: 'Security Alerts',\n              desc: 'Security-related notifications',\n            },\n            { key: 'system_updates', label: 'Feature Updates', desc: 'New feature announcements' },\n          ].map(({ key, label, desc }) => (\n            <div key={key} className='flex items-center justify-between'>\n              <div>\n                <label className='text-sm font-medium text-gray-700'>{label}</label>\n                <p className='text-xs text-gray-500'>{desc}</p>\n              </div>\n              <input\n                type='checkbox'\n                checked={notificationPreferences?.[key] || false}\n                onChange={e =>\n                  setNotificationPreferences({\n                    ...notificationPreferences,\n                    [key]: e.target.checked,\n                  })\n                }\n                className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className='flex justify-end'>\n        <button\n          onClick={handleSaveNotificationPreferences}\n          disabled={isSaving}\n          className='bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50'\n        >\n          {isSaving ? 'Saving...' : 'Save Notification Settings'}\n        </button>\n      </div>\n    </div>\n  );\n\n  // Render email templates tab\n  const renderEmailTemplates = () => {\n    const filteredTemplates = selectedCategory\n      ? emailTemplates.filter(t => t.category === selectedCategory)\n      : emailTemplates;\n\n    return (\n      <div className='space-y-6'>\n        <div className='flex justify-between items-center'>\n          <div>\n            <h4 className='text-lg font-medium text-gray-900'>\n              {t('email.templates.title', 'Email Templates')}\n            </h4>\n            <p className='text-sm text-gray-600'>\n              {t(\n                'email.templates.description',\n                'Customize your email templates for different types of communications.',\n              )}\n            </p>\n          </div>\n          <button\n            onClick={() => setNewTemplateModal(true)}\n            className='bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center space-x-2'\n          >\n            <PlusIcon className='h-4 w-4' />\n            <span>New Template</span>\n          </button>\n        </div>\n\n        {/* Category Filter */}\n        <div className='flex flex-wrap gap-2'>\n          <button\n            onClick={() => setSelectedCategory(null)}\n            className={`px-3 py-1 rounded-full text-sm ${\n              !selectedCategory\n                ? 'bg-blue-100 text-blue-800 border border-blue-200'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            All Categories\n          </button>\n          {Object.entries(EmailSettingsService.templateCategories).map(([key, category]) => (\n            <button\n              key={key}\n              onClick={() => setSelectedCategory(key)}\n              className={`px-3 py-1 rounded-full text-sm flex items-center space-x-1 ${\n                selectedCategory === key\n                  ? 'bg-blue-100 text-blue-800 border border-blue-200'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              <span>{category.icon}</span>\n              <span>{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n        <div className='grid gap-6'>\n          {filteredTemplates.map(template => (\n            <div key={template.id} className='bg-white border border-gray-200 rounded-lg p-6'>\n              <div className='flex justify-between items-start mb-4'>\n                <div className='flex-1'>\n                  <div className='flex items-center space-x-2 mb-2'>\n                    <span>{EmailSettingsService.templateCategories[template.category]?.icon}</span>\n                    <h5 className='text-md font-medium text-gray-900'>{template.name}</h5>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs ${\n                        EmailSettingsService.templateCategories[template.category]?.color === 'blue'\n                          ? 'bg-blue-100 text-blue-800'\n                          : EmailSettingsService.templateCategories[template.category]?.color ===\n                              'green'\n                            ? 'bg-green-100 text-green-800'\n                            : EmailSettingsService.templateCategories[template.category]?.color ===\n                                'purple'\n                              ? 'bg-purple-100 text-purple-800'\n                              : 'bg-gray-100 text-gray-800'\n                      }`}\n                    >\n                      {EmailSettingsService.templateCategories[template.category]?.name}\n                    </span>\n                  </div>\n                  <p className='text-sm text-gray-600'>{template.subject}</p>\n                  {template.description && (\n                    <p className='text-xs text-gray-500 mt-1'>{template.description}</p>\n                  )}\n                </div>\n                <div className='flex space-x-2 ml-4'>\n                  <button\n                    onClick={() => handlePreviewTemplate(template.template_key)}\n                    className='text-gray-400 hover:text-gray-600'\n                    title='Preview'\n                  >\n                    <EyeIcon className='h-5 w-5' />\n                  </button>\n                  <button\n                    onClick={() => setEditingTemplate(template)}\n                    className='text-gray-400 hover:text-gray-600'\n                    title='Edit'\n                  >\n                    <PencilIcon className='h-5 w-5' />\n                  </button>\n                  <button\n                    onClick={() => setTestEmailModal(template.template_key)}\n                    className='text-blue-600 hover:text-blue-800'\n                    title='Send Test'\n                  >\n                    <EnvelopeIcon className='h-5 w-5' />\n                  </button>\n                  {!template.is_default && (\n                    <button\n                      onClick={() => handleDeleteTemplate(template.template_key)}\n                      className='text-red-600 hover:text-red-800'\n                      title='Delete'\n                    >\n                      <TrashIcon className='h-5 w-5' />\n                    </button>\n                  )}\n                </div>\n              </div>\n\n              <div className='text-sm text-gray-700 bg-gray-50 p-3 rounded max-h-32 overflow-y-auto'>\n                {template.body_text.substring(0, 200)}...\n              </div>\n\n              {template.variables && template.variables.length > 0 && (\n                <div className='mt-3 flex flex-wrap gap-2'>\n                  {template.variables.map(variable => (\n                    <span\n                      key={variable}\n                      className='inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800'\n                    >\n                      {'{' + variable + '}'}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Render email activity tab\n  const renderEmailActivity = () => (\n    <div className='space-y-6'>\n      <div>\n        <h4 className='text-lg font-medium text-gray-900 mb-4'>Email Activity & Statistics</h4>\n        <p className='text-sm text-gray-600 mb-6'>\n          View email delivery history and performance statistics.\n        </p>\n      </div>\n\n      {/* Email Statistics */}\n      {emailStats && (\n        <div className='grid grid-cols-1 md:grid-cols-4 gap-4 mb-6'>\n          <div className='bg-white border border-gray-200 rounded-lg p-4'>\n            <div className='text-2xl font-bold text-gray-900'>{emailStats.total}</div>\n            <div className='text-sm text-gray-600'>Total Emails</div>\n          </div>\n          <div className='bg-white border border-gray-200 rounded-lg p-4'>\n            <div className='text-2xl font-bold text-green-600'>{emailStats.sent}</div>\n            <div className='text-sm text-gray-600'>Sent Successfully</div>\n          </div>\n          <div className='bg-white border border-gray-200 rounded-lg p-4'>\n            <div className='text-2xl font-bold text-red-600'>{emailStats.failed}</div>\n            <div className='text-sm text-gray-600'>Failed</div>\n          </div>\n          <div className='bg-white border border-gray-200 rounded-lg p-4'>\n            <div className='text-2xl font-bold text-blue-600'>{emailStats.successRate}%</div>\n            <div className='text-sm text-gray-600'>Success Rate</div>\n          </div>\n        </div>\n      )}\n\n      {/* Email Activity History */}\n      <div className='bg-white border border-gray-200 rounded-lg'>\n        <div className='px-6 py-4 border-b border-gray-200'>\n          <h5 className='text-md font-medium text-gray-900'>Recent Email Activity</h5>\n        </div>\n        <div className='overflow-x-auto'>\n          <table className='min-w-full divide-y divide-gray-200'>\n            <thead className='bg-gray-50'>\n              <tr>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  Recipient\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  Subject\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  Template\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  Status\n                </th>\n                <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                  Sent\n                </th>\n              </tr>\n            </thead>\n            <tbody className='bg-white divide-y divide-gray-200'>\n              {emailActivity.map(activity => (\n                <tr key={activity.id}>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    {activity.recipient_email}\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                    {activity.subject}\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-600'>\n                    {activity.template_key}\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap'>\n                    <span\n                      className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        activity.status === 'sent'\n                          ? 'bg-green-100 text-green-800'\n                          : activity.status === 'failed'\n                            ? 'bg-red-100 text-red-800'\n                            : 'bg-yellow-100 text-yellow-800'\n                      }`}\n                    >\n                      {activity.status}\n                    </span>\n                  </td>\n                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-600'>\n                    {activity.sent_at ? new Date(activity.sent_at).toLocaleDateString() : '-'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access email settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Main component render\n  if (isLoading) {\n    return (\n      <div className='flex justify-center items-center h-64'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      <div>\n        <h3 className='text-lg leading-6 font-medium text-gray-900'>\n          {t('email.title', 'Email Settings')}\n        </h3>\n        <p className='mt-1 text-sm text-gray-500'>\n          {t('email.description', 'Manage your email provider, notifications, and templates.')}\n        </p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className='border-b border-gray-200'>\n        <nav className='-mb-px flex space-x-8'>\n          {[\n            { key: 'providers', label: 'Configuration', icon: Cog6ToothIcon },\n            { key: 'notifications', label: 'Notifications', icon: EnvelopeIcon },\n            { key: 'templates', label: 'Templates', icon: PencilIcon },\n            { key: 'activity', label: 'Activity', icon: ChartBarIcon },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setActiveTab(key)}\n              className={`whitespace-nowrap pb-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                activeTab === key\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Icon className='h-4 w-4' />\n              <span>{label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'providers' && renderProvidersTab()}\n      {activeTab === 'notifications' && renderNotificationSettings()}\n      {activeTab === 'templates' && renderEmailTemplates()}\n      {activeTab === 'activity' && renderEmailActivity()}\n\n      {/* Test Email Modal */}\n      {testEmailModal && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg p-6 w-full max-w-md'>\n            <h3 className='text-lg font-medium text-gray-900 mb-4'>Send Test Email</h3>\n            <div className='space-y-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>\n                  Test Email Address\n                </label>\n                <input\n                  type='email'\n                  value={testEmail}\n                  onChange={e => setTestEmail(e.target.value)}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='test@example.com'\n                />\n              </div>\n            </div>\n            <div className='flex justify-end space-x-3 mt-6'>\n              <button\n                onClick={() => setTestEmailModal(null)}\n                className='px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200'\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleSendTestEmail(testEmailModal)}\n                disabled={isSaving || !testEmail}\n                className='px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50'\n              >\n                {isSaving ? 'Sending...' : 'Send Test'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Template Preview Modal */}\n      {previewTemplate && (\n        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg p-6 w-full max-w-2xl max-h-screen overflow-y-auto'>\n            <div className='flex justify-between items-center mb-4'>\n              <h3 className='text-lg font-medium text-gray-900'>Template Preview</h3>\n              <button\n                onClick={() => setPreviewTemplate(null)}\n                className='text-gray-400 hover:text-gray-600'\n              >\n                <XMarkIcon className='h-6 w-6' />\n              </button>\n            </div>\n            <div className='space-y-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>Subject</label>\n                <div className='p-3 bg-gray-50 rounded-md'>{previewTemplate.subject}</div>\n              </div>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>Email Body</label>\n                <div className='p-3 bg-gray-50 rounded-md whitespace-pre-wrap max-h-96 overflow-y-auto'>\n                  {previewTemplate.body}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\EmailSettingsFallback.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":11,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":11,"endColumn":14,"suggestions":[{"fix":{"range":[265,336],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":36,"endColumn":16,"suggestions":[{"fix":{"range":[993,1077],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":47,"endColumn":16,"suggestions":[{"fix":{"range":[1357,1495],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  EnvelopeIcon,\n  Cog6ToothIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function EmailSettingsFallback({ showNotification }) {\n  console.log('­ƒöº EmailSettingsFallback: Component mounted - Demo Mode');\n\n  const [emailSettings, setEmailSettings] = useState({\n    provider: 'smtp',\n    smtp_host: 'smtp.gmail.com',\n    smtp_port: 587,\n    smtp_username: 'your-email@gmail.com',\n    smtp_password: '',\n    smtp_encryption: 'tls',\n    from_email: 'noreply@yourcompany.com',\n    from_name: 'Your Company Name',\n    notifications: {\n      invoices: true,\n      quotes: true,\n      payments: true,\n      reminders: true,\n      system: false,\n    },\n  });\n\n  const [activeTab, setActiveTab] = useState('smtp');\n  const [testEmail, setTestEmail] = useState('');\n  const [isTestingEmail, setIsTestingEmail] = useState(false);\n\n  const handleSaveSettings = () => {\n    console.log('­ƒÆ¥ EmailSettingsFallback: Saving settings (Demo Mode)', emailSettings);\n    showNotification?.('Email settings saved successfully! (Demo Mode)', 'success');\n  };\n\n  const handleTestEmail = async () => {\n    if (!testEmail) {\n      showNotification?.('Please enter a test email address', 'error');\n      return;\n    }\n\n    setIsTestingEmail(true);\n    console.log('­ƒôº EmailSettingsFallback: Testing email configuration (Demo Mode)', {\n      testEmail,\n      settings: emailSettings,\n    });\n\n    // Simulate API call\n    setTimeout(() => {\n      setIsTestingEmail(false);\n      showNotification?.(`Test email sent successfully to ${testEmail}! (Demo Mode)`, 'success');\n    }, 2000);\n  };\n\n  const providers = [\n    { key: 'smtp', name: 'SMTP Configuration', icon: Cog6ToothIcon },\n    { key: 'notifications', name: 'Email Notifications', icon: EnvelopeIcon },\n  ];\n\n  const encryptionOptions = [\n    { value: 'none', label: 'None' },\n    { value: 'tls', label: 'TLS' },\n    { value: 'ssl', label: 'SSL' },\n  ];\n\n  return (\n    <div className='space-y-6'>\n      {/* Demo Mode Banner */}\n      <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>\n        <div className='flex items-center'>\n          <InformationCircleIcon className='h-5 w-5 text-blue-400 mr-2' />\n          <span className='text-blue-800 font-medium'>Demo Mode</span>\n        </div>\n        <p className='text-blue-700 text-sm mt-1'>\n          This is a simplified email settings interface. No actual email configuration will be\n          saved.\n        </p>\n      </div>\n\n      {/* Header */}\n      <div>\n        <h3 className='text-lg font-medium text-gray-900'>Email Settings</h3>\n        <p className='mt-1 text-sm text-gray-600'>\n          Configure SMTP settings and email notification preferences\n        </p>\n      </div>\n\n      {/* Provider Tabs */}\n      <div className='border-b border-gray-200'>\n        <nav className='-mb-px flex space-x-8'>\n          {providers.map(provider => (\n            <button\n              key={provider.key}\n              onClick={() => setActiveTab(provider.key)}\n              className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                activeTab === provider.key\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <provider.icon className='h-4 w-4' />\n              <span>{provider.name}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* SMTP Configuration Tab */}\n      {activeTab === 'smtp' && (\n        <div className='space-y-6'>\n          <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n            {/* SMTP Host */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>SMTP Host</label>\n              <input\n                type='text'\n                value={emailSettings.smtp_host}\n                onChange={e => setEmailSettings({ ...emailSettings, smtp_host: e.target.value })}\n                className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                placeholder='smtp.gmail.com'\n              />\n            </div>\n\n            {/* SMTP Port */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>SMTP Port</label>\n              <input\n                type='number'\n                value={emailSettings.smtp_port}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_port: parseInt(e.target.value) })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                placeholder='587'\n              />\n            </div>\n\n            {/* SMTP Username */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>Username</label>\n              <input\n                type='email'\n                value={emailSettings.smtp_username}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_username: e.target.value })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                placeholder='your-email@gmail.com'\n              />\n            </div>\n\n            {/* SMTP Password */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>Password</label>\n              <input\n                type='password'\n                value={emailSettings.smtp_password}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_password: e.target.value })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                placeholder='ÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇó'\n              />\n            </div>\n\n            {/* Encryption */}\n            <div>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>Encryption</label>\n              <select\n                value={emailSettings.smtp_encryption}\n                onChange={e =>\n                  setEmailSettings({ ...emailSettings, smtp_encryption: e.target.value })\n                }\n                className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n              >\n                {encryptionOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* From Settings */}\n          <div className='border-t pt-6'>\n            <h4 className='text-md font-medium text-gray-900 mb-4'>From Address Settings</h4>\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>From Email</label>\n                <input\n                  type='email'\n                  value={emailSettings.from_email}\n                  onChange={e => setEmailSettings({ ...emailSettings, from_email: e.target.value })}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                  placeholder='noreply@yourcompany.com'\n                />\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>From Name</label>\n                <input\n                  type='text'\n                  value={emailSettings.from_name}\n                  onChange={e => setEmailSettings({ ...emailSettings, from_name: e.target.value })}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                  placeholder='Your Company Name'\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Test Email */}\n          <div className='border-t pt-6'>\n            <h4 className='text-md font-medium text-gray-900 mb-4'>Test Email Configuration</h4>\n            <div className='flex space-x-4'>\n              <div className='flex-1'>\n                <input\n                  type='email'\n                  value={testEmail}\n                  onChange={e => setTestEmail(e.target.value)}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500'\n                  placeholder='test@example.com'\n                />\n              </div>\n              <button\n                onClick={handleTestEmail}\n                disabled={isTestingEmail}\n                className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50'\n              >\n                {isTestingEmail ? 'Testing...' : 'Test Email'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Email Notifications Tab */}\n      {activeTab === 'notifications' && (\n        <div className='space-y-6'>\n          <div>\n            <h4 className='text-md font-medium text-gray-900 mb-4'>\n              Email Notification Preferences\n            </h4>\n            <div className='space-y-4'>\n              {Object.entries(emailSettings.notifications).map(([key, enabled]) => (\n                <div\n                  key={key}\n                  className='flex items-center justify-between py-3 border-b border-gray-200 last:border-b-0'\n                >\n                  <div>\n                    <h5 className='text-sm font-medium text-gray-900 capitalize'>\n                      {key} Notifications\n                    </h5>\n                    <p className='text-sm text-gray-500'>\n                      Receive email notifications for {key.toLowerCase()} related activities\n                    </p>\n                  </div>\n                  <button\n                    onClick={() =>\n                      setEmailSettings({\n                        ...emailSettings,\n                        notifications: {\n                          ...emailSettings.notifications,\n                          [key]: !enabled,\n                        },\n                      })\n                    }\n                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                      enabled ? 'bg-blue-600' : 'bg-gray-200'\n                    }`}\n                  >\n                    <span\n                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                        enabled ? 'translate-x-6' : 'translate-x-1'\n                      }`}\n                    />\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Save Button */}\n      <div className='flex justify-end pt-6 border-t'>\n        <button\n          onClick={handleSaveSettings}\n          className='px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center space-x-2'\n        >\n          <CheckCircleIcon className='h-4 w-4' />\n          <span>Save Email Settings</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\FileUploadField.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PhotoIcon' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PhotoIcon } from '@heroicons/react/24/outline';\n\nconst FileUploadField = ({\n  label,\n  currentImage,\n  altText,\n  isUploading = false,\n  uploadProgress = 0,\n  onFileSelect,\n  onRemove,\n  accept = 'image/*',\n  maxSize = '2MB',\n  supportedFormats = 'SVG, PNG o JPG',\n  className = '',\n  imageClassName = 'h-16 w-16',\n  error = null,\n}) => {\n  const { t } = useTranslation('settings');\n\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file && onFileSelect) {\n      onFileSelect(file);\n    }\n  };\n\n  const finalAltText = altText || t('fileUpload.altText');\n\n  return (\n    <div className={className}>\n      {label && <label className='block text-sm font-medium text-gray-700 mb-2'>{label}</label>}\n\n      <div className='flex items-center mt-1'>\n        <div\n          className={`relative flex-shrink-0 ${imageClassName} overflow-hidden rounded border border-gray-200`}\n        >\n          <img className='h-full w-full object-contain' src={currentImage} alt={finalAltText} />\n          {isUploading && (\n            <div className='absolute inset-0 flex items-center justify-center bg-black bg-opacity-40'>\n              <svg\n                className='animate-spin h-8 w-8 text-white'\n                xmlns='http://www.w3.org/2000/svg'\n                fill='none'\n                viewBox='0 0 24 24'\n              >\n                <circle\n                  className='opacity-25'\n                  cx='12'\n                  cy='12'\n                  r='10'\n                  stroke='currentColor'\n                  strokeWidth='4'\n                ></circle>\n                <path\n                  className='opacity-75'\n                  fill='currentColor'\n                  d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'\n                ></path>\n              </svg>\n            </div>\n          )}\n        </div>\n\n        <div className='ml-5'>\n          <div className='flex'>\n            <label\n              htmlFor={`file-upload-${label?.replace(/\\s+/g, '-').toLowerCase()}`}\n              className='bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed'\n            >\n              {isUploading ? t('fileUpload.uploading') : t('fileUpload.change')}\n            </label>\n            <input\n              id={`file-upload-${label?.replace(/\\s+/g, '-').toLowerCase()}`}\n              name={`file-upload-${label?.replace(/\\s+/g, '-').toLowerCase()}`}\n              type='file'\n              className='sr-only'\n              accept={accept}\n              onChange={handleFileChange}\n              disabled={isUploading}\n            />\n            {onRemove && (\n              <button\n                type='button'\n                onClick={onRemove}\n                disabled={isUploading}\n                className='ml-2 bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed'\n              >\n                {t('fileUpload.remove')}\n              </button>\n            )}\n          </div>\n\n          {/* Progress bar */}\n          {isUploading && uploadProgress > 0 && (\n            <div className='mt-2'>\n              <div className='bg-gray-200 rounded-full h-2'>\n                <div\n                  className='bg-blue-600 h-2 rounded-full transition-all duration-300'\n                  style={{ width: `${uploadProgress}%` }}\n                ></div>\n              </div>\n              <p className='text-xs text-gray-500 mt-1'>\n                {t('fileUpload.progress', { progress: uploadProgress })}\n              </p>\n            </div>\n          )}\n\n          {/* File info */}\n          {!isUploading && (\n            <p className='mt-2 text-xs text-gray-500'>\n              {t('fileUpload.info', { formats: supportedFormats, size: maxSize })}\n            </p>\n          )}\n\n          {/* Error message */}\n          {error && <p className='mt-2 text-xs text-red-600'>{error}</p>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUploadField;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\IntegrationsSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is defined but never used.","line":17,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadIntegrationsData'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loadIntegrationsData, user]","fix":{"range":[1833,1856],"text":"[isAuthenticated, loadIntegrationsData, user]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":577,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21348,21434],"text":"\n                Your API Key (Copy this now - it won&apos;t be shown again)\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21348,21434],"text":"\n                Your API Key (Copy this now - it won&lsquo;t be shown again)\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21348,21434],"text":"\n                Your API Key (Copy this now - it won&#39;t be shown again)\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21348,21434],"text":"\n                Your API Key (Copy this now - it won&rsquo;t be shown again)\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":598,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[22421,22579],"text":"\n                    Store this API key securely. It won&apos;t be displayed again and provides access to\n                    your account data.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[22421,22579],"text":"\n                    Store this API key securely. It won&lsquo;t be displayed again and provides access to\n                    your account data.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[22421,22579],"text":"\n                    Store this API key securely. It won&#39;t be displayed again and provides access to\n                    your account data.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[22421,22579],"text":"\n                    Store this API key securely. It won&rsquo;t be displayed again and provides access to\n                    your account data.\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":610,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[22896,22950],"text":"\n                I&apos;ve Saved It Securely\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[22896,22950],"text":"\n                I&lsquo;ve Saved It Securely\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[22896,22950],"text":"\n                I&#39;ve Saved It Securely\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[22896,22950],"text":"\n                I&rsquo;ve Saved It Securely\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport {\n  KeyIcon,\n  PlusIcon,\n  TrashIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ClipboardDocumentIcon,\n  ExclamationTriangleIcon,\n  Cog6ToothIcon,\n  ArrowPathIcon,\n  LinkIcon,\n  ChartBarIcon,\n} from '@heroicons/react/24/outline';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useTranslation } from 'react-i18next';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport Logger from '../../utils/Logger';\nimport integrationsService from '../../lib/integrationsService';\n\nexport default function IntegrationsSettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useUser();\n  const { isAuthenticated } = useClerkAuth();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('apiKeys');\n\n  // State management\n  const [apiKeys, setApiKeys] = useState([]);\n  const [integrations, setIntegrations] = useState({});\n  const [activityHistory, setActivityHistory] = useState([]);\n  const [showApiKey, setShowApiKey] = useState({});\n  const [newApiKeyModal, setNewApiKeyModal] = useState(false);\n  const [newApiKeyData, setNewApiKeyData] = useState({\n    name: '',\n    permissions: ['read'],\n    scopes: ['invoices', 'clients'],\n    rateLimitRequests: 1000,\n    expiresAt: null,\n    ipWhitelist: [],\n  });\n  const [generatedKey, setGeneratedKey] = useState(null);\n  const [configModal, setConfigModal] = useState({ open: false, service: null, data: {} });\n\n  // integrationsService is now imported as a singleton instance\n\n  useEffect(() => {\n    // Load integrations data when component mounts\n    if (isAuthenticated && user) {\n      loadIntegrationsData();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadIntegrationsData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Load API keys and integrations in parallel\n      const [apiKeysData, integrationsData, activityData] = await Promise.all([\n        integrationsService.getApiKeys(),\n        integrationsService.getIntegrations(),\n        integrationsService.getActivityHistory({ limit: 50 }),\n      ]);\n\n      setApiKeys(apiKeysData);\n      setIntegrations(integrationsData);\n      setActivityHistory(activityData);\n\n      Logger.info('Integrations data loaded successfully');\n    } catch (error) {\n      Logger.error('Error loading integrations data:', error);\n      showNotification?.('Error loading integrations data', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateApiKey = async () => {\n    try {\n      setIsSaving(true);\n\n      const newKey = await integrationsService.generateApiKey(newApiKeyData);\n\n      setApiKeys(prev => [newKey, ...prev]);\n      setGeneratedKey(newKey); // Show the generated key modal\n      setNewApiKeyModal(false);\n      setNewApiKeyData({\n        name: '',\n        permissions: ['read'],\n        scopes: ['invoices', 'clients'],\n        rateLimitRequests: 1000,\n        expiresAt: null,\n        ipWhitelist: [],\n      });\n\n      Logger.info('New API key generated successfully');\n      showNotification?.('API key generated successfully', 'success');\n    } catch (error) {\n      Logger.error('Error generating API key:', error);\n      showNotification?.('Error generating API key', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const revokeApiKey = async keyId => {\n    try {\n      setIsSaving(true);\n\n      await integrationsService.revokeApiKey(keyId, 'Revoked by user');\n      setApiKeys(prev => prev.filter(key => key.id !== keyId));\n\n      Logger.info(`API key ${keyId} revoked successfully`);\n      showNotification?.('API key revoked successfully', 'success');\n    } catch (error) {\n      Logger.error('Error revoking API key:', error);\n      showNotification?.('Error revoking API key', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const toggleApiKeyVisibility = keyId => {\n    setShowApiKey(prev => ({\n      ...prev,\n      [keyId]: !prev[keyId],\n    }));\n  };\n\n  const copyToClipboard = async text => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showNotification?.('Copied to clipboard', 'success');\n    } catch (error) {\n      Logger.error('Error copying to clipboard:', error);\n      showNotification?.('Error copying to clipboard', 'error');\n    }\n  };\n\n  const connectIntegration = async (category, service) => {\n    try {\n      setIsSaving(true);\n\n      const result = await integrationsService.connectIntegration(service, {\n        category,\n        enableSync: true,\n        syncFrequency: 'daily',\n      });\n\n      // Handle OAuth redirect if needed\n      if (result.requiresOAuth && result.oauthUrl) {\n        window.location.href = result.oauthUrl;\n        return;\n      }\n\n      // Update local state\n      setIntegrations(prev => ({\n        ...prev,\n        [category]: {\n          ...prev[category],\n          [service]: {\n            connected: true,\n            status: 'active',\n            lastSync: new Date().toISOString(),\n            configuration: result.configuration || {},\n          },\n        },\n      }));\n\n      Logger.info(`Connected to ${service} successfully`);\n      showNotification?.(`Successfully connected to ${service}`, 'success');\n    } catch (error) {\n      Logger.error(`Error connecting to ${service}:`, error);\n      showNotification?.(`Error connecting to ${service}`, 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const disconnectIntegration = async (category, service) => {\n    try {\n      setIsSaving(true);\n\n      await integrationsService.disconnectIntegration(service);\n\n      setIntegrations(prev => ({\n        ...prev,\n        [category]: {\n          ...prev[category],\n          [service]: {\n            connected: false,\n            status: 'inactive',\n            lastSync: null,\n            configuration: {},\n          },\n        },\n      }));\n\n      Logger.info(`Disconnected from ${service} successfully`);\n      showNotification?.(`Successfully disconnected from ${service}`, 'success');\n    } catch (error) {\n      Logger.error(`Error disconnecting from ${service}:`, error);\n      showNotification?.(`Error disconnecting from ${service}`, 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const syncIntegration = async (category, service) => {\n    try {\n      setIsSaving(true);\n\n      const result = await integrationsService.syncIntegration(service);\n\n      // Update integration with new sync time\n      setIntegrations(prev => ({\n        ...prev,\n        [category]: {\n          ...prev[category],\n          [service]: {\n            ...prev[category][service],\n            lastSync: new Date().toISOString(),\n            syncStatus: result.status,\n          },\n        },\n      }));\n\n      Logger.info(`Synced ${service} successfully`);\n      showNotification?.(`Successfully synced ${service}`, 'success');\n    } catch (error) {\n      Logger.error(`Error syncing ${service}:`, error);\n      showNotification?.(`Error syncing ${service}`, 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const openConfigModal = (category, service) => {\n    const serviceConfig = integrations[category]?.[service] || {};\n    setConfigModal({\n      open: true,\n      service,\n      category,\n      data: serviceConfig.configuration || {},\n    });\n  };\n\n  const saveIntegrationConfig = async () => {\n    try {\n      setIsSaving(true);\n\n      await integrationsService.updateIntegrationConfig(configModal.service, configModal.data);\n\n      // Update local state\n      setIntegrations(prev => ({\n        ...prev,\n        [configModal.category]: {\n          ...prev[configModal.category],\n          [configModal.service]: {\n            ...prev[configModal.category][configModal.service],\n            configuration: configModal.data,\n          },\n        },\n      }));\n\n      setConfigModal({ open: false, service: null, data: {} });\n      showNotification?.('Configuration saved successfully', 'success');\n    } catch (error) {\n      Logger.error('Error saving configuration:', error);\n      showNotification?.('Error saving configuration', 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const formatDate = dateString => {\n    if (!dateString) return 'Never';\n\n    try {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n    } catch {\n      return 'Invalid date';\n    }\n  };\n\n  // Enhanced permission options\n  const permissionOptions = [\n    { value: 'read', label: 'Read', description: 'View data only' },\n    { value: 'write', label: 'Write', description: 'Create and update data' },\n    { value: 'delete', label: 'Delete', description: 'Delete data' },\n    { value: 'admin', label: 'Admin', description: 'Full administrative access' },\n  ];\n\n  // Enhanced scope options\n  const scopeOptions = [\n    { value: 'invoices', label: 'Invoices', description: 'Access invoice data' },\n    { value: 'clients', label: 'Clients', description: 'Access client information' },\n    { value: 'payments', label: 'Payments', description: 'Access payment data' },\n    { value: 'projects', label: 'Projects', description: 'Access project data' },\n    { value: 'reports', label: 'Reports', description: 'Access reporting data' },\n    { value: 'settings', label: 'Settings', description: 'Access configuration' },\n  ];\n\n  const renderApiKeys = () => (\n    <div className='space-y-6'>\n      <div className='flex justify-between items-center'>\n        <div>\n          <h4 className='text-lg font-medium text-gray-900 mb-2'>\n            {t('integrations.apiKeys.title', 'API Keys')}\n          </h4>\n          <p className='text-sm text-gray-600'>\n            {t(\n              'integrations.apiKeys.description',\n              'Generate and manage API keys for accessing your data programmatically.',\n            )}\n          </p>\n        </div>\n        <button\n          onClick={() => setNewApiKeyModal(true)}\n          className='flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n        >\n          <PlusIcon className='h-4 w-4' />\n          <span>Generate New Key</span>\n        </button>\n      </div>\n\n      {/* API Keys List */}\n      <div className='bg-white border border-gray-200 rounded-lg'>\n        {apiKeys.length === 0 ? (\n          <div className='p-8 text-center'>\n            <KeyIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n            <h5 className='text-lg font-medium text-gray-900 mb-2'>No API Keys</h5>\n            <p className='text-gray-600 mb-4'>\n              Generate your first API key to start integrating with external applications.\n            </p>\n            <button\n              onClick={() => setNewApiKeyModal(true)}\n              className='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'\n            >\n              Generate API Key\n            </button>\n          </div>\n        ) : (\n          <ul className='divide-y divide-gray-200'>\n            {apiKeys.map(apiKey => (\n              <li key={apiKey.id} className='p-6'>\n                <div className='flex items-center justify-between'>\n                  <div className='flex-1'>\n                    <div className='flex items-center space-x-3 mb-2'>\n                      <h5 className='text-sm font-medium text-gray-900'>{apiKey.name}</h5>\n                      <span\n                        className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                          apiKey.status === 'active'\n                            ? 'bg-green-100 text-green-800'\n                            : apiKey.status === 'inactive'\n                              ? 'bg-yellow-100 text-yellow-800'\n                              : 'bg-red-100 text-red-800'\n                        }`}\n                      >\n                        {apiKey.status}\n                      </span>\n                    </div>\n\n                    <div className='flex items-center space-x-2 mb-2'>\n                      <span className='text-sm text-gray-600 font-mono'>\n                        {showApiKey[apiKey.id]\n                          ? apiKey.key || apiKey.key_prefix\n                          : apiKey.key_prefix}\n                      </span>\n                      <button\n                        onClick={() => toggleApiKeyVisibility(apiKey.id)}\n                        className='text-gray-400 hover:text-gray-600'\n                      >\n                        {showApiKey[apiKey.id] ? (\n                          <EyeSlashIcon className='h-4 w-4' />\n                        ) : (\n                          <EyeIcon className='h-4 w-4' />\n                        )}\n                      </button>\n                      <button\n                        onClick={() => copyToClipboard(apiKey.key || apiKey.key_prefix)}\n                        className='text-gray-400 hover:text-gray-600'\n                      >\n                        <ClipboardDocumentIcon className='h-4 w-4' />\n                      </button>\n                    </div>\n\n                    <div className='flex flex-wrap gap-4 text-xs text-gray-500'>\n                      <span>Permissions: {apiKey.permissions?.join(', ')}</span>\n                      <span>Scopes: {apiKey.scopes?.join(', ')}</span>\n                      <span>Usage: {apiKey.usage_count || 0} requests</span>\n                      <span>Last used: {formatDate(apiKey.last_used_at)}</span>\n                      <span>Created: {formatDate(apiKey.created_at)}</span>\n                      {apiKey.expires_at && (\n                        <span className='text-amber-600'>\n                          Expires: {formatDate(apiKey.expires_at)}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  <button\n                    onClick={() => revokeApiKey(apiKey.id)}\n                    className='ml-4 p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-colors'\n                    title='Revoke API Key'\n                  >\n                    <TrashIcon className='h-5 w-5' />\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* API Key Generation Modal */}\n      {newApiKeyModal && (\n        <div className='fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-screen overflow-y-auto'>\n            <h3 className='text-lg font-medium text-gray-900 mb-4'>Generate New API Key</h3>\n\n            <div className='space-y-6'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>Key Name *</label>\n                <input\n                  type='text'\n                  value={newApiKeyData.name}\n                  onChange={e => setNewApiKeyData(prev => ({ ...prev, name: e.target.value }))}\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  placeholder='e.g. Production API, Mobile App'\n                />\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>Permissions</label>\n                <div className='space-y-2'>\n                  {permissionOptions.map(permission => (\n                    <label key={permission.value} className='flex items-start space-x-3'>\n                      <input\n                        type='checkbox'\n                        checked={newApiKeyData.permissions.includes(permission.value)}\n                        onChange={e => {\n                          if (e.target.checked) {\n                            setNewApiKeyData(prev => ({\n                              ...prev,\n                              permissions: [...prev.permissions, permission.value],\n                            }));\n                          } else {\n                            setNewApiKeyData(prev => ({\n                              ...prev,\n                              permissions: prev.permissions.filter(p => p !== permission.value),\n                            }));\n                          }\n                        }}\n                        className='mt-1'\n                      />\n                      <div>\n                        <span className='text-sm text-gray-700 font-medium'>\n                          {permission.label}\n                        </span>\n                        <p className='text-xs text-gray-500'>{permission.description}</p>\n                      </div>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>\n                  Access Scopes\n                </label>\n                <div className='space-y-2'>\n                  {scopeOptions.map(scope => (\n                    <label key={scope.value} className='flex items-start space-x-3'>\n                      <input\n                        type='checkbox'\n                        checked={newApiKeyData.scopes.includes(scope.value)}\n                        onChange={e => {\n                          if (e.target.checked) {\n                            setNewApiKeyData(prev => ({\n                              ...prev,\n                              scopes: [...prev.scopes, scope.value],\n                            }));\n                          } else {\n                            setNewApiKeyData(prev => ({\n                              ...prev,\n                              scopes: prev.scopes.filter(s => s !== scope.value),\n                            }));\n                          }\n                        }}\n                        className='mt-1'\n                      />\n                      <div>\n                        <span className='text-sm text-gray-700 font-medium'>{scope.label}</span>\n                        <p className='text-xs text-gray-500'>{scope.description}</p>\n                      </div>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div className='grid grid-cols-2 gap-4'>\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    Rate Limit (requests/hour)\n                  </label>\n                  <input\n                    type='number'\n                    value={newApiKeyData.rateLimitRequests}\n                    onChange={e =>\n                      setNewApiKeyData(prev => ({\n                        ...prev,\n                        rateLimitRequests: parseInt(e.target.value),\n                      }))\n                    }\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                    min='1'\n                    max='10000'\n                  />\n                </div>\n\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-1'>\n                    Expires At (Optional)\n                  </label>\n                  <input\n                    type='datetime-local'\n                    value={newApiKeyData.expiresAt || ''}\n                    onChange={e =>\n                      setNewApiKeyData(prev => ({ ...prev, expiresAt: e.target.value || null }))\n                    }\n                    className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className='mt-6 flex justify-end space-x-3'>\n              <button\n                onClick={() => setNewApiKeyModal(false)}\n                className='px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200'\n              >\n                Cancel\n              </button>\n              <button\n                onClick={generateApiKey}\n                disabled={!newApiKeyData.name || newApiKeyData.permissions.length === 0 || isSaving}\n                className='px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50'\n              >\n                {isSaving ? 'Generating...' : 'Generate Key'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Generated Key Display Modal */}\n      {generatedKey && (\n        <div className='fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg p-6 max-w-md w-full mx-4'>\n            <div className='flex items-center space-x-3 mb-4'>\n              <CheckCircleIcon className='h-8 w-8 text-green-500' />\n              <h3 className='text-lg font-medium text-gray-900'>API Key Generated!</h3>\n            </div>\n\n            <div className='bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4'>\n              <label className='block text-sm font-medium text-gray-700 mb-2'>\n                Your API Key (Copy this now - it won't be shown again)\n              </label>\n              <div className='flex items-center space-x-2'>\n                <code className='flex-1 text-sm bg-white border border-gray-200 rounded px-3 py-2 font-mono'>\n                  {generatedKey.key}\n                </code>\n                <button\n                  onClick={() => copyToClipboard(generatedKey.key)}\n                  className='p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded'\n                >\n                  <ClipboardDocumentIcon className='h-5 w-5' />\n                </button>\n              </div>\n            </div>\n\n            <div className='bg-amber-50 border border-amber-200 rounded-lg p-4 mb-4'>\n              <div className='flex items-start space-x-2'>\n                <ExclamationTriangleIcon className='h-5 w-5 text-amber-600 mt-0.5' />\n                <div>\n                  <p className='text-sm text-amber-800 font-medium'>Important Security Notice</p>\n                  <p className='text-sm text-amber-700 mt-1'>\n                    Store this API key securely. It won't be displayed again and provides access to\n                    your account data.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className='flex justify-end'>\n              <button\n                onClick={() => setGeneratedKey(null)}\n                className='px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700'\n              >\n                I've Saved It Securely\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderIntegrations = () => (\n    <div className='space-y-6'>\n      <div>\n        <h4 className='text-lg font-medium text-gray-900 mb-2'>\n          {t('integrations.thirdParty.title', 'Third-Party Integrations')}\n        </h4>\n        <p className='text-sm text-gray-600'>\n          {t(\n            'integrations.thirdParty.description',\n            'Connect with external services to enhance your workflow.',\n          )}\n        </p>\n      </div>\n\n      {Object.entries(integrations).map(([category, services]) => (\n        <div key={category} className='bg-white border border-gray-200 rounded-lg p-6'>\n          <h5 className='text-md font-medium text-gray-900 mb-4 capitalize'>\n            {category.replace(/([A-Z])/g, ' Ôé¼1').trim()}\n          </h5>\n\n          <div className='grid gap-4 sm:grid-cols-2 lg:grid-cols-3'>\n            {Object.entries(services).map(([service, config]) => (\n              <div\n                key={service}\n                className='border border-gray-100 rounded-lg p-4 hover:border-gray-200 transition-colors'\n              >\n                <div className='flex items-center justify-between mb-3'>\n                  <h6 className='text-sm font-medium text-gray-900 capitalize'>\n                    {service.replace(/([A-Z])/g, ' Ôé¼1').trim()}\n                  </h6>\n                  {config.connected ? (\n                    <CheckCircleIcon className='h-5 w-5 text-green-500' />\n                  ) : (\n                    <XCircleIcon className='h-5 w-5 text-gray-400' />\n                  )}\n                </div>\n\n                <div className='space-y-2 mb-4'>\n                  <p className='text-xs text-gray-500'>\n                    Status:{' '}\n                    <span\n                      className={config.connected ? 'text-green-600 font-medium' : 'text-gray-500'}\n                    >\n                      {config.status}\n                    </span>\n                  </p>\n\n                  {config.connected && config.lastSync && (\n                    <p className='text-xs text-gray-500'>\n                      Last sync: {formatDate(config.lastSync)}\n                    </p>\n                  )}\n\n                  {config.syncStatus === 'error' && (\n                    <p className='text-xs text-red-600'>Sync error detected</p>\n                  )}\n                </div>\n\n                <div className='flex flex-col space-y-2'>\n                  {config.connected ? (\n                    <>\n                      <div className='flex space-x-2'>\n                        <button\n                          onClick={() => syncIntegration(category, service)}\n                          className='flex-1 flex items-center justify-center space-x-1 px-3 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded hover:bg-blue-200 transition-colors'\n                          disabled={isSaving}\n                        >\n                          <ArrowPathIcon className='h-3 w-3' />\n                          <span>Sync</span>\n                        </button>\n                        <button\n                          onClick={() => openConfigModal(category, service)}\n                          className='flex-1 flex items-center justify-center space-x-1 px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded hover:bg-gray-200 transition-colors'\n                        >\n                          <Cog6ToothIcon className='h-3 w-3' />\n                          <span>Config</span>\n                        </button>\n                      </div>\n                      <button\n                        onClick={() => disconnectIntegration(category, service)}\n                        className='w-full px-3 py-1 text-xs font-medium text-red-700 bg-red-100 rounded hover:bg-red-200 transition-colors'\n                        disabled={isSaving}\n                      >\n                        Disconnect\n                      </button>\n                    </>\n                  ) : (\n                    <button\n                      onClick={() => connectIntegration(category, service)}\n                      className='w-full flex items-center justify-center space-x-1 px-3 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded hover:bg-blue-200 transition-colors'\n                      disabled={isSaving}\n                    >\n                      <LinkIcon className='h-3 w-3' />\n                      <span>Connect</span>\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n\n      {/* Integration Configuration Modal */}\n      {configModal.open && (\n        <div className='fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50'>\n          <div className='bg-white rounded-lg p-6 max-w-md w-full mx-4'>\n            <h3 className='text-lg font-medium text-gray-900 mb-4'>\n              Configure {configModal.service}\n            </h3>\n\n            <div className='space-y-4'>\n              <div>\n                <label className='block text-sm font-medium text-gray-700 mb-1'>\n                  Sync Frequency\n                </label>\n                <select\n                  value={configModal.data.syncFrequency || 'daily'}\n                  onChange={e =>\n                    setConfigModal(prev => ({\n                      ...prev,\n                      data: { ...prev.data, syncFrequency: e.target.value },\n                    }))\n                  }\n                  className='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'\n                >\n                  <option value='hourly'>Every Hour</option>\n                  <option value='daily'>Daily</option>\n                  <option value='weekly'>Weekly</option>\n                  <option value='manual'>Manual Only</option>\n                </select>\n              </div>\n\n              <div>\n                <label className='flex items-center space-x-2'>\n                  <input\n                    type='checkbox'\n                    checked={configModal.data.enableWebhooks || false}\n                    onChange={e =>\n                      setConfigModal(prev => ({\n                        ...prev,\n                        data: { ...prev.data, enableWebhooks: e.target.checked },\n                      }))\n                    }\n                  />\n                  <span className='text-sm text-gray-700'>Enable Webhooks</span>\n                </label>\n              </div>\n\n              <div>\n                <label className='flex items-center space-x-2'>\n                  <input\n                    type='checkbox'\n                    checked={configModal.data.bidirectionalSync || false}\n                    onChange={e =>\n                      setConfigModal(prev => ({\n                        ...prev,\n                        data: { ...prev.data, bidirectionalSync: e.target.checked },\n                      }))\n                    }\n                  />\n                  <span className='text-sm text-gray-700'>Bidirectional Sync</span>\n                </label>\n              </div>\n            </div>\n\n            <div className='mt-6 flex justify-end space-x-3'>\n              <button\n                onClick={() => setConfigModal({ open: false, service: null, data: {} })}\n                className='px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200'\n              >\n                Cancel\n              </button>\n              <button\n                onClick={saveIntegrationConfig}\n                disabled={isSaving}\n                className='px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50'\n              >\n                {isSaving ? 'Saving...' : 'Save Configuration'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderActivityTab = () => (\n    <div className='space-y-6'>\n      <div>\n        <h4 className='text-lg font-medium text-gray-900 mb-2'>Integration Activity</h4>\n        <p className='text-sm text-gray-600'>Monitor API usage and integration sync history.</p>\n      </div>\n\n      <div className='bg-white border border-gray-200 rounded-lg'>\n        <div className='px-6 py-4 border-b border-gray-200'>\n          <h5 className='text-md font-medium text-gray-900'>Recent Activity</h5>\n        </div>\n\n        {activityHistory.length === 0 ? (\n          <div className='p-8 text-center'>\n            <ChartBarIcon className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n            <p className='text-gray-600'>No activity recorded yet</p>\n          </div>\n        ) : (\n          <div className='overflow-x-auto'>\n            <table className='min-w-full divide-y divide-gray-200'>\n              <thead className='bg-gray-50'>\n                <tr>\n                  <th className='px-6 py-3 text-left text-table-header text-gray-500 uppercase tracking-wider'>\n                    Activity\n                  </th>\n                  <th className='px-6 py-3 text-left text-table-header text-gray-500 uppercase tracking-wider'>\n                    Service\n                  </th>\n                  <th className='px-6 py-3 text-left text-table-header text-gray-500 uppercase tracking-wider'>\n                    Status\n                  </th>\n                  <th className='px-6 py-3 text-left text-table-header text-gray-500 uppercase tracking-wider'>\n                    Time\n                  </th>\n                </tr>\n              </thead>\n              <tbody className='bg-white divide-y divide-gray-200'>\n                {activityHistory.map(activity => (\n                  <tr key={activity.id}>\n                    <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                      {activity.activity_type}\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-600'>\n                      {activity.service_name || 'API Key'}\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap'>\n                      <span\n                        className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                          activity.activity_status === 'success'\n                            ? 'bg-green-100 text-green-800'\n                            : activity.activity_status === 'error'\n                              ? 'bg-red-100 text-red-800'\n                              : 'bg-yellow-100 text-yellow-800'\n                        }`}\n                      >\n                        {activity.activity_status}\n                      </span>\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-600'>\n                      {formatDate(activity.created_at)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access integrations settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className='flex justify-center items-center h-64'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      <div>\n        <h3 className='text-lg leading-6 font-medium text-gray-900'>\n          {t('integrations.title', 'Integrations')}\n        </h3>\n        <p className='mt-1 text-sm text-gray-500'>\n          {t(\n            'integrations.description',\n            'Manage API access and connect with third-party services.',\n          )}\n        </p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className='border-b border-gray-200'>\n        <nav className='-mb-px flex space-x-8'>\n          {[\n            { key: 'apiKeys', label: 'API Keys', icon: KeyIcon },\n            { key: 'integrations', label: 'Connected Services', icon: LinkIcon },\n            { key: 'activity', label: 'Activity', icon: ChartBarIcon },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setActiveTab(key)}\n              className={`whitespace-nowrap pb-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                activeTab === key\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Icon className='h-4 w-4' />\n              <span>{label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'apiKeys' && renderApiKeys()}\n      {activeTab === 'integrations' && renderIntegrations()}\n      {activeTab === 'activity' && renderActivityTab()}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\IntegrationsSettingsFallback.jsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":12,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":12,"endColumn":14,"suggestions":[{"fix":{"range":[265,343],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":16,"suggestions":[{"fix":{"range":[1000,1117],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":52,"endColumn":16,"suggestions":[{"fix":{"range":[1297,1417],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  LinkIcon,\n  CloudIcon,\n  CreditCardIcon,\n  DocumentTextIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function IntegrationsSettingsFallback({ showNotification }) {\n  console.log('­ƒöù IntegrationsSettingsFallback: Component mounted - Demo Mode');\n\n  const [integrations] = useState([\n    {\n      id: 'stripe',\n      name: 'Stripe',\n      description: 'Elaborazione pagamenti online',\n      icon: CreditCardIcon,\n      connected: true,\n      status: 'active',\n    },\n    {\n      id: 'google-drive',\n      name: 'Google Drive',\n      description: 'Archiviazione documenti cloud',\n      icon: CloudIcon,\n      connected: false,\n      status: 'disconnected',\n    },\n    {\n      id: 'dropbox',\n      name: 'Dropbox',\n      description: 'Backup e sincronizzazione file',\n      icon: DocumentTextIcon,\n      connected: true,\n      status: 'active',\n    },\n  ]);\n\n  const handleConnect = integrationId => {\n    console.log(\n      '­ƒöù IntegrationsSettingsFallback: Connecting integration (Demo Mode)',\n      integrationId,\n    );\n    if (showNotification) {\n      showNotification(`Connessione a ${integrationId} avviata (Demo Mode)`, 'success');\n    }\n  };\n\n  const handleDisconnect = integrationId => {\n    console.log(\n      '­ƒöù IntegrationsSettingsFallback: Disconnecting integration (Demo Mode)',\n      integrationId,\n    );\n    if (showNotification) {\n      showNotification(`Disconnessione da ${integrationId} completata (Demo Mode)`, 'success');\n    }\n  };\n\n  return (\n    <div className='space-y-6'>\n      {/* Demo Mode Banner */}\n      <div className='bg-blue-50 border-l-4 border-blue-400 p-4'>\n        <div className='flex'>\n          <LinkIcon className='h-5 w-5 text-blue-400' />\n          <div className='ml-3'>\n            <p className='text-sm text-blue-700'>\n              <strong>Modalit├á Demo:</strong> Integrazioni simulate per testing locale.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Available Integrations */}\n      <div className='bg-white shadow rounded-lg'>\n        <div className='px-6 py-4 border-b border-gray-200'>\n          <h3 className='text-lg font-medium text-gray-900'>Integrazioni Disponibili</h3>\n          <p className='text-sm text-gray-500'>\n            Connetti servizi esterni per migliorare il tuo workflow\n          </p>\n        </div>\n\n        <div className='divide-y divide-gray-200'>\n          {integrations.map(integration => (\n            <div key={integration.id} className='p-6'>\n              <div className='flex items-center justify-between'>\n                <div className='flex items-center'>\n                  <integration.icon className='h-10 w-10 text-gray-400' />\n                  <div className='ml-4'>\n                    <h4 className='text-lg font-medium text-gray-900'>{integration.name}</h4>\n                    <p className='text-sm text-gray-500'>{integration.description}</p>\n                  </div>\n                </div>\n\n                <div className='flex items-center space-x-3'>\n                  {integration.connected ? (\n                    <>\n                      <div className='flex items-center'>\n                        <CheckCircleIcon className='h-5 w-5 text-green-500 mr-2' />\n                        <span className='text-sm text-green-600'>Connesso</span>\n                      </div>\n                      <button\n                        onClick={() => handleDisconnect(integration.id)}\n                        className='bg-red-600 text-white px-4 py-2 rounded-md text-sm hover:bg-red-700'\n                      >\n                        Disconnetti\n                      </button>\n                    </>\n                  ) : (\n                    <>\n                      <div className='flex items-center'>\n                        <XCircleIcon className='h-5 w-5 text-gray-400 mr-2' />\n                        <span className='text-sm text-gray-500'>Non connesso</span>\n                      </div>\n                      <button\n                        onClick={() => handleConnect(integration.id)}\n                        className='bg-blue-600 text-white px-4 py-2 rounded-md text-sm hover:bg-blue-700'\n                      >\n                        Connetti\n                      </button>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {integration.connected && (\n                <div className='mt-4 p-3 bg-green-50 rounded-md'>\n                  <p className='text-sm text-green-700'>Ô£à Integrazione attiva e funzionante</p>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Integration Settings */}\n      <div className='bg-white shadow rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4'>Impostazioni Globali</h3>\n\n        <div className='space-y-4'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <h4 className='text-sm font-medium text-gray-900'>Sincronizzazione Automatica</h4>\n              <p className='text-sm text-gray-500'>\n                Sincronizza automaticamente i dati con i servizi connessi\n              </p>\n            </div>\n            <button className='relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-blue-600 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'>\n              <span className='pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out translate-x-5' />\n            </button>\n          </div>\n\n          <div className='flex items-center justify-between'>\n            <div>\n              <h4 className='text-sm font-medium text-gray-900'>Notifiche Integrazione</h4>\n              <p className='text-sm text-gray-500'>Ricevi notifiche per errori di connessione</p>\n            </div>\n            <button className='relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-blue-600 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'>\n              <span className='pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out translate-x-5' />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\NotificationSettings.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNotificationPreferences'. Either include it or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loadNotificationPreferences, user]","fix":{"range":[1707,1730],"text":"[isAuthenticated, loadNotificationPreferences, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport {\n  BellIcon,\n  EnvelopeIcon,\n  DevicePhoneMobileIcon,\n  CogIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function NotificationSettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useUser();\n  const { isAuthenticated } = useClerkAuth();\n  const [loading, setLoading] = useState(false);\n  const [preferences, setPreferences] = useState({\n    email: {\n      invoices: true,\n      payments: true,\n      quotes: true,\n      clients: false,\n      reports: true,\n      security: true,\n      marketing: false,\n      systemUpdates: true,\n    },\n    sms: {\n      invoices: false,\n      payments: true,\n      quotes: false,\n      clients: false,\n      reports: false,\n      security: true,\n      marketing: false,\n      systemUpdates: false,\n    },\n    push: {\n      invoices: true,\n      payments: true,\n      quotes: true,\n      clients: true,\n      reports: false,\n      security: true,\n      marketing: false,\n      systemUpdates: true,\n    },\n    frequency: {\n      digest: 'daily', // daily, weekly, monthly, never\n      reminders: 'enabled', // enabled, disabled\n      quietHours: {\n        enabled: true,\n        start: '22:00',\n        end: '08:00',\n      },\n    },\n  });\n\n  const [emailAddress, setEmailAddress] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadNotificationPreferences();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadNotificationPreferences = async () => {\n    setLoading(true);\n    try {\n      // Load user's email and phone from Clerk\n      if (user) {\n        setEmailAddress(user.primaryEmailAddress?.emailAddress || '');\n        setPhoneNumber(user.primaryPhoneNumber?.phoneNumber || '');\n      }\n\n      // Load notification preferences from localStorage or API\n      const savedPreferences = localStorage.getItem('notificationPreferences');\n      if (savedPreferences) {\n        setPreferences(prev => ({ ...prev, ...JSON.parse(savedPreferences) }));\n      }\n    } catch (error) {\n      console.error('Error loading notification preferences:', error);\n      showNotification('Error loading notification preferences', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePreference = async (category, type, value) => {\n    const newPreferences = {\n      ...preferences,\n      [category]: {\n        ...preferences[category],\n        [type]: value,\n      },\n    };\n\n    setPreferences(newPreferences);\n\n    try {\n      // Save to localStorage (replace with API call)\n      localStorage.setItem('notificationPreferences', JSON.stringify(newPreferences));\n      showNotification('Notification preferences updated', 'success');\n    } catch (error) {\n      console.error('Error saving preferences:', error);\n      showNotification('Error saving preferences', 'error');\n    }\n  };\n\n  const updateFrequencyPreference = async (type, value) => {\n    const newPreferences = {\n      ...preferences,\n      frequency: {\n        ...preferences.frequency,\n        [type]: value,\n      },\n    };\n\n    setPreferences(newPreferences);\n\n    try {\n      localStorage.setItem('notificationPreferences', JSON.stringify(newPreferences));\n      showNotification('Frequency preferences updated', 'success');\n    } catch (error) {\n      console.error('Error saving frequency preferences:', error);\n      showNotification('Error saving preferences', 'error');\n    }\n  };\n\n  const updateQuietHours = async (field, value) => {\n    const newPreferences = {\n      ...preferences,\n      frequency: {\n        ...preferences.frequency,\n        quietHours: {\n          ...preferences.frequency.quietHours,\n          [field]: value,\n        },\n      },\n    };\n\n    setPreferences(newPreferences);\n\n    try {\n      localStorage.setItem('notificationPreferences', JSON.stringify(newPreferences));\n      showNotification('Quiet hours updated', 'success');\n    } catch (error) {\n      console.error('Error saving quiet hours:', error);\n      showNotification('Error saving preferences', 'error');\n    }\n  };\n\n  const sendTestNotification = async channel => {\n    setLoading(true);\n    try {\n      // Mock sending test notification\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      showNotification(`Test ${channel} notification sent successfully`, 'success');\n    } catch (error) {\n      console.error('Error sending test notification:', error);\n      showNotification('Error sending test notification', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const notificationTypes = [\n    {\n      key: 'invoices',\n      name: t('notifications.types.invoices', 'Invoices'),\n      description: t(\n        'notifications.types.invoicesDesc',\n        'New invoices, payment confirmations, overdue notices',\n      ),\n    },\n    {\n      key: 'payments',\n      name: t('notifications.types.payments', 'Payments'),\n      description: t(\n        'notifications.types.paymentsDesc',\n        'Payment received, failed payments, refunds',\n      ),\n    },\n    {\n      key: 'quotes',\n      name: t('notifications.types.quotes', 'Quotes'),\n      description: t('notifications.types.quotesDesc', 'Quote requests, approvals, expirations'),\n    },\n    {\n      key: 'clients',\n      name: t('notifications.types.clients', 'Clients'),\n      description: t(\n        'notifications.types.clientsDesc',\n        'New client registrations, profile updates',\n      ),\n    },\n    {\n      key: 'reports',\n      name: t('notifications.types.reports', 'Reports'),\n      description: t('notifications.types.reportsDesc', 'Weekly summaries, financial reports'),\n    },\n    {\n      key: 'security',\n      name: t('notifications.types.security', 'Security'),\n      description: t(\n        'notifications.types.securityDesc',\n        'Login alerts, security updates, suspicious activity',\n      ),\n    },\n    {\n      key: 'marketing',\n      name: t('notifications.types.marketing', 'Marketing'),\n      description: t(\n        'notifications.types.marketingDesc',\n        'Product updates, newsletters, promotional offers',\n      ),\n    },\n    {\n      key: 'systemUpdates',\n      name: t('notifications.types.system', 'System Updates'),\n      description: t(\n        'notifications.types.systemDesc',\n        'Maintenance notices, feature announcements',\n      ),\n    },\n  ];\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access notification settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h3 className='text-lg font-medium text-gray-900'>\n          {t('notifications.title', 'Notification Settings')}\n        </h3>\n        <p className='mt-1 text-sm text-gray-600'>\n          {t('notifications.description', 'Choose how and when you want to receive notifications.')}\n        </p>\n      </div>\n\n      {/* Contact Information */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h4 className='text-sm font-medium text-gray-900 mb-4'>\n          {t('notifications.contact.title', 'Contact Information')}\n        </h4>\n        <div className='space-y-4'>\n          <div className='flex items-center space-x-3'>\n            <EnvelopeIcon className='w-5 h-5 text-gray-400' />\n            <div className='flex-1'>\n              <label className='block text-sm font-medium text-gray-700'>\n                {t('notifications.contact.email', 'Email Address')}\n              </label>\n              <p className='text-sm text-gray-600'>{emailAddress || 'No email address'}</p>\n            </div>\n            <button\n              onClick={() => sendTestNotification('email')}\n              className='text-sm text-blue-600 hover:text-blue-700 font-medium'\n            >\n              {t('notifications.contact.testEmail', 'Test Email')}\n            </button>\n          </div>\n\n          <div className='flex items-center space-x-3'>\n            <DevicePhoneMobileIcon className='w-5 h-5 text-gray-400' />\n            <div className='flex-1'>\n              <label className='block text-sm font-medium text-gray-700'>\n                {t('notifications.contact.phone', 'Phone Number')}\n              </label>\n              <p className='text-sm text-gray-600'>{phoneNumber || 'No phone number'}</p>\n            </div>\n            <button\n              onClick={() => sendTestNotification('SMS')}\n              className='text-sm text-blue-600 hover:text-blue-700 font-medium'\n            >\n              {t('notifications.contact.testSMS', 'Test SMS')}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Notification Preferences */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h4 className='text-sm font-medium text-gray-900 mb-4'>\n          {t('notifications.preferences.title', 'Notification Preferences')}\n        </h4>\n\n        <div className='overflow-x-auto'>\n          <table className='min-w-full'>\n            <thead>\n              <tr className='border-b border-gray-200'>\n                <th className='text-left py-3 pr-4 text-sm font-medium text-gray-900'>\n                  {t('notifications.preferences.type', 'Notification Type')}\n                </th>\n                <th className='text-center py-3 px-2 text-sm font-medium text-gray-900'>\n                  <EnvelopeIcon className='w-5 h-5 mx-auto' />\n                  <span className='sr-only'>Email</span>\n                </th>\n                <th className='text-center py-3 px-2 text-sm font-medium text-gray-900'>\n                  <DevicePhoneMobileIcon className='w-5 h-5 mx-auto' />\n                  <span className='sr-only'>SMS</span>\n                </th>\n                <th className='text-center py-3 px-2 text-sm font-medium text-gray-900'>\n                  <BellIcon className='w-5 h-5 mx-auto' />\n                  <span className='sr-only'>Push</span>\n                </th>\n              </tr>\n            </thead>\n            <tbody className='divide-y divide-gray-200'>\n              {notificationTypes.map(type => (\n                <tr key={type.key} className='hover:bg-gray-50'>\n                  <td className='py-4 pr-4'>\n                    <div>\n                      <p className='text-sm font-medium text-gray-900'>{type.name}</p>\n                      <p className='text-xs text-gray-600'>{type.description}</p>\n                    </div>\n                  </td>\n                  <td className='text-center py-4 px-2'>\n                    <button\n                      onClick={() =>\n                        updatePreference('email', type.key, !preferences.email[type.key])\n                      }\n                      className='text-gray-400 hover:text-gray-600'\n                    >\n                      {preferences.email[type.key] ? (\n                        <CheckCircleIcon className='w-5 h-5 text-green-600' />\n                      ) : (\n                        <XCircleIcon className='w-5 h-5 text-gray-300' />\n                      )}\n                    </button>\n                  </td>\n                  <td className='text-center py-4 px-2'>\n                    <button\n                      onClick={() => updatePreference('sms', type.key, !preferences.sms[type.key])}\n                      className='text-gray-400 hover:text-gray-600'\n                    >\n                      {preferences.sms[type.key] ? (\n                        <CheckCircleIcon className='w-5 h-5 text-green-600' />\n                      ) : (\n                        <XCircleIcon className='w-5 h-5 text-gray-300' />\n                      )}\n                    </button>\n                  </td>\n                  <td className='text-center py-4 px-2'>\n                    <button\n                      onClick={() =>\n                        updatePreference('push', type.key, !preferences.push[type.key])\n                      }\n                      className='text-gray-400 hover:text-gray-600'\n                    >\n                      {preferences.push[type.key] ? (\n                        <CheckCircleIcon className='w-5 h-5 text-green-600' />\n                      ) : (\n                        <XCircleIcon className='w-5 h-5 text-gray-300' />\n                      )}\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Frequency Settings */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <div className='flex items-center space-x-3 mb-4'>\n          <CogIcon className='w-6 h-6 text-blue-600' />\n          <h4 className='text-sm font-medium text-gray-900'>\n            {t('notifications.frequency.title', 'Frequency Settings')}\n          </h4>\n        </div>\n\n        <div className='space-y-6'>\n          {/* Digest Frequency */}\n          <div>\n            <label className='block text-sm font-medium text-gray-700 mb-2'>\n              {t('notifications.frequency.digest', 'Email Digest Frequency')}\n            </label>\n            <select\n              value={preferences.frequency.digest}\n              onChange={e => updateFrequencyPreference('digest', e.target.value)}\n              className='block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm'\n            >\n              <option value='never'>{t('notifications.frequency.never', 'Never')}</option>\n              <option value='daily'>{t('notifications.frequency.daily', 'Daily')}</option>\n              <option value='weekly'>{t('notifications.frequency.weekly', 'Weekly')}</option>\n              <option value='monthly'>{t('notifications.frequency.monthly', 'Monthly')}</option>\n            </select>\n          </div>\n\n          {/* Reminders */}\n          <div className='flex items-center justify-between'>\n            <div>\n              <label className='text-sm font-medium text-gray-700'>\n                {t('notifications.frequency.reminders', 'Payment Reminders')}\n              </label>\n              <p className='text-xs text-gray-600'>\n                {t('notifications.frequency.remindersDesc', 'Send reminders for overdue invoices')}\n              </p>\n            </div>\n            <button\n              onClick={() =>\n                updateFrequencyPreference(\n                  'reminders',\n                  preferences.frequency.reminders === 'enabled' ? 'disabled' : 'enabled',\n                )\n              }\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                preferences.frequency.reminders === 'enabled' ? 'bg-blue-600' : 'bg-gray-200'\n              }`}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  preferences.frequency.reminders === 'enabled' ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n          </div>\n\n          {/* Quiet Hours */}\n          <div>\n            <div className='flex items-center justify-between mb-3'>\n              <div>\n                <label className='text-sm font-medium text-gray-700'>\n                  {t('notifications.frequency.quietHours', 'Quiet Hours')}\n                </label>\n                <p className='text-xs text-gray-600'>\n                  {t(\n                    'notifications.frequency.quietHoursDesc',\n                    'Disable notifications during these hours',\n                  )}\n                </p>\n              </div>\n              <button\n                onClick={() =>\n                  updateQuietHours('enabled', !preferences.frequency.quietHours.enabled)\n                }\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                  preferences.frequency.quietHours.enabled ? 'bg-blue-600' : 'bg-gray-200'\n                }`}\n              >\n                <span\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                    preferences.frequency.quietHours.enabled ? 'translate-x-6' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n            </div>\n\n            {preferences.frequency.quietHours.enabled && (\n              <div className='grid grid-cols-2 gap-4'>\n                <div>\n                  <label className='block text-xs font-medium text-gray-700 mb-1'>\n                    {t('notifications.frequency.startTime', 'Start Time')}\n                  </label>\n                  <input\n                    type='time'\n                    value={preferences.frequency.quietHours.start}\n                    onChange={e => updateQuietHours('start', e.target.value)}\n                    className='block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm'\n                  />\n                </div>\n                <div>\n                  <label className='block text-xs font-medium text-gray-700 mb-1'>\n                    {t('notifications.frequency.endTime', 'End Time')}\n                  </label>\n                  <input\n                    type='time'\n                    value={preferences.frequency.quietHours.end}\n                    onChange={e => updateQuietHours('end', e.target.value)}\n                    className='block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm'\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\NotificationSettingsFallback.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":20,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":20,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":21,"endColumn":16,"suggestions":[{"fix":{"range":[686,762],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":16,"suggestions":[{"fix":{"range":[802,876],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":26,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":27,"endColumn":91}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { BellIcon, DevicePhoneMobileIcon, EnvelopeIcon } from '@heroicons/react/24/outline';\n\nconst NotificationSettingsFallback = ({ settings, onSettingsChange, showNotification }) => {\n  const [localSettings, setLocalSettings] = useState(\n    settings || {\n      email: true,\n      push: true,\n      sms: false,\n      invoiceReminders: true,\n      paymentConfirmations: true,\n      quoteUpdates: true,\n      systemUpdates: false,\n    },\n  );\n\n  const handleToggle = key => {\n    const newSettings = { ...localSettings, [key]: !localSettings[key] };\n    setLocalSettings(newSettings);\n    onSettingsChange && onSettingsChange(newSettings);\n    console.log('­ƒöö Notification setting changed:', key, 'ÔåÆ', newSettings[key]);\n  };\n\n  const handleSave = () => {\n    console.log('­ƒÆ¥ Notification settings saved (demo mode):', localSettings);\n    showNotification &&\n      showNotification('Notification settings saved successfully (demo mode)', 'success');\n  };\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h2 className='text-2xl font-bold text-gray-900'>Notification Settings</h2>\n        <p className='mt-1 text-sm text-gray-600'>\n          Manage how you receive notifications and updates\n        </p>\n        <div className='mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg'>\n          <p className='text-sm text-blue-700'>\n            ­ƒº¬ <strong>Demo Mode:</strong> This is a simplified version. Changes are not saved to\n            the database.\n          </p>\n        </div>\n      </div>\n\n      {/* General Notifications */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4 flex items-center'>\n          <BellIcon className='h-5 w-5 mr-2' />\n          General Notifications\n        </h3>\n        <p className='text-sm text-gray-600 mb-6'>Choose how you want to receive notifications</p>\n\n        <div className='space-y-4'>\n          {/* Email Notifications */}\n          <div className='flex items-center justify-between'>\n            <div className='flex items-center'>\n              <EnvelopeIcon className='h-5 w-5 text-gray-400 mr-3' />\n              <div>\n                <p className='text-sm font-medium text-gray-900'>Email Notifications</p>\n                <p className='text-sm text-gray-500'>Receive notifications via email</p>\n              </div>\n            </div>\n            <button\n              type='button'\n              onClick={() => handleToggle('email')}\n              className={`${\n                localSettings.email ? 'bg-blue-600' : 'bg-gray-200'\n              } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}\n            >\n              <span\n                className={`${\n                  localSettings.email ? 'translate-x-5' : 'translate-x-0'\n                } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\n              />\n            </button>\n          </div>\n\n          {/* Push Notifications */}\n          <div className='flex items-center justify-between'>\n            <div className='flex items-center'>\n              <DevicePhoneMobileIcon className='h-5 w-5 text-gray-400 mr-3' />\n              <div>\n                <p className='text-sm font-medium text-gray-900'>Push Notifications</p>\n                <p className='text-sm text-gray-500'>Receive push notifications on your device</p>\n              </div>\n            </div>\n            <button\n              type='button'\n              onClick={() => handleToggle('push')}\n              className={`${\n                localSettings.push ? 'bg-blue-600' : 'bg-gray-200'\n              } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}\n            >\n              <span\n                className={`${\n                  localSettings.push ? 'translate-x-5' : 'translate-x-0'\n                } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\n              />\n            </button>\n          </div>\n\n          {/* SMS Notifications */}\n          <div className='flex items-center justify-between'>\n            <div className='flex items-center'>\n              <BellIcon className='h-5 w-5 text-gray-400 mr-3' />\n              <div>\n                <p className='text-sm font-medium text-gray-900'>SMS Notifications</p>\n                <p className='text-sm text-gray-500'>Receive notifications via SMS</p>\n              </div>\n            </div>\n            <button\n              type='button'\n              onClick={() => handleToggle('sms')}\n              className={`${\n                localSettings.sms ? 'bg-blue-600' : 'bg-gray-200'\n              } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}\n            >\n              <span\n                className={`${\n                  localSettings.sms ? 'translate-x-5' : 'translate-x-0'\n                } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\n              />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Business Notifications */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4'>Business Notifications</h3>\n        <p className='text-sm text-gray-600 mb-6'>Configure notifications for business events</p>\n\n        <div className='space-y-4'>\n          {/* Invoice Reminders */}\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-sm font-medium text-gray-900'>Invoice Reminders</p>\n              <p className='text-sm text-gray-500'>Get notified about overdue invoices</p>\n            </div>\n            <button\n              type='button'\n              onClick={() => handleToggle('invoiceReminders')}\n              className={`${\n                localSettings.invoiceReminders ? 'bg-blue-600' : 'bg-gray-200'\n              } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}\n            >\n              <span\n                className={`${\n                  localSettings.invoiceReminders ? 'translate-x-5' : 'translate-x-0'\n                } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\n              />\n            </button>\n          </div>\n\n          {/* Payment Confirmations */}\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-sm font-medium text-gray-900'>Payment Confirmations</p>\n              <p className='text-sm text-gray-500'>Get notified when payments are received</p>\n            </div>\n            <button\n              type='button'\n              onClick={() => handleToggle('paymentConfirmations')}\n              className={`${\n                localSettings.paymentConfirmations ? 'bg-blue-600' : 'bg-gray-200'\n              } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}\n            >\n              <span\n                className={`${\n                  localSettings.paymentConfirmations ? 'translate-x-5' : 'translate-x-0'\n                } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\n              />\n            </button>\n          </div>\n\n          {/* Quote Updates */}\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-sm font-medium text-gray-900'>Quote Updates</p>\n              <p className='text-sm text-gray-500'>Get notified about quote status changes</p>\n            </div>\n            <button\n              type='button'\n              onClick={() => handleToggle('quoteUpdates')}\n              className={`${\n                localSettings.quoteUpdates ? 'bg-blue-600' : 'bg-gray-200'\n              } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}\n            >\n              <span\n                className={`${\n                  localSettings.quoteUpdates ? 'translate-x-5' : 'translate-x-0'\n                } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\n              />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Save Button */}\n      <div className='flex justify-end'>\n        <button\n          onClick={handleSave}\n          className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n        >\n          Save Notification Settings\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationSettingsFallback;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\NotificationsSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\ProfileSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\ProfileSectionOptimized.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\ProfileSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowUpTrayIcon' is defined but never used.","line":2,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchUserProfile' and 'showNotification'. Either include them or remove the dependency array. If 'showNotification' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserProfile, isSignedIn, showNotification, user]","fix":{"range":[1296,1314],"text":"[fetchUserProfile, isSignedIn, showNotification, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { PhotoIcon, ArrowUpTrayIcon } from '@heroicons/react/24/outline';\nimport { useAuthBypass as useAuth, useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { supabase } from '@lib/supabaseClient';\nimport Logger from '@utils/Logger';\nimport { useTranslation } from 'react-i18next';\n\nexport default function ProfileSettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { isSignedIn } = useAuth();\n  const { user } = useUser();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [profileData, setProfileData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    companyName: '',\n    position: '',\n    address: '',\n    bio: '',\n    avatarUrl: '/assets/profile.jpg',\n  });\n\n  // Fetch user profile on component mount\n  useEffect(() => {\n    if (isSignedIn && user) {\n      try {\n        fetchUserProfile();\n      } catch (error) {\n        Logger.error('Error in useEffect during profile fetch:', error);\n        setIsLoading(false);\n        showNotification?.('Error loading profile data', 'error');\n      }\n    } else {\n      setIsLoading(false);\n    }\n  }, [isSignedIn, user]);\n\n  async function fetchUserProfile() {\n    try {\n      setIsLoading(true);\n\n      // Populate basic info from Clerk user data\n      setProfileData(prev => ({\n        ...prev,\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        email: user.primaryEmailAddress?.emailAddress || '',\n        avatarUrl: user.imageUrl || prev.avatarUrl,\n      }));\n\n      Logger.info('User profile loaded from Clerk data');\n    } catch (error) {\n      showNotification?.(`Error loading profile: ${error.message}`, 'error');\n      Logger.error('Error loading profile:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const handleProfileSave = async e => {\n    e.preventDefault();\n    setIsSaving(true);\n\n    try {\n      // Note: Since we're using Clerk, we'll update Clerk user data directly\n      // For additional profile data, we might want to save to a Clerk-compatible table\n\n      showNotification?.('Profile updated successfully!', 'success');\n      Logger.info('Profile save requested - using Clerk for user management');\n    } catch (error) {\n      Logger.error('Error saving profile:', error);\n      showNotification?.(`Error saving profile: ${error.message}`, 'error');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleFileUpload = async event => {\n    try {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      setIsUploading(true);\n\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${user.id}-${Date.now()}.${fileExt}`;\n      const bucket = 'avatars';\n      const filePath = fileName;\n\n      let { error: uploadError } = await supabase.storage.from(bucket).upload(filePath, file);\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      const {\n        data: { publicUrl },\n      } = supabase.storage.from(bucket).getPublicUrl(filePath);\n\n      // Add timestamp to URL to force refresh\n      const urlWithTimestamp = `${publicUrl}?t=${new Date().getTime()}`;\n\n      setProfileData({ ...profileData, avatarUrl: urlWithTimestamp });\n      Logger.info('Profile photo uploaded and updated in local state');\n      showNotification?.(t('success.profilePhoto'), 'success');\n    } catch (error) {\n      const errorMessage = t('errors.imageUpload');\n      showNotification?.(`${errorMessage} ${error.message}`, 'error');\n      Logger.error(errorMessage, error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setProfileData({ ...profileData, [name]: value });\n  };\n\n  if (isLoading) {\n    return (\n      <div className='flex justify-center items-center h-64'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      <div>\n        <h3 className='text-lg leading-6 font-medium text-gray-900'>{t('profile.title')}</h3>\n        <p className='mt-1 text-sm text-gray-500'>\n          {t('profile.description', 'Update your personal information and preferences.')}\n        </p>\n      </div>\n\n      <form onSubmit={handleProfileSave} className='space-y-6'>\n        <div className='bg-white shadow rounded-lg'>\n          <div className='px-4 py-5 sm:p-6'>\n            <div className='grid grid-cols-6 gap-6'>\n              {/* Profile Photo */}\n              <div className='col-span-6'>\n                <label className='block text-sm font-medium text-gray-700 mb-2'>\n                  {t('profile.avatar.title')}\n                </label>\n                <div className='mt-1 flex items-center'>\n                  <span className='inline-block h-12 w-12 rounded-full overflow-hidden bg-gray-100'>\n                    {profileData.avatarUrl ? (\n                      <img\n                        className='h-12 w-12 rounded-full object-cover'\n                        src={profileData.avatarUrl}\n                        alt={t('profile.avatar.alt', 'Profile')}\n                      />\n                    ) : (\n                      <PhotoIcon className='h-12 w-12 text-gray-300' />\n                    )}\n                  </span>\n                  <label\n                    htmlFor='file-upload'\n                    className='ml-5 cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n                  >\n                    <span>{t('profile.avatar.change')}</span>\n                    <input\n                      id='file-upload'\n                      name='file-upload'\n                      type='file'\n                      className='sr-only'\n                      accept='image/*'\n                      onChange={handleFileUpload}\n                      disabled={isUploading}\n                    />\n                  </label>\n                  {isUploading && (\n                    <p className='ml-4 text-sm text-gray-500'>{t('buttons.uploading')}</p>\n                  )}\n                </div>\n                <p className='mt-2 text-sm text-gray-500'>{t('profile.avatar.help')}</p>\n              </div>\n\n              {/* First Name */}\n              <div className='sm:col-span-3'>\n                <label htmlFor='firstName' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.firstName.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='firstName'\n                    id='firstName'\n                    value={profileData.firstName}\n                    onChange={handleInputChange}\n                    className='mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 sm:text-sm'\n                  />\n                </div>\n              </div>\n\n              {/* Last Name */}\n              <div className='sm:col-span-3'>\n                <label htmlFor='lastName' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.lastName.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='lastName'\n                    id='lastName'\n                    value={profileData.lastName}\n                    onChange={handleInputChange}\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n\n              {/* Email */}\n              <div className='sm:col-span-6'>\n                <label htmlFor='email' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.email.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    id='email'\n                    name='email'\n                    type='email'\n                    value={profileData.email}\n                    disabled\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md bg-gray-50'\n                  />\n                </div>\n                <p className='mt-2 text-sm text-gray-500'>{t('profile.email.help')}</p>\n              </div>\n\n              {/* Phone */}\n              <div className='sm:col-span-3'>\n                <label htmlFor='phone' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.phone.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='phone'\n                    id='phone'\n                    value={profileData.phone}\n                    onChange={handleInputChange}\n                    placeholder={t('profile.phone.placeholder')}\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n\n              {/* Company Name */}\n              <div className='sm:col-span-3'>\n                <label htmlFor='companyName' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.company.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='companyName'\n                    id='companyName'\n                    value={profileData.companyName}\n                    onChange={handleInputChange}\n                    placeholder={t('profile.company.placeholder')}\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n\n              {/* Position */}\n              <div className='sm:col-span-3'>\n                <label htmlFor='position' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.position.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='position'\n                    id='position'\n                    value={profileData.position}\n                    onChange={handleInputChange}\n                    placeholder={t('profile.position.placeholder')}\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n\n              {/* Address */}\n              <div className='sm:col-span-3'>\n                <label htmlFor='address' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.address.label')}\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='address'\n                    id='address'\n                    value={profileData.address}\n                    onChange={handleInputChange}\n                    placeholder={t('profile.address.placeholder')}\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n\n              {/* Bio */}\n              <div className='sm:col-span-6'>\n                <label htmlFor='bio' className='block text-sm font-medium text-gray-700'>\n                  {t('profile.bio.label')}\n                </label>\n                <div className='mt-1'>\n                  <textarea\n                    id='bio'\n                    name='bio'\n                    rows={3}\n                    value={profileData.bio}\n                    onChange={handleInputChange}\n                    placeholder={t('profile.bio.placeholder')}\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border border-gray-300 rounded-md'\n                  />\n                </div>\n                <p className='mt-2 text-sm text-gray-500'>{t('profile.bio.help')}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Form Actions */}\n        <div className='flex justify-end space-x-3'>\n          <button\n            type='button'\n            className='bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n            onClick={() => fetchUserProfile()}\n          >\n            {t('buttons.cancel')}\n          </button>\n          <button\n            type='submit'\n            className='ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n            disabled={isSaving}\n          >\n            {isSaving ? t('buttons.saving') : t('buttons.save')}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\RolesAndPermissionsSettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShieldCheckIcon' is defined but never used.","line":4,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":58},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":16,"column":6,"nodeType":"ArrayExpression","endLine":16,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData]","fix":{"range":[645,647],"text":"[fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '@lib/supabaseClient';\nimport { PlusIcon, PencilIcon, TrashIcon, ShieldCheckIcon } from '@heroicons/react/24/outline';\nimport UserRoleManager from './UserRoleManager';\n\nconst RolesAndPermissionsSettings = ({ showNotification }) => {\n  const { t } = useTranslation('settings');\n  const [roles, setRoles] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editingRole, setEditingRole] = useState(null);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const { data: rolesData, error: rolesError } = await supabase\n        .from('roles')\n        .select('*, permissions(*)');\n      if (rolesError) throw rolesError;\n      setRoles(rolesData);\n\n      const { data: permissionsData, error: permissionsError } = await supabase\n        .from('permissions')\n        .select('*');\n      if (permissionsError) throw permissionsError;\n      setPermissions(permissionsData);\n    } catch (error) {\n      console.error('Error fetching roles and permissions:', error);\n      showNotification(t('rolesAndPermissions.alerts.loadError'), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEditRole = role => {\n    setEditingRole(role);\n  };\n\n  const handleDeleteRole = async roleId => {\n    if (window.confirm(t('rolesAndPermissions.alerts.confirmDelete'))) {\n      try {\n        const { error } = await supabase.from('roles').delete().match({ id: roleId });\n        if (error) throw error;\n        showNotification(t('rolesAndPermissions.alerts.deleteSuccess'), 'success');\n        fetchData();\n      } catch (error) {\n        console.error('Error deleting role:', error);\n        showNotification(t('rolesAndPermissions.alerts.deleteFailure'), 'error');\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className='flex justify-center items-center p-8'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-8'>\n      <div className='flex justify-between items-center'>\n        <div>\n          <h2 className='text-2xl font-bold text-gray-900'>{t('rolesAndPermissions.title')}</h2>\n          <p className='mt-1 text-sm text-gray-600'>{t('rolesAndPermissions.description')}</p>\n        </div>\n        <button\n          onClick={() => setEditingRole({ name: '', description: '', permissions: [] })}\n          className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center'\n        >\n          <PlusIcon className='h-5 w-5 mr-2' />\n          {t('rolesAndPermissions.addRole')}\n        </button>\n      </div>\n\n      <div className='bg-white border border-gray-200 rounded-lg overflow-hidden'>\n        <table className='min-w-full divide-y divide-gray-200'>\n          <thead className='bg-gray-50'>\n            <tr>\n              <th\n                scope='col'\n                className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'\n              >\n                {t('rolesAndPermissions.table.role')}\n              </th>\n              <th\n                scope='col'\n                className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'\n              >\n                {t('rolesAndPermissions.table.permissions')}\n              </th>\n              <th scope='col' className='relative px-6 py-3'>\n                <span className='sr-only'>{t('common.actions')}</span>\n              </th>\n            </tr>\n          </thead>\n          <tbody className='bg-white divide-y divide-gray-200'>\n            {roles.map(role => (\n              <tr key={role.id}>\n                <td className='px-6 py-4 whitespace-nowrap'>\n                  <div className='text-sm font-medium text-gray-900'>{role.name}</div>\n                  <div className='text-sm text-gray-500'>{role.description}</div>\n                </td>\n                <td className='px-6 py-4'>\n                  <div className='flex flex-wrap gap-1'>\n                    {role.permissions.map(p => (\n                      <span\n                        key={p.id}\n                        className='px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full'\n                      >\n                        {p.name}\n                      </span>\n                    ))}\n                  </div>\n                </td>\n                <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium'>\n                  <button\n                    onClick={() => handleEditRole(role)}\n                    className='text-blue-600 hover:text-blue-900 mr-4'\n                  >\n                    <PencilIcon className='h-5 w-5' />\n                  </button>\n                  <button\n                    onClick={() => handleDeleteRole(role.id)}\n                    className='text-red-600 hover:text-red-900'\n                  >\n                    <TrashIcon className='h-5 w-5' />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {editingRole && (\n        <RoleEditor\n          role={editingRole}\n          permissions={permissions}\n          onClose={() => setEditingRole(null)}\n          onSave={() => {\n            fetchData();\n            setEditingRole(null);\n          }}\n          showNotification={showNotification}\n        />\n      )}\n\n      <div className='pt-8'>\n        <UserRoleManager showNotification={showNotification} />\n      </div>\n    </div>\n  );\n};\n\nconst RoleEditor = ({ role, permissions, onClose, onSave, showNotification }) => {\n  const { t } = useTranslation('settings');\n  const [formData, setFormData] = useState(role);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    setFormData(role);\n  }, [role]);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handlePermissionChange = permissionId => {\n    setFormData(prev => {\n      const existingPermissions = prev.permissions.map(p => p.id);\n      if (existingPermissions.includes(permissionId)) {\n        return { ...prev, permissions: prev.permissions.filter(p => p.id !== permissionId) };\n      } else {\n        const permissionToAdd = permissions.find(p => p.id === permissionId);\n        return { ...prev, permissions: [...prev.permissions, permissionToAdd] };\n      }\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSaving(true);\n    try {\n      let savedRole;\n      const { permissions: rolePermissions, ...roleData } = formData;\n\n      if (roleData.id) {\n        // Update existing role\n        const { data, error } = await supabase\n          .from('roles')\n          .update(roleData)\n          .match({ id: roleData.id })\n          .select();\n        if (error) throw error;\n        savedRole = data[0];\n      } else {\n        // Create new role\n        const { data, error } = await supabase.from('roles').insert(roleData).select();\n        if (error) throw error;\n        savedRole = data[0];\n      }\n\n      // Sync permissions\n      const { error: deleteError } = await supabase\n        .from('role_permissions')\n        .delete()\n        .match({ role_id: savedRole.id });\n      if (deleteError) throw deleteError;\n\n      const newPermissions = rolePermissions.map(p => ({\n        role_id: savedRole.id,\n        permission_id: p.id,\n      }));\n      const { error: insertError } = await supabase.from('role_permissions').insert(newPermissions);\n      if (insertError) throw insertError;\n\n      showNotification(t('rolesAndPermissions.alerts.saveSuccess'), 'success');\n      onSave();\n    } catch (error) {\n      console.error('Error saving role:', error);\n      showNotification(t('rolesAndPermissions.alerts.saveFailure'), 'error');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <div className='fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50'>\n      <div className='bg-white rounded-lg p-8 max-w-2xl w-full'>\n        <h3 className='text-lg font-medium text-gray-900 mb-4'>\n          {formData.id ? t('rolesAndPermissions.editRole') : t('rolesAndPermissions.addRole')}\n        </h3>\n        <form onSubmit={handleSubmit} className='space-y-4'>\n          <div>\n            <label htmlFor='name' className='block text-sm font-medium text-gray-700'>\n              {t('rolesAndPermissions.roleName.label')}\n            </label>\n            <input\n              type='text'\n              name='name'\n              id='name'\n              value={formData.name}\n              onChange={handleInputChange}\n              className='mt-1 block w-full'\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor='description' className='block text-sm font-medium text-gray-700'>\n              {t('rolesAndPermissions.roleDescription.label')}\n            </label>\n            <textarea\n              name='description'\n              id='description'\n              value={formData.description}\n              onChange={handleInputChange}\n              rows='3'\n              className='mt-1 block w-full'\n            ></textarea>\n          </div>\n          <div>\n            <h4 className='text-sm font-medium text-gray-700 mb-2'>\n              {t('rolesAndPermissions.permissions')}\n            </h4>\n            <div className='grid grid-cols-2 md:grid-cols-3 gap-4'>\n              {permissions.map(p => (\n                <div key={p.id} className='flex items-center'>\n                  <input\n                    type='checkbox'\n                    id={`perm-${p.id}`}\n                    checked={formData.permissions.some(fp => fp.id === p.id)}\n                    onChange={() => handlePermissionChange(p.id)}\n                    className='h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500'\n                  />\n                  <label htmlFor={`perm-${p.id}`} className='ml-2 block text-sm text-gray-900'>\n                    {p.name}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className='flex justify-end space-x-4'>\n            <button\n              type='button'\n              onClick={onClose}\n              className='px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300'\n            >\n              {t('common.cancel')}\n            </button>\n            <button\n              type='submit'\n              disabled={saving}\n              className='px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300'\n            >\n              {saving ? t('common.saving') : t('common.save')}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default RolesAndPermissionsSettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SecuritySection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SecuritySettings.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeIcon' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeSlashIcon' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'signOut' is assigned a value but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showBackupModal' is assigned a value but never used.","line":51,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowBackupModal' is assigned a value but never used.","line":51,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":45},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSecurityData'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, loadSecurityData, user]","fix":{"range":[1706,1729],"text":"[isAuthenticated, loadSecurityData, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":97,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":97,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":114,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":114,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":118,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":118,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":134,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":135,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":138,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":138,"endColumn":95},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":152,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":152,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":155,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":155,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":168,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":168,"endColumn":93},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":173,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":173,"endColumn":99},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":183,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":183,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":187,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":187,"endColumn":78},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":205,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":205,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":208,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":208,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":240,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":240,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":243,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":243,"endColumn":83},{"ruleId":"no-undef","severity":2,"message":"'UserGroupIcon' is not defined.","line":289,"column":74,"nodeType":"Identifier","messageId":"undef","endLine":289,"endColumn":87}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\nimport { securityService, PERMISSIONS } from '../../lib/securityService';\nimport UserRoleManagement from './UserRoleManagement';\nimport {\n  ShieldCheckIcon,\n  KeyIcon,\n  LockClosedIcon,\n  ClockIcon,\n  ComputerDesktopIcon,\n  DevicePhoneMobileIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  QrCodeIcon,\n  ArrowDownTrayIcon,\n  ArrowUpTrayIcon,\n  DocumentDuplicateIcon,\n  FunnelIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function SecuritySettings({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useUser();\n  const { signOut, isAuthenticated } = useClerkAuth();\n  const [loading, setLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [currentUserRole, setCurrentUserRole] = useState(null);\n\n  // 2FA State\n  const [twoFactorEnabled, setTwoFactorEnabled] = useState(false);\n  const [showQRCode, setShowQRCode] = useState(false);\n  const [backupCodes, setBackupCodes] = useState([]);\n\n  // Sessions State\n  const [sessions, setSessions] = useState([]);\n\n  // Audit Logs State\n  const [auditLogs, setAuditLogs] = useState([]);\n  const [auditFilter, setAuditFilter] = useState({\n    action: '',\n    severity: '',\n    startDate: '',\n    endDate: '',\n  });\n\n  // Backup/Restore State\n  const [backups, setBackups] = useState([]);\n  const [showBackupModal, setShowBackupModal] = useState(false);\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadSecurityData();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadSecurityData = async () => {\n    setLoading(true);\n    try {\n      // Load user role\n      const role = await securityService.getUserRole(user.id);\n      setCurrentUserRole(role);\n\n      // Check if 2FA is enabled\n      const mfaEnabled = user?.twoFactorEnabled || false;\n      setTwoFactorEnabled(mfaEnabled);\n\n      // Load active sessions\n      const userSessions = await securityService.getUserSessions(user.id);\n      setSessions(userSessions.slice(0, 10));\n\n      // Load audit logs\n      const logs = await securityService.getAuditLogs({\n        userId: user.id,\n        limit: 20,\n      });\n      setAuditLogs(logs);\n\n      // Load available backups (mock for now)\n      const mockBackups = [\n        {\n          id: 1,\n          created_at: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\n          type: 'automatic',\n        },\n        {\n          id: 2,\n          created_at: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(),\n          type: 'manual',\n        },\n      ];\n      setBackups(mockBackups);\n    } catch (error) {\n      console.error('Error loading security data:', error);\n      showNotification && showNotification('Error loading security settings', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEnable2FA = async () => {\n    setLoading(true);\n    try {\n      // Generate secret and start 2FA setup\n      const secret = 'JBSWY3DPEHPK3PXP'; // In real app, generate actual secret\n      const result = await securityService.enable2FA(user.id, secret, '123456');\n\n      if (result.success) {\n        setTwoFactorEnabled(true);\n        setBackupCodes(result.backupCodes);\n        setShowQRCode(true);\n        showNotification && showNotification('2FA enabled successfully', 'success');\n      }\n    } catch (error) {\n      console.error('Error enabling 2FA:', error);\n      showNotification && showNotification('Error enabling 2FA. Please try again.', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisable2FA = async () => {\n    if (!confirm('Are you sure you want to disable two-factor authentication?')) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await securityService.disable2FA(user.id);\n      setTwoFactorEnabled(false);\n      setBackupCodes([]);\n      showNotification &&\n        showNotification('Two-factor authentication has been disabled.', 'success');\n    } catch (error) {\n      console.error('Error disabling 2FA:', error);\n      showNotification && showNotification('Error disabling 2FA. Please try again.', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRevokeSession = async sessionId => {\n    if (!confirm('Are you sure you want to revoke this session?')) {\n      return;\n    }\n\n    try {\n      await securityService.revokeSession(user.id, sessionId);\n      setSessions(sessions.filter(s => s.id !== sessionId));\n      showNotification && showNotification('Session revoked successfully.', 'success');\n    } catch (error) {\n      console.error('Error revoking session:', error);\n      showNotification && showNotification('Error revoking session. Please try again.', 'error');\n    }\n  };\n\n  const handleRevokeAllSessions = async () => {\n    if (\n      !confirm('Are you sure you want to sign out of all devices? You will need to sign in again.')\n    ) {\n      return;\n    }\n\n    try {\n      await securityService.revokeAllSessions(user.id);\n      showNotification && showNotification('All sessions revoked successfully.', 'success');\n      // Redirect to login or refresh\n      window.location.reload();\n    } catch (error) {\n      console.error('Error revoking all sessions:', error);\n      showNotification && showNotification('Error revoking sessions. Please try again.', 'error');\n    }\n  };\n\n  const handleCreateBackup = async () => {\n    setLoading(true);\n    try {\n      const result = await securityService.backupSecuritySettings(user.id);\n      if (result.success) {\n        await loadSecurityData(); // Reload to show new backup\n        showNotification && showNotification('Security backup created successfully', 'success');\n      }\n    } catch (error) {\n      console.error('Error creating backup:', error);\n      showNotification && showNotification('Error creating backup', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRestoreBackup = async backupId => {\n    if (\n      !confirm(\n        'Are you sure you want to restore this backup? This will overwrite current settings.',\n      )\n    ) {\n      return;\n    }\n\n    try {\n      await securityService.restoreSecuritySettings(user.id, backupId);\n      await loadSecurityData(); // Reload data after restore\n      showNotification && showNotification('Security settings restored successfully', 'success');\n    } catch (error) {\n      console.error('Error restoring backup:', error);\n      showNotification && showNotification('Error restoring backup', 'error');\n    }\n  };\n\n  const handleExportAuditLogs = async () => {\n    try {\n      const logs = await securityService.getAuditLogs({\n        userId: user.id,\n        ...auditFilter,\n      });\n\n      const csvContent = [\n        ['Timestamp', 'Action', 'Severity', 'IP Address', 'Details'].join(','),\n        ...logs.map(log =>\n          [\n            log.timestamp,\n            log.action,\n            log.severity,\n            log.ip_address || 'N/A',\n            JSON.stringify(log.details || {}),\n          ].join(','),\n        ),\n      ].join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `audit-logs-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n\n      showNotification && showNotification('Audit logs exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting audit logs:', error);\n      showNotification && showNotification('Error exporting audit logs', 'error');\n    }\n  };\n\n  const formatDate = date => {\n    return new Intl.DateTimeFormat('en-US', {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n    }).format(new Date(date));\n  };\n\n  const canViewAuditLogs =\n    currentUserRole && securityService.hasPermission(currentUserRole, PERMISSIONS.VIEW_AUDIT_LOGS);\n\n  const canBackupSettings =\n    currentUserRole && securityService.hasPermission(currentUserRole, PERMISSIONS.BACKUP_SETTINGS);\n\n  const canManageUsers =\n    currentUserRole && securityService.hasPermission(currentUserRole, PERMISSIONS.MANAGE_USERS);\n\n  // Don't render if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='text-center'>\n          <p className='text-gray-500'>Please sign in to access security settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading && !currentUserRole) {\n    return (\n      <div className='flex items-center justify-center h-64'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'overview', label: 'Security Overview', icon: ShieldCheckIcon },\n    { id: 'sessions', label: 'Active Sessions', icon: ComputerDesktopIcon },\n    ...(canViewAuditLogs ? [{ id: 'audit', label: 'Audit Logs', icon: ClockIcon }] : []),\n    ...(canBackupSettings\n      ? [{ id: 'backup', label: 'Backup & Restore', icon: DocumentDuplicateIcon }]\n      : []),\n    ...(canManageUsers ? [{ id: 'users', label: 'User Management', icon: UserGroupIcon }] : []),\n  ];\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div>\n        <h3 className='text-lg font-medium text-gray-900'>\n          {t('security.title', 'Security Settings')}\n        </h3>\n        <p className='mt-1 text-sm text-gray-600'>\n          {t('security.description', 'Manage your account security and authentication settings.')}\n        </p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className='border-b border-gray-200'>\n        <nav className='-mb-px flex space-x-8'>\n          {tabs.map(tab => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <Icon className='w-4 h-4' />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className='space-y-6'>\n          {/* Two-Factor Authentication */}\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <div className='flex items-start justify-between'>\n              <div className='flex items-center space-x-3'>\n                <ShieldCheckIcon className='w-6 h-6 text-green-600' />\n                <div>\n                  <h4 className='text-sm font-medium text-gray-900'>\n                    {t('security.twoFactor.title', 'Two-Factor Authentication')}\n                  </h4>\n                  <p className='text-sm text-gray-600'>\n                    {t(\n                      'security.twoFactor.description',\n                      'Add an extra layer of security to your account',\n                    )}\n                  </p>\n                  <p className='text-xs text-gray-500 mt-1'>\n                    Status:{' '}\n                    {twoFactorEnabled ? (\n                      <span className='text-green-600 font-medium'>Enabled</span>\n                    ) : (\n                      <span className='text-red-600 font-medium'>Disabled</span>\n                    )}\n                  </p>\n                </div>\n              </div>\n              <div className='flex space-x-2'>\n                {!twoFactorEnabled ? (\n                  <button\n                    onClick={handleEnable2FA}\n                    disabled={loading}\n                    className='px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50'\n                  >\n                    {t('security.twoFactor.enable', 'Enable 2FA')}\n                  </button>\n                ) : (\n                  <button\n                    onClick={handleDisable2FA}\n                    disabled={loading}\n                    className='px-4 py-2 text-sm font-medium text-red-700 bg-white border border-red-300 rounded-md hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500'\n                  >\n                    {t('security.twoFactor.disable', 'Disable')}\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* QR Code Section */}\n            {showQRCode && (\n              <div className='mt-4 p-4 bg-gray-50 rounded-lg'>\n                <div className='flex items-center space-x-2 mb-3'>\n                  <QrCodeIcon className='w-5 h-5 text-gray-600' />\n                  <span className='text-sm font-medium text-gray-900'>\n                    {t('security.twoFactor.scanQR', 'Scan QR Code')}\n                  </span>\n                </div>\n                <div className='bg-white p-4 rounded border-2 border-dashed border-gray-300 text-center'>\n                  <div className='w-32 h-32 bg-gray-100 mx-auto rounded mb-2 flex items-center justify-center'>\n                    <QrCodeIcon className='w-16 h-16 text-gray-400' />\n                  </div>\n                  <p className='text-xs text-gray-600'>\n                    {t('security.twoFactor.qrInstructions', 'QR code will be generated here')}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Backup Codes */}\n            {backupCodes.length > 0 && (\n              <div className='mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg'>\n                <h5 className='text-sm font-medium text-yellow-800 mb-2'>\n                  {t('security.twoFactor.backupCodes', 'Backup Codes')}\n                </h5>\n                <p className='text-xs text-yellow-700 mb-3'>\n                  {t(\n                    'security.twoFactor.backupInstructions',\n                    'Save these codes in a secure location. Each code can only be used once.',\n                  )}\n                </p>\n                <div className='grid grid-cols-2 gap-2 font-mono text-sm'>\n                  {backupCodes.map((code, index) => (\n                    <div key={index} className='bg-white p-2 rounded border text-center'>\n                      {code}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Password Security */}\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <div className='flex items-center space-x-3 mb-4'>\n              <KeyIcon className='w-6 h-6 text-red-600' />\n              <div>\n                <h4 className='text-sm font-medium text-gray-900'>\n                  {t('security.password.title', 'Password Security')}\n                </h4>\n                <p className='text-sm text-gray-600'>\n                  {t('security.password.description', 'Manage your password and account access')}\n                </p>\n              </div>\n            </div>\n\n            <div className='space-y-3'>\n              <button className='w-full text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors'>\n                <div className='flex items-center justify-between'>\n                  <span className='text-sm font-medium text-gray-900'>\n                    {t('security.password.change', 'Change Password')}\n                  </span>\n                  <span className='text-sm text-gray-500'>ÔåÆ</span>\n                </div>\n              </button>\n\n              <button\n                onClick={handleRevokeAllSessions}\n                className='w-full text-left p-3 border border-red-200 rounded-lg hover:bg-red-50 transition-colors'\n              >\n                <div className='flex items-center justify-between'>\n                  <span className='text-sm font-medium text-red-700'>\n                    {t('security.signOutAll', 'Sign Out of All Devices')}\n                  </span>\n                  <span className='text-sm text-red-500'>ÔåÆ</span>\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'sessions' && (\n        <div className='bg-white border border-gray-200 rounded-lg p-6'>\n          <div className='flex items-center justify-between mb-4'>\n            <div className='flex items-center space-x-3'>\n              <ComputerDesktopIcon className='w-6 h-6 text-blue-600' />\n              <div>\n                <h4 className='text-sm font-medium text-gray-900'>\n                  {t('security.sessions.title', 'Active Sessions')}\n                </h4>\n                <p className='text-sm text-gray-600'>\n                  {t(\n                    'security.sessions.description',\n                    'Devices that are currently signed in to your account',\n                  )}\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={handleRevokeAllSessions}\n              className='px-4 py-2 text-sm font-medium text-red-700 bg-white border border-red-300 rounded-md hover:bg-red-50'\n            >\n              Revoke All\n            </button>\n          </div>\n\n          <div className='space-y-3'>\n            {sessions.length === 0 ? (\n              <div className='flex items-center justify-center p-8 text-gray-500'>\n                <div className='text-center'>\n                  <ComputerDesktopIcon className='w-12 h-12 mx-auto mb-2 text-gray-300' />\n                  <p className='text-sm'>Current session only</p>\n                </div>\n              </div>\n            ) : (\n              sessions.map((session, index) => (\n                <div\n                  key={session.id || index}\n                  className='flex items-center justify-between p-3 bg-gray-50 rounded-lg'\n                >\n                  <div className='flex items-center space-x-3'>\n                    <DevicePhoneMobileIcon className='w-5 h-5 text-gray-400' />\n                    <div>\n                      <p className='text-sm font-medium text-gray-900'>\n                        {session.device || 'Current Device'}\n                      </p>\n                      <p className='text-xs text-gray-600'>\n                        Last active: {formatDate(session.last_active || new Date())}\n                      </p>\n                      <p className='text-xs text-gray-500'>IP: {session.ip_address || 'Unknown'}</p>\n                    </div>\n                  </div>\n                  {index !== 0 && (\n                    <button\n                      onClick={() => handleRevokeSession(session.id)}\n                      className='text-sm text-red-600 hover:text-red-700 font-medium'\n                    >\n                      {t('security.sessions.revoke', 'Revoke')}\n                    </button>\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'audit' && canViewAuditLogs && (\n        <div className='space-y-6'>\n          {/* Audit Filters */}\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <div className='flex items-center space-x-3 mb-4'>\n              <FunnelIcon className='w-5 h-5 text-gray-600' />\n              <h4 className='text-sm font-medium text-gray-900'>Filter Audit Logs</h4>\n            </div>\n            <div className='grid grid-cols-1 md:grid-cols-4 gap-4'>\n              <select\n                value={auditFilter.action}\n                onChange={e => setAuditFilter({ ...auditFilter, action: e.target.value })}\n                className='border border-gray-300 rounded-md px-3 py-2 text-sm'\n              >\n                <option value=''>All Actions</option>\n                <option value='LOGIN'>Login</option>\n                <option value='LOGOUT'>Logout</option>\n                <option value='2FA_ENABLED'>2FA Enabled</option>\n                <option value='2FA_DISABLED'>2FA Disabled</option>\n                <option value='ROLE_UPDATED'>Role Updated</option>\n              </select>\n              <select\n                value={auditFilter.severity}\n                onChange={e => setAuditFilter({ ...auditFilter, severity: e.target.value })}\n                className='border border-gray-300 rounded-md px-3 py-2 text-sm'\n              >\n                <option value=''>All Severities</option>\n                <option value='LOW'>Low</option>\n                <option value='MEDIUM'>Medium</option>\n                <option value='HIGH'>High</option>\n              </select>\n              <input\n                type='date'\n                value={auditFilter.startDate}\n                onChange={e => setAuditFilter({ ...auditFilter, startDate: e.target.value })}\n                className='border border-gray-300 rounded-md px-3 py-2 text-sm'\n              />\n              <button\n                onClick={handleExportAuditLogs}\n                className='flex items-center space-x-2 px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-md hover:bg-blue-100'\n              >\n                <ArrowDownTrayIcon className='w-4 h-4' />\n                <span>Export</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Audit Logs List */}\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <div className='flex items-center space-x-3 mb-4'>\n              <ClockIcon className='w-6 h-6 text-purple-600' />\n              <div>\n                <h4 className='text-sm font-medium text-gray-900'>\n                  {t('security.audit.title', 'Security Audit Log')}\n                </h4>\n                <p className='text-sm text-gray-600'>\n                  {t(\n                    'security.audit.description',\n                    'Recent security-related activities on your account',\n                  )}\n                </p>\n              </div>\n            </div>\n\n            <div className='space-y-3'>\n              {auditLogs.map(log => (\n                <div\n                  key={log.id}\n                  className='flex items-center justify-between p-3 border border-gray-100 rounded-lg'\n                >\n                  <div className='flex items-center space-x-3'>\n                    <LockClosedIcon className='w-4 h-4 text-gray-400' />\n                    <div>\n                      <p className='text-sm font-medium text-gray-900'>{log.action}</p>\n                      <p className='text-xs text-gray-600'>\n                        {formatDate(log.timestamp)} ÔÇó {log.ip_address || 'Unknown IP'}\n                      </p>\n                      {log.severity && (\n                        <span\n                          className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${\n                            log.severity === 'HIGH'\n                              ? 'bg-red-100 text-red-800'\n                              : log.severity === 'MEDIUM'\n                                ? 'bg-yellow-100 text-yellow-800'\n                                : 'bg-gray-100 text-gray-800'\n                          }`}\n                        >\n                          {log.severity}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'backup' && canBackupSettings && (\n        <div className='space-y-6'>\n          {/* Backup Actions */}\n          <div className='bg-white border border-gray-200 rounded-lg p-6'>\n            <div className='flex items-center justify-between mb-4'>\n              <div className='flex items-center space-x-3'>\n                <DocumentDuplicateIcon className='w-6 h-6 text-green-600' />\n                <div>\n                  <h4 className='text-sm font-medium text-gray-900'>Security Backup & Restore</h4>\n                  <p className='text-sm text-gray-600'>\n                    Create and manage security settings backups\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={handleCreateBackup}\n                disabled={loading}\n                className='flex items-center space-x-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50'\n              >\n                <ArrowUpTrayIcon className='w-4 h-4' />\n                <span>Create Backup</span>\n              </button>\n            </div>\n\n            {/* Available Backups */}\n            <div className='space-y-3'>\n              <h5 className='text-sm font-medium text-gray-900'>Available Backups</h5>\n              {backups.length === 0 ? (\n                <div className='text-center py-8 text-gray-500'>\n                  <p className='text-sm'>No backups available</p>\n                </div>\n              ) : (\n                backups.map(backup => (\n                  <div\n                    key={backup.id}\n                    className='flex items-center justify-between p-3 border border-gray-200 rounded-lg'\n                  >\n                    <div>\n                      <p className='text-sm font-medium text-gray-900'>\n                        Backup #{backup.id} ({backup.type})\n                      </p>\n                      <p className='text-xs text-gray-500'>\n                        Created: {formatDate(backup.created_at)}\n                      </p>\n                    </div>\n                    <button\n                      onClick={() => handleRestoreBackup(backup.id)}\n                      className='text-sm text-blue-600 hover:text-blue-700 font-medium'\n                    >\n                      Restore\n                    </button>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'users' && canManageUsers && (\n        <UserRoleManagement showNotification={showNotification} />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SecuritySettingsFallback.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":13,"endColumn":14,"suggestions":[{"fix":{"range":[306,380],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":16,"suggestions":[{"fix":{"range":[1263,1345],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":52,"endColumn":16,"suggestions":[{"fix":{"range":[1508,1584],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":60,"endColumn":16,"suggestions":[{"fix":{"range":[1834,1916],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  ShieldCheckIcon,\n  KeyIcon,\n  DevicePhoneMobileIcon,\n  ComputerDesktopIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  LockClosedIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function SecuritySettingsFallback({ showNotification }) {\n  console.log('­ƒöÉ SecuritySettingsFallback: Component mounted - Demo Mode');\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    passwordRequirements: {\n      minLength: 8,\n      requireUppercase: true,\n      requireNumbers: true,\n      requireSymbols: true,\n    },\n    sessionTimeout: 30,\n    loginNotifications: true,\n  });\n\n  const [activeDevices] = useState([\n    { id: 1, name: 'Chrome - Windows', lastActive: '2 minuti fa', current: true },\n    { id: 2, name: 'Safari - iPhone', lastActive: '1 ora fa', current: false },\n    { id: 3, name: 'Firefox - Linux', lastActive: '3 giorni fa', current: false },\n  ]);\n\n  const handleToggle = setting => {\n    setSecuritySettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n\n    if (showNotification) {\n      showNotification(`Impostazione di sicurezza aggiornata (Demo Mode)`, 'success');\n    }\n  };\n\n  const handlePasswordChange = () => {\n    console.log('­ƒöÉ SecuritySettingsFallback: Password change requested (Demo Mode)');\n    if (showNotification) {\n      showNotification('Richiesta cambio password inviata (Demo Mode)', 'success');\n    }\n  };\n\n  const handleEnable2FA = () => {\n    console.log('­ƒöÉ SecuritySettingsFallback: 2FA setup requested (Demo Mode)');\n    setSecuritySettings(prev => ({ ...prev, twoFactorEnabled: true }));\n    if (showNotification) {\n      showNotification('Autenticazione a due fattori abilitata (Demo Mode)', 'success');\n    }\n  };\n\n  const handleRevokeSession = deviceId => {\n    console.log('­ƒöÉ SecuritySettingsFallback: Session revoked (Demo Mode)', deviceId);\n    if (showNotification) {\n      showNotification('Sessione revocata (Demo Mode)', 'success');\n    }\n  };\n\n  return (\n    <div className='space-y-6'>\n      {/* Demo Mode Banner */}\n      <div className='bg-blue-50 border-l-4 border-blue-400 p-4'>\n        <div className='flex'>\n          <ShieldCheckIcon className='h-5 w-5 text-blue-400' />\n          <div className='ml-3'>\n            <p className='text-sm text-blue-700'>\n              <strong>Modalit├á Demo:</strong> Impostazioni di sicurezza semplificate per testing.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Password Settings */}\n      <div className='bg-white shadow rounded-lg p-6'>\n        <div className='flex items-center mb-4'>\n          <KeyIcon className='h-6 w-6 text-gray-400 mr-3' />\n          <h3 className='text-lg font-medium text-gray-900'>Password e Accesso</h3>\n        </div>\n\n        <div className='space-y-4'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <h4 className='text-sm font-medium text-gray-900'>Cambia Password</h4>\n              <p className='text-sm text-gray-500'>Ultima modifica: 30 giorni fa</p>\n            </div>\n            <button\n              onClick={handlePasswordChange}\n              className='bg-blue-600 text-white px-4 py-2 rounded-md text-sm hover:bg-blue-700'\n            >\n              Cambia Password\n            </button>\n          </div>\n\n          <div className='border-t pt-4'>\n            <h4 className='text-sm font-medium text-gray-900 mb-3'>Requisiti Password</h4>\n            <div className='grid grid-cols-2 gap-4'>\n              <div className='flex items-center'>\n                <CheckCircleIcon className='h-4 w-4 text-green-500 mr-2' />\n                <span className='text-sm text-gray-600'>Minimo 8 caratteri</span>\n              </div>\n              <div className='flex items-center'>\n                <CheckCircleIcon className='h-4 w-4 text-green-500 mr-2' />\n                <span className='text-sm text-gray-600'>Lettere maiuscole</span>\n              </div>\n              <div className='flex items-center'>\n                <CheckCircleIcon className='h-4 w-4 text-green-500 mr-2' />\n                <span className='text-sm text-gray-600'>Numeri</span>\n              </div>\n              <div className='flex items-center'>\n                <CheckCircleIcon className='h-4 w-4 text-green-500 mr-2' />\n                <span className='text-sm text-gray-600'>Simboli speciali</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Two-Factor Authentication */}\n      <div className='bg-white shadow rounded-lg p-6'>\n        <div className='flex items-center mb-4'>\n          <DevicePhoneMobileIcon className='h-6 w-6 text-gray-400 mr-3' />\n          <h3 className='text-lg font-medium text-gray-900'>Autenticazione a Due Fattori</h3>\n        </div>\n\n        <div className='flex items-center justify-between'>\n          <div>\n            <h4 className='text-sm font-medium text-gray-900'>\n              {securitySettings.twoFactorEnabled ? 'Abilitata' : 'Disabilitata'}\n            </h4>\n            <p className='text-sm text-gray-500'>\n              {securitySettings.twoFactorEnabled\n                ? 'Il tuo account ├¿ protetto con 2FA'\n                : 'Aggiungi un livello extra di sicurezza'}\n            </p>\n          </div>\n          <button\n            onClick={handleEnable2FA}\n            disabled={securitySettings.twoFactorEnabled}\n            className={`px-4 py-2 rounded-md text-sm ${\n              securitySettings.twoFactorEnabled\n                ? 'bg-green-100 text-green-800 cursor-not-allowed'\n                : 'bg-blue-600 text-white hover:bg-blue-700'\n            }`}\n          >\n            {securitySettings.twoFactorEnabled ? 'Abilitata' : 'Abilita 2FA'}\n          </button>\n        </div>\n      </div>\n\n      {/* Active Sessions */}\n      <div className='bg-white shadow rounded-lg p-6'>\n        <div className='flex items-center mb-4'>\n          <ComputerDesktopIcon className='h-6 w-6 text-gray-400 mr-3' />\n          <h3 className='text-lg font-medium text-gray-900'>Sessioni Attive</h3>\n        </div>\n\n        <div className='space-y-3'>\n          {activeDevices.map(device => (\n            <div\n              key={device.id}\n              className='flex items-center justify-between p-3 border rounded-lg'\n            >\n              <div className='flex items-center'>\n                <ComputerDesktopIcon className='h-5 w-5 text-gray-400 mr-3' />\n                <div>\n                  <h4 className='text-sm font-medium text-gray-900'>\n                    {device.name}\n                    {device.current && (\n                      <span className='ml-2 text-xs bg-green-100 text-green-800 px-2 py-1 rounded'>\n                        Corrente\n                      </span>\n                    )}\n                  </h4>\n                  <p className='text-xs text-gray-500'>Ultimo accesso: {device.lastActive}</p>\n                </div>\n              </div>\n              {!device.current && (\n                <button\n                  onClick={() => handleRevokeSession(device.id)}\n                  className='text-red-600 text-sm hover:text-red-800'\n                >\n                  Revoca\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Security Notifications */}\n      <div className='bg-white shadow rounded-lg p-6'>\n        <div className='flex items-center mb-4'>\n          <LockClosedIcon className='h-6 w-6 text-gray-400 mr-3' />\n          <h3 className='text-lg font-medium text-gray-900'>Notifiche di Sicurezza</h3>\n        </div>\n\n        <div className='space-y-4'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <h4 className='text-sm font-medium text-gray-900'>Notifiche di Login</h4>\n              <p className='text-sm text-gray-500'>Ricevi email per nuovi accessi</p>\n            </div>\n            <button\n              onClick={() => handleToggle('loginNotifications')}\n              className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                securitySettings.loginNotifications ? 'bg-blue-600' : 'bg-gray-200'\n              }`}\n            >\n              <span\n                className={`pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${\n                  securitySettings.loginNotifications ? 'translate-x-5' : 'translate-x-0'\n                }`}\n              />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SettingsErrorBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SettingsFormSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SettingsLayout.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'KeyIcon' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DevicePhoneMobileIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":37,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'idx' is defined but never used.","line":178,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'idx' is defined but never used.","line":202,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Tab } from '@headlessui/react';\nimport {\n  UserCircleIcon,\n  BellIcon,\n  KeyIcon,\n  ShieldCheckIcon,\n  CreditCardIcon,\n  BuildingOfficeIcon,\n  DevicePhoneMobileIcon,\n  EnvelopeIcon,\n  CogIcon,\n  DocumentArrowDownIcon,\n  EyeIcon,\n} from '@heroicons/react/24/outline';\nimport { useTranslation } from 'react-i18next';\nimport Footer from '@components/shared/Footer';\nimport { useClerkAuth } from '../../hooks/useClerkAuth';\n\n// Import setting modules\nimport ProfileSettings from './ProfileSettings';\nimport SecuritySettings from './SecuritySettings';\n// import NotificationSettings from './NotificationSettings';\n// import CompanySettings from './CompanySettings';\n// import BillingSettings from './BillingSettings';\n// import EmailSettings from './EmailSettings';\nimport IntegrationsSettings from './IntegrationsSettings';\nimport BackupSettings from './BackupSettings';\nimport AccessibilitySettings from './AccessibilitySettings';\nimport CompanySettingsFallback from './CompanySettingsFallback';\nimport BillingSettingsFallback from './BillingSettingsFallback';\nimport EmailSettingsFallback from './EmailSettingsFallback';\nimport NotificationSettingsFallback from './NotificationSettingsFallback';\n\nexport default function SettingsLayout() {\n  const { t } = useTranslation('settings');\n  const { shouldShowLoading, shouldShowAuth, isAuthenticated } = useClerkAuth();\n  const [activeTab, setActiveTab] = useState('profile');\n  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });\n\n  // Settings tabs configuration\n  const tabs = [\n    {\n      name: t('tabs.profile'),\n      icon: UserCircleIcon,\n      component: ProfileSettings,\n      description: t('tabDescriptions.profile', 'Manage your personal information and preferences'),\n    },\n    {\n      name: t('tabs.security'),\n      icon: ShieldCheckIcon,\n      component: SecuritySettings,\n      description: t('tabDescriptions.security', 'Configure account security and access controls'),\n    },\n    {\n      name: t('tabs.notifications'),\n      icon: BellIcon,\n      component: NotificationSettingsFallback,\n      description: t('tabDescriptions.notifications', 'Set up your notification preferences'),\n    },\n    {\n      name: t('tabs.company'),\n      icon: BuildingOfficeIcon,\n      component: CompanySettingsFallback,\n      description: t('tabDescriptions.company', 'Manage company information and branding'),\n    },\n    {\n      name: t('tabs.billing'),\n      icon: CreditCardIcon,\n      component: BillingSettingsFallback,\n      description: t('tabDescriptions.billing', 'Configure billing and invoice settings'),\n    },\n    {\n      name: t('tabs.email'),\n      icon: EnvelopeIcon,\n      component: EmailSettingsFallback,\n      description: t('tabDescriptions.email', 'Manage email templates and settings'),\n    },\n    {\n      name: t('tabs.integrations'),\n      icon: CogIcon,\n      component: IntegrationsSettings,\n      description: t('tabDescriptions.integrations', 'Connect and manage third-party services'),\n    },\n    {\n      name: t('tabs.accessibility'),\n      icon: EyeIcon,\n      component: AccessibilitySettings,\n      description: t(\n        'tabDescriptions.accessibility',\n        'Monitor and improve accessibility compliance',\n      ),\n    },\n    {\n      name: t('tabs.backup'),\n      icon: DocumentArrowDownIcon,\n      component: BackupSettings,\n      description: t('tabDescriptions.backup', 'Backup and restore your data'),\n    },\n  ];\n\n  const showNotification = (message, type = 'success') => {\n    setNotification({ show: true, message, type });\n    setTimeout(() => setNotification({ show: false, message: '', type: 'success' }), 5000);\n  };\n\n  // renderContent function removed - using tabs array approach instead\n\n  // Show loading while authentication is initializing\n  if (shouldShowLoading) {\n    return (\n      <div className='min-h-screen flex items-center justify-center'>\n        <div className='text-center'>\n          <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'></div>\n          <h2 className='text-lg text-gray-600'>{t('common.loading', 'Loading...')}</h2>\n          <p className='text-sm text-gray-500 mt-2'>Initializing authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show sign-in prompt if not authenticated\n  if (shouldShowAuth) {\n    return (\n      <div className='min-h-screen flex items-center justify-center'>\n        <div className='text-center'>\n          <h2 className='text-2xl font-bold text-gray-900 mb-4'>\n            {t('common.pleaseSignIn', 'Please sign in to access settings')}\n          </h2>\n          <p className='text-gray-600'>\n            Please ensure you are logged in to access the settings page.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='min-h-screen bg-gray-50'>\n      <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>\n        {/* Header */}\n        <div className='mb-8'>\n          <h1 className='text-3xl font-bold text-gray-900'>{t('title')}</h1>\n          <p className='mt-2 text-lg text-gray-600'>{t('subtitle')}</p>\n        </div>\n\n        {/* Notification */}\n        {notification.show && (\n          <div\n            className={`mb-6 p-4 rounded-md ${\n              notification.type === 'success'\n                ? 'bg-green-50 text-green-800 border border-green-200'\n                : 'bg-red-50 text-red-800 border border-red-200'\n            }`}\n          >\n            <div className='flex'>\n              <div className='ml-3'>\n                <p className='text-sm font-medium'>{notification.message}</p>\n              </div>\n              <div className='ml-auto pl-3'>\n                <button\n                  onClick={() => setNotification({ show: false, message: '', type: 'success' })}\n                  className='text-gray-400 hover:text-gray-600'\n                >\n                  <span className='sr-only'>Dismiss</span>├ù\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Settings Content */}\n        <div className='bg-white shadow-lg rounded-lg overflow-hidden'>\n          <Tab.Group selectedIndex={activeTab} onChange={setActiveTab}>\n            {/* Mobile Tab Navigation */}\n            <div className='block lg:hidden border-b border-gray-200'>\n              <Tab.List className='flex overflow-x-auto scrollbar-hide bg-gray-50'>\n                {tabs.map((tab, idx) => (\n                  <Tab\n                    key={tab.name}\n                    className={({ selected }) =>\n                      `flex-shrink-0 px-4 py-3 text-sm font-medium focus:outline-none transition-all duration-200 ${\n                        selected\n                          ? 'text-blue-600 border-b-2 border-blue-600 bg-white'\n                          : 'text-gray-500 hover:text-gray-700 border-b-2 border-transparent'\n                      }`\n                    }\n                  >\n                    <div className='flex items-center space-x-2'>\n                      <tab.icon className='w-4 h-4' />\n                      <span className='whitespace-nowrap'>{tab.name}</span>\n                    </div>\n                  </Tab>\n                ))}\n              </Tab.List>\n            </div>\n\n            {/* Desktop Tab Navigation */}\n            <div className='hidden lg:flex'>\n              <div className='w-64 bg-gray-50 p-6 border-r border-gray-200'>\n                <Tab.List className='flex flex-col space-y-2'>\n                  {tabs.map((tab, idx) => (\n                    <Tab\n                      key={tab.name}\n                      className={({ selected }) =>\n                        `w-full text-left px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                          selected\n                            ? 'bg-blue-600 text-white shadow-md'\n                            : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'\n                        }`\n                      }\n                    >\n                      <div className='flex items-center space-x-3'>\n                        <tab.icon className='w-5 h-5' />\n                        <div>\n                          <div className='font-medium'>{tab.name}</div>\n                          <div className='text-xs opacity-75 mt-1'>{tab.description}</div>\n                        </div>\n                      </div>\n                    </Tab>\n                  ))}\n                </Tab.List>\n              </div>\n\n              {/* Desktop Content Area */}\n              <div className='flex-1'>\n                <Tab.Panels>\n                  {tabs.map((tab, idx) => {\n                    const TabComponent = tab.component;\n                    return (\n                      <Tab.Panel key={idx} className='p-6 focus:outline-none'>\n                        <TabComponent showNotification={showNotification} />\n                      </Tab.Panel>\n                    );\n                  })}\n                </Tab.Panels>\n              </div>\n            </div>\n\n            {/* Mobile Content Area */}\n            <div className='block lg:hidden'>\n              <Tab.Panels>\n                {tabs.map((tab, idx) => {\n                  const TabComponent = tab.component;\n                  return (\n                    <Tab.Panel key={idx} className='p-4 focus:outline-none'>\n                      <TabComponent showNotification={showNotification} />\n                    </Tab.Panel>\n                  );\n                })}\n              </Tab.Panels>\n            </div>\n          </Tab.Group>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SettingsLoadingSpinner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SettingsTabNavigation.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\SettingsTable.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\TaxSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\TranslationManagement.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateTranslations' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'switchLanguage' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'auditLanguage' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'availableNamespaces' is assigned a value but never used.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'namespaces'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [namespaces]","fix":{"range":[2830,2832],"text":"[namespaces]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateCoverageStats' and 'loadTranslations'. Either include them or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [generateCoverageStats, loadTranslations, selectedLanguage, selectedNamespace]","fix":{"range":[3031,3068],"text":"[generateCoverageStats, loadTranslations, selectedLanguage, selectedNamespace]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":165,"endColumn":18,"suggestions":[{"fix":{"range":[5162,5256],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Search,\n  Download,\n  Upload,\n  Save,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  Globe,\n  Plus,\n  Trash2,\n  Edit3,\n  FileText,\n  BarChart3,\n} from 'lucide-react';\nimport { useTranslation } from '../../hooks/useTranslation';\nimport {\n  validateTranslations,\n  getMissingTranslations,\n  getAvailableLanguages,\n  switchLanguage,\n} from '../../utils/translationUtils';\nimport {\n  auditTranslations,\n  auditLanguage,\n  validateTranslationQuality,\n} from '../../utils/translationAudit';\nimport toast from 'react-hot-toast';\n\nconst TranslationManagement = () => {\n  const { t, i18n } = useTranslation(['settings', 'common']);\n\n  // State management\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const [selectedNamespace, setSelectedNamespace] = useState('common');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [translations, setTranslations] = useState({});\n  const [availableLanguages, setAvailableLanguages] = useState([]);\n  const [availableNamespaces, setAvailableNamespaces] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [coverageStats, setCoverageStats] = useState({});\n  const [missingTranslations, setMissingTranslations] = useState({});\n  const [editingKey, setEditingKey] = useState(null);\n  const [editingValue, setEditingValue] = useState('');\n  const [newKey, setNewKey] = useState('');\n  const [newValue, setNewValue] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [auditReport, setAuditReport] = useState(null);\n  const [qualityReport, setQualityReport] = useState(null);\n  const [isAuditing, setIsAuditing] = useState(false);\n\n  // Available namespaces from i18n config\n  const namespaces = [\n    'common',\n    'calendar',\n    'navigation',\n    'forms',\n    'buttons',\n    'receipts',\n    'inventory',\n    'documentation',\n    'dashboard',\n    'invoices',\n    'clients',\n    'quotes',\n    'reports',\n    'settings',\n    'analytics',\n    'transactions',\n    'documents',\n    'email',\n    'scan',\n    'voice',\n  ];\n\n  // Initialize component\n  useEffect(() => {\n    loadAvailableLanguages();\n    setAvailableNamespaces(namespaces);\n  }, []);\n\n  // Load translations when language or namespace changes\n  useEffect(() => {\n    if (selectedLanguage && selectedNamespace) {\n      loadTranslations();\n      generateCoverageStats();\n    }\n  }, [selectedLanguage, selectedNamespace]);\n\n  const loadAvailableLanguages = () => {\n    const languages = getAvailableLanguages();\n    setAvailableLanguages(languages.length > 0 ? languages : ['en', 'it']);\n  };\n\n  const loadTranslations = async () => {\n    setLoading(true);\n    try {\n      // Load namespace for selected language\n      await i18n.loadNamespaces(selectedNamespace);\n\n      // Get translations from i18n store\n      const nsData = i18n.store.data[selectedLanguage]?.[selectedNamespace] || {};\n      setTranslations(nsData);\n    } catch (error) {\n      console.error('Error loading translations:', error);\n      toast.error('Failed to load translations');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateCoverageStats = async () => {\n    try {\n      const missing = getMissingTranslations(selectedLanguage, 'en');\n      setMissingTranslations(missing);\n\n      // Calculate coverage stats for each namespace\n      const stats = {};\n      for (const namespace of namespaces) {\n        const baseKeys = Object.keys(i18n.store.data.en?.[namespace] || {});\n        const targetKeys = Object.keys(i18n.store.data[selectedLanguage]?.[namespace] || {});\n        const missingCount = baseKeys.filter(key => !targetKeys.includes(key)).length;\n\n        stats[namespace] = {\n          total: baseKeys.length,\n          translated: targetKeys.length,\n          missing: missingCount,\n          coverage:\n            baseKeys.length > 0 ? ((targetKeys.length / baseKeys.length) * 100).toFixed(1) : 100,\n        };\n      }\n      setCoverageStats(stats);\n    } catch (error) {\n      console.error('Error generating coverage stats:', error);\n    }\n  };\n\n  const handleSaveTranslation = async (key, value) => {\n    try {\n      // Update local state\n      const updatedTranslations = { ...translations, [key]: value };\n      setTranslations(updatedTranslations);\n\n      // Update i18n store\n      i18n.addResourceBundle(selectedLanguage, selectedNamespace, updatedTranslations, true, true);\n\n      // TODO: Save to backend/file system\n      // This would typically involve an API call to save the translation\n      console.log(`Saving translation: ${selectedLanguage}.${selectedNamespace}.${key} = ${value}`);\n\n      toast.success(t('settings:translationManagement.translationSaved'));\n      setEditingKey(null);\n      setEditingValue('');\n    } catch (error) {\n      console.error('Error saving translation:', error);\n      toast.error(t('settings:translationManagement.translationSaveError'));\n    }\n  };\n\n  const handleAddTranslation = async () => {\n    if (!newKey || !newValue) {\n      toast.error(t('settings:translationManagement.keyValueRequired'));\n      return;\n    }\n\n    if (translations[newKey]) {\n      toast.error(t('settings:translationManagement.keyAlreadyExists'));\n      return;\n    }\n\n    await handleSaveTranslation(newKey, newValue);\n    setNewKey('');\n    setNewValue('');\n    setShowAddForm(false);\n  };\n\n  const handleDeleteTranslation = async key => {\n    if (confirm(t('settings:translationManagement.confirmDelete', { key }))) {\n      try {\n        const updatedTranslations = { ...translations };\n        delete updatedTranslations[key];\n        setTranslations(updatedTranslations);\n\n        // Update i18n store\n        i18n.addResourceBundle(\n          selectedLanguage,\n          selectedNamespace,\n          updatedTranslations,\n          true,\n          true,\n        );\n\n        toast.success(t('settings:translationManagement.translationDeleted'));\n      } catch (error) {\n        console.error('Error deleting translation:', error);\n        toast.error(t('settings:translationManagement.translationDeleteError'));\n      }\n    }\n  };\n\n  const handleExportTranslations = () => {\n    try {\n      const exportData = {\n        language: selectedLanguage,\n        namespace: selectedNamespace,\n        translations: translations,\n        exportedAt: new Date().toISOString(),\n      };\n\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${selectedLanguage}-${selectedNamespace}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n\n      toast.success(t('settings:translationManagement.exportSuccess'));\n    } catch (error) {\n      console.error('Error exporting translations:', error);\n      toast.error(t('settings:translationManagement.exportError'));\n    }\n  };\n\n  const handleImportTranslations = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = async e => {\n      try {\n        const importData = JSON.parse(e.target.result);\n\n        if (importData.translations) {\n          setTranslations(importData.translations);\n          i18n.addResourceBundle(\n            selectedLanguage,\n            selectedNamespace,\n            importData.translations,\n            true,\n            true,\n          );\n          toast.success(t('settings:translationManagement.importSuccess'));\n        } else {\n          toast.error(t('settings:translationManagement.invalidImportFile'));\n        }\n      } catch (error) {\n        console.error('Error importing translations:', error);\n        toast.error(t('settings:translationManagement.importError'));\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleRunFullAudit = async () => {\n    setIsAuditing(true);\n    try {\n      const report = await auditTranslations('en');\n      setAuditReport(report);\n      toast.success(t('settings:translationManagement.auditComplete'));\n    } catch (error) {\n      console.error('Error running audit:', error);\n      toast.error(t('settings:translationManagement.auditError'));\n    } finally {\n      setIsAuditing(false);\n    }\n  };\n\n  const handleValidateQuality = async () => {\n    try {\n      const report = validateTranslationQuality(selectedNamespace, selectedLanguage);\n      setQualityReport(report);\n      toast.success(t('settings:translationManagement.qualityValidationComplete'));\n    } catch (error) {\n      console.error('Error validating quality:', error);\n      toast.error(t('settings:translationManagement.qualityValidationError'));\n    }\n  };\n\n  const handleFixIssue = async issue => {\n    if (issue.type === 'empty') {\n      setEditingKey(issue.key);\n      setEditingValue('');\n    }\n    // Additional fix handlers could be added here\n  };\n\n  // Filter translations based on search\n  const filteredTranslations = Object.entries(translations).filter(\n    ([key, value]) =>\n      key.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      value.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h2 className='text-2xl font-bold tracking-tight flex items-center gap-2'>\n            <Globe className='h-6 w-6' />\n            {t('settings:translationManagement.title')}\n          </h2>\n          <p className='text-muted-foreground'>{t('settings:translationManagement.description')}</p>\n        </div>\n        <div className='flex items-center gap-2'>\n          <Button onClick={generateCoverageStats} variant='outline' size='sm'>\n            <RefreshCw className='h-4 w-4 mr-2' />\n            {t('common:refresh')}\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue='editor' className='space-y-4'>\n        <TabsList>\n          <TabsTrigger value='editor' className='flex items-center gap-2'>\n            <Edit3 className='h-4 w-4' />\n            {t('settings:translationManagement.editor')}\n          </TabsTrigger>\n          <TabsTrigger value='coverage' className='flex items-center gap-2'>\n            <BarChart3 className='h-4 w-4' />\n            {t('settings:translationManagement.coverage')}\n          </TabsTrigger>\n          <TabsTrigger value='missing' className='flex items-center gap-2'>\n            <AlertTriangle className='h-4 w-4' />\n            {t('settings:translationManagement.missing')}\n          </TabsTrigger>\n          <TabsTrigger value='audit' className='flex items-center gap-2'>\n            <CheckCircle className='h-4 w-4' />\n            {t('settings:translationManagement.audit')}\n          </TabsTrigger>\n          <TabsTrigger value='quality' className='flex items-center gap-2'>\n            <FileText className='h-4 w-4' />\n            {t('settings:translationManagement.quality')}\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Editor Tab */}\n        <TabsContent value='editor' className='space-y-4'>\n          {/* Controls */}\n          <Card>\n            <CardHeader>\n              <CardTitle className='text-lg'>\n                {t('settings:translationManagement.editorControls')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className='space-y-4'>\n              {/* Language and Namespace Selection */}\n              <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>\n                    {t('settings:translationManagement.language')}\n                  </label>\n                  <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableLanguages.map(lang => (\n                        <SelectItem key={lang} value={lang}>\n                          {lang.toUpperCase()}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>\n                    {t('settings:translationManagement.namespace')}\n                  </label>\n                  <Select value={selectedNamespace} onValueChange={setSelectedNamespace}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {namespaces.map(ns => (\n                        <SelectItem key={ns} value={ns}>\n                          {ns}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>\n                    {t('settings:translationManagement.search')}\n                  </label>\n                  <div className='relative'>\n                    <Search className='absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground' />\n                    <Input\n                      placeholder={t('settings:translationManagement.searchPlaceholder')}\n                      value={searchTerm}\n                      onChange={e => setSearchTerm(e.target.value)}\n                      className='pl-10'\n                    />\n                  </div>\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>\n                    {t('settings:translationManagement.actions')}\n                  </label>\n                  <div className='flex gap-2'>\n                    <Button onClick={handleExportTranslations} variant='outline' size='sm'>\n                      <Download className='h-4 w-4' />\n                    </Button>\n                    <label className='cursor-pointer'>\n                      <Button variant='outline' size='sm' asChild>\n                        <span>\n                          <Upload className='h-4 w-4' />\n                        </span>\n                      </Button>\n                      <input\n                        type='file'\n                        accept='.json'\n                        onChange={handleImportTranslations}\n                        className='hidden'\n                      />\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Add New Translation */}\n              <div className='border-t pt-4'>\n                {!showAddForm ? (\n                  <Button onClick={() => setShowAddForm(true)} variant='outline' className='w-full'>\n                    <Plus className='h-4 w-4 mr-2' />\n                    {t('settings:translationManagement.addTranslation')}\n                  </Button>\n                ) : (\n                  <div className='space-y-3 p-4 border rounded-lg'>\n                    <div className='grid grid-cols-1 md:grid-cols-2 gap-3'>\n                      <Input\n                        placeholder={t('settings:translationManagement.keyPlaceholder')}\n                        value={newKey}\n                        onChange={e => setNewKey(e.target.value)}\n                      />\n                      <Input\n                        placeholder={t('settings:translationManagement.valuePlaceholder')}\n                        value={newValue}\n                        onChange={e => setNewValue(e.target.value)}\n                      />\n                    </div>\n                    <div className='flex gap-2'>\n                      <Button onClick={handleAddTranslation} size='sm'>\n                        <Save className='h-4 w-4 mr-2' />\n                        {t('common:save')}\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          setShowAddForm(false);\n                          setNewKey('');\n                          setNewValue('');\n                        }}\n                        variant='outline'\n                        size='sm'\n                      >\n                        {t('common:cancel')}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Translation List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center justify-between'>\n                <span>\n                  {t('settings:translationManagement.translations')}({filteredTranslations.length})\n                </span>\n                <Badge variant='outline'>\n                  {selectedLanguage}.{selectedNamespace}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loading ? (\n                <div className='flex items-center justify-center py-8'>\n                  <RefreshCw className='h-6 w-6 animate-spin' />\n                  <span className='ml-2'>{t('common:loading')}</span>\n                </div>\n              ) : filteredTranslations.length === 0 ? (\n                <div className='text-center py-8 text-muted-foreground'>\n                  {searchTerm\n                    ? t('settings:translationManagement.noSearchResults')\n                    : t('settings:translationManagement.noTranslations')}\n                </div>\n              ) : (\n                <div className='space-y-2'>\n                  {filteredTranslations.map(([key, value]) => (\n                    <div\n                      key={key}\n                      className='flex items-center gap-3 p-3 border rounded-lg hover:bg-muted/50'\n                    >\n                      <div className='flex-1 min-w-0'>\n                        <div className='font-mono text-sm text-muted-foreground'>{key}</div>\n                        {editingKey === key ? (\n                          <Textarea\n                            value={editingValue}\n                            onChange={e => setEditingValue(e.target.value)}\n                            className='mt-1'\n                            rows={2}\n                          />\n                        ) : (\n                          <div className='text-sm mt-1 break-words'>{value}</div>\n                        )}\n                      </div>\n                      <div className='flex items-center gap-1'>\n                        {editingKey === key ? (\n                          <>\n                            <Button\n                              onClick={() => handleSaveTranslation(key, editingValue)}\n                              size='sm'\n                              variant='outline'\n                            >\n                              <Save className='h-4 w-4' />\n                            </Button>\n                            <Button\n                              onClick={() => {\n                                setEditingKey(null);\n                                setEditingValue('');\n                              }}\n                              size='sm'\n                              variant='outline'\n                            >\n                              {t('common:cancel')}\n                            </Button>\n                          </>\n                        ) : (\n                          <>\n                            <Button\n                              onClick={() => {\n                                setEditingKey(key);\n                                setEditingValue(value);\n                              }}\n                              size='sm'\n                              variant='outline'\n                            >\n                              <Edit3 className='h-4 w-4' />\n                            </Button>\n                            <Button\n                              onClick={() => handleDeleteTranslation(key)}\n                              size='sm'\n                              variant='outline'\n                              className='text-destructive hover:text-destructive'\n                            >\n                              <Trash2 className='h-4 w-4' />\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Coverage Tab */}\n        <TabsContent value='coverage' className='space-y-4'>\n          <div className='grid gap-4'>\n            {namespaces.map(namespace => {\n              const stats = coverageStats[namespace];\n              if (!stats) return null;\n\n              return (\n                <Card key={namespace}>\n                  <CardHeader className='pb-3'>\n                    <div className='flex items-center justify-between'>\n                      <CardTitle className='text-lg'>{namespace}</CardTitle>\n                      <Badge\n                        variant={\n                          stats.coverage >= 95\n                            ? 'default'\n                            : stats.coverage >= 80\n                              ? 'secondary'\n                              : 'destructive'\n                        }\n                      >\n                        {stats.coverage}%\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className='space-y-3'>\n                      <Progress value={parseFloat(stats.coverage)} className='h-2' />\n                      <div className='flex justify-between text-sm text-muted-foreground'>\n                        <span>\n                          {t('settings:translationManagement.translated')}: {stats.translated}\n                        </span>\n                        <span>\n                          {t('settings:translationManagement.missing')}: {stats.missing}\n                        </span>\n                        <span>\n                          {t('settings:translationManagement.total')}: {stats.total}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Missing Translations Tab */}\n        <TabsContent value='missing' className='space-y-4'>\n          {Object.keys(missingTranslations).length === 0 ? (\n            <Card>\n              <CardContent className='flex flex-col items-center justify-center py-8'>\n                <CheckCircle className='h-12 w-12 text-green-500 mb-4' />\n                <h3 className='text-lg font-medium mb-2'>\n                  {t('settings:translationManagement.allTranslationsComplete')}\n                </h3>\n                <p className='text-muted-foreground text-center'>\n                  {t('settings:translationManagement.noMissingTranslations')}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className='space-y-4'>\n              {Object.entries(missingTranslations).map(([namespace, keys]) => (\n                <Card key={namespace}>\n                  <CardHeader>\n                    <CardTitle className='flex items-center gap-2'>\n                      <AlertTriangle className='h-5 w-5 text-orange-500' />\n                      {namespace}\n                      <Badge variant='secondary'>{Object.keys(keys).length} missing</Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className='grid gap-2'>\n                      {Object.entries(keys).map(([key, value]) => (\n                        <div\n                          key={key}\n                          className='flex items-center justify-between p-2 border rounded'\n                        >\n                          <div className='flex-1 min-w-0'>\n                            <div className='font-mono text-sm'>{key}</div>\n                            <div className='text-xs text-muted-foreground truncate'>{value}</div>\n                          </div>\n                          <Button\n                            onClick={() => {\n                              setSelectedNamespace(namespace);\n                              setNewKey(key);\n                              setNewValue(value);\n                              setShowAddForm(true);\n                            }}\n                            size='sm'\n                            variant='outline'\n                          >\n                            {t('settings:translationManagement.addMissing')}\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Audit Tab */}\n        <TabsContent value='audit' className='space-y-4'>\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center gap-2'>\n                <CheckCircle className='h-5 w-5' />\n                {t('settings:translationManagement.auditTitle')}\n              </CardTitle>\n              <CardDescription>\n                {t('settings:translationManagement.auditDescription')}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className='space-y-4'>\n              <Button\n                onClick={handleRunFullAudit}\n                disabled={isAuditing}\n                className='w-full sm:w-auto'\n              >\n                {isAuditing ? (\n                  <>\n                    <RefreshCw className='h-4 w-4 mr-2 animate-spin' />\n                    {t('settings:translationManagement.auditRunning')}\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className='h-4 w-4 mr-2' />\n                    {t('settings:translationManagement.runFullAudit')}\n                  </>\n                )}\n              </Button>\n\n              {auditReport && (\n                <div className='space-y-4'>\n                  {/* Audit Summary */}\n                  <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-green-600'>\n                          {auditReport.summary?.totalKeys || 0}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.totalKeys')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-orange-600'>\n                          {auditReport.summary?.issues?.length || 0}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.totalIssues')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-blue-600'>\n                          {auditReport.summary?.coverage || '0%'}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.overallCoverage')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Issues by Language */}\n                  {auditReport.languages &&\n                    Object.entries(auditReport.languages).map(([lang, langReport]) => (\n                      <Card key={lang}>\n                        <CardHeader>\n                          <CardTitle className='flex items-center gap-2'>\n                            <Globe className='h-5 w-5' />\n                            {lang.toUpperCase()}\n                            <Badge\n                              variant={langReport.issues?.length > 0 ? 'destructive' : 'default'}\n                            >\n                              {langReport.issues?.length || 0} issues\n                            </Badge>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          {langReport.issues && langReport.issues.length > 0 ? (\n                            <div className='space-y-2'>\n                              {langReport.issues.map((issue, index) => (\n                                <div\n                                  key={index}\n                                  className='flex items-center justify-between p-3 border rounded-lg'\n                                >\n                                  <div className='flex-1'>\n                                    <div className='flex items-center gap-2'>\n                                      <Badge variant='outline' className='text-xs'>\n                                        {issue.type}\n                                      </Badge>\n                                      <span className='font-mono text-sm'>\n                                        {issue.namespace}.{issue.key}\n                                      </span>\n                                    </div>\n                                    <div className='text-sm text-muted-foreground mt-1'>\n                                      {issue.description}\n                                    </div>\n                                  </div>\n                                  <Button\n                                    onClick={() => handleFixIssue(issue)}\n                                    size='sm'\n                                    variant='outline'\n                                  >\n                                    {t('settings:translationManagement.fix')}\n                                  </Button>\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className='text-center py-4 text-muted-foreground'>\n                              <CheckCircle className='h-8 w-8 mx-auto mb-2 text-green-500' />\n                              {t('settings:translationManagement.noIssuesFound')}\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n\n                  {/* Recommendations */}\n                  {auditReport.recommendations && auditReport.recommendations.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className='flex items-center gap-2'>\n                          <AlertTriangle className='h-5 w-5 text-orange-500' />\n                          {t('settings:translationManagement.recommendations')}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className='space-y-2'>\n                          {auditReport.recommendations.map((rec, index) => (\n                            <Alert key={index}>\n                              <AlertTriangle className='h-4 w-4' />\n                              <AlertDescription>{rec}</AlertDescription>\n                            </Alert>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quality Tab */}\n        <TabsContent value='quality' className='space-y-4'>\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center gap-2'>\n                <FileText className='h-5 w-5' />\n                {t('settings:translationManagement.qualityValidation')}\n              </CardTitle>\n              <CardDescription>\n                {t('settings:translationManagement.qualityDescription')}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className='space-y-4'>\n              <div className='flex flex-col sm:flex-row gap-2'>\n                <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                  <SelectTrigger className='w-full sm:w-auto'>\n                    <SelectValue placeholder={t('settings:translationManagement.selectLanguage')} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableLanguages.map(lang => (\n                      <SelectItem key={lang} value={lang}>\n                        {lang.toUpperCase()}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Select value={selectedNamespace} onValueChange={setSelectedNamespace}>\n                  <SelectTrigger className='w-full sm:w-auto'>\n                    <SelectValue\n                      placeholder={t('settings:translationManagement.selectNamespace')}\n                    />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {namespaces.map(ns => (\n                      <SelectItem key={ns} value={ns}>\n                        {ns}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Button onClick={handleValidateQuality} className='w-full sm:w-auto'>\n                  <FileText className='h-4 w-4 mr-2' />\n                  {t('settings:translationManagement.validateQuality')}\n                </Button>\n              </div>\n\n              {qualityReport && (\n                <div className='space-y-4'>\n                  {/* Quality Summary */}\n                  <div className='grid grid-cols-1 md:grid-cols-4 gap-4'>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-blue-600'>\n                          {qualityReport.summary?.totalChecked || 0}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.keysChecked')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-green-600'>\n                          {qualityReport.summary?.passed || 0}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.qualityPassed')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-red-600'>\n                          {qualityReport.summary?.failed || 0}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.qualityFailed')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className='p-4'>\n                        <div className='text-2xl font-bold text-orange-600'>\n                          {qualityReport.summary?.warnings || 0}\n                        </div>\n                        <div className='text-sm text-muted-foreground'>\n                          {t('settings:translationManagement.qualityWarnings')}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Quality Issues */}\n                  {qualityReport.issues && qualityReport.issues.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className='flex items-center gap-2'>\n                          <AlertTriangle className='h-5 w-5 text-red-500' />\n                          {t('settings:translationManagement.qualityIssues')}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className='space-y-3'>\n                          {qualityReport.issues.map((issue, index) => (\n                            <div\n                              key={index}\n                              className='flex items-start justify-between p-3 border rounded-lg'\n                            >\n                              <div className='flex-1'>\n                                <div className='flex items-center gap-2 mb-2'>\n                                  <Badge\n                                    variant={\n                                      issue.severity === 'error' ? 'destructive' : 'secondary'\n                                    }\n                                    className='text-xs'\n                                  >\n                                    {issue.severity}\n                                  </Badge>\n                                  <Badge variant='outline' className='text-xs'>\n                                    {issue.type}\n                                  </Badge>\n                                  <span className='font-mono text-sm'>{issue.key}</span>\n                                </div>\n                                <div className='text-sm text-muted-foreground'>\n                                  {issue.description}\n                                </div>\n                                {issue.expected && (\n                                  <div className='text-xs text-muted-foreground mt-1'>\n                                    Expected: {issue.expected}\n                                  </div>\n                                )}\n                                {issue.actual && (\n                                  <div className='text-xs text-muted-foreground'>\n                                    Actual: {issue.actual}\n                                  </div>\n                                )}\n                              </div>\n                              <Button\n                                onClick={() => handleFixIssue(issue)}\n                                size='sm'\n                                variant='outline'\n                              >\n                                {t('settings:translationManagement.fix')}\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Quality Warnings */}\n                  {qualityReport.warnings && qualityReport.warnings.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className='flex items-center gap-2'>\n                          <AlertTriangle className='h-5 w-5 text-orange-500' />\n                          {t('settings:translationManagement.qualityWarnings')}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className='space-y-2'>\n                          {qualityReport.warnings.map((warning, index) => (\n                            <Alert key={index}>\n                              <AlertTriangle className='h-4 w-4' />\n                              <AlertDescription>\n                                <span className='font-mono text-sm'>{warning.key}</span>:{' '}\n                                {warning.message}\n                              </AlertDescription>\n                            </Alert>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Quality Suggestions */}\n                  {qualityReport.suggestions && qualityReport.suggestions.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className='flex items-center gap-2'>\n                          <CheckCircle className='h-5 w-5 text-blue-500' />\n                          {t('settings:translationManagement.qualitySuggestions')}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className='space-y-2'>\n                          {qualityReport.suggestions.map((suggestion, index) => (\n                            <div key={index} className='p-3 bg-blue-50 dark:bg-blue-950 rounded-lg'>\n                              <div className='text-sm'>{suggestion}</div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TranslationManagement;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\UserRoleManagement.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShieldCheckIcon' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadUserRole' and 'loadUsers'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserRole, loadUsers, user]","fix":{"range":[1041,1047],"text":"[loadUserRole, loadUsers, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useUserBypass as useUser } from '@hooks/useClerkBypass';\nimport { securityService, ROLES, PERMISSIONS } from '../../lib/securityService';\nimport {\n  UserGroupIcon,\n  ShieldCheckIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  XMarkIcon,\n  MagnifyingGlassIcon,\n  UserIcon,\n  CogIcon,\n} from '@heroicons/react/24/outline';\n\nexport default function UserRoleManagement({ showNotification }) {\n  const { t } = useTranslation('settings');\n  const { user } = useUser();\n  const [loading, setLoading] = useState(false);\n  const [currentUserRole, setCurrentUserRole] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n  const [showRoleModal, setShowRoleModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  useEffect(() => {\n    if (user) {\n      loadUserRole();\n      loadUsers();\n    }\n  }, [user]);\n\n  const loadUserRole = async () => {\n    try {\n      const role = await securityService.getUserRole(user.id);\n      setCurrentUserRole(role);\n    } catch (error) {\n      console.error('Error loading user role:', error);\n    }\n  };\n\n  const loadUsers = async () => {\n    setLoading(true);\n    try {\n      // In a real implementation, this would fetch from your user management system\n      // For now, we'll use mock data\n      const mockUsers = [\n        {\n          id: 'user_1',\n          name: 'Alice Johnson',\n          email: 'alice@example.com',\n          role: ROLES.ADMIN,\n          lastActive: new Date(Date.now() - 1000 * 60 * 30),\n          status: 'active',\n        },\n        {\n          id: 'user_2',\n          name: 'Bob Smith',\n          email: 'bob@example.com',\n          role: ROLES.MANAGER,\n          lastActive: new Date(Date.now() - 1000 * 60 * 60 * 2),\n          status: 'active',\n        },\n        {\n          id: 'user_3',\n          name: 'Carol Davis',\n          email: 'carol@example.com',\n          role: ROLES.USER,\n          lastActive: new Date(Date.now() - 1000 * 60 * 60 * 24),\n          status: 'active',\n        },\n      ];\n      setUsers(mockUsers);\n    } catch (error) {\n      console.error('Error loading users:', error);\n      showNotification?.('Error loading users', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRoleChange = async () => {\n    if (!selectedUser || !selectedRole) return;\n\n    setLoading(true);\n    try {\n      await securityService.updateUserRole(selectedUser.id, selectedRole, user.id);\n\n      // Update local state\n      setUsers(users.map(u => (u.id === selectedUser.id ? { ...u, role: selectedRole } : u)));\n\n      showNotification?.(`Role updated successfully for ${selectedUser.name}`, 'success');\n      setShowRoleModal(false);\n      setSelectedUser(null);\n      setSelectedRole('');\n    } catch (error) {\n      console.error('Error updating role:', error);\n      showNotification?.('Error updating user role', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const openRoleModal = userToEdit => {\n    setSelectedUser(userToEdit);\n    setSelectedRole(userToEdit.role);\n    setShowRoleModal(true);\n  };\n\n  const filteredUsers = users.filter(\n    user =>\n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  const getRoleDisplayName = role => {\n    const roleNames = {\n      [ROLES.SUPER_ADMIN]: 'Super Admin',\n      [ROLES.ADMIN]: 'Administrator',\n      [ROLES.MANAGER]: 'Manager',\n      [ROLES.USER]: 'User',\n      [ROLES.VIEWER]: 'Viewer',\n    };\n    return roleNames[role] || role;\n  };\n\n  const getRoleColor = role => {\n    const colors = {\n      [ROLES.SUPER_ADMIN]: 'bg-purple-100 text-purple-800',\n      [ROLES.ADMIN]: 'bg-red-100 text-red-800',\n      [ROLES.MANAGER]: 'bg-yellow-100 text-yellow-800',\n      [ROLES.USER]: 'bg-blue-100 text-blue-800',\n      [ROLES.VIEWER]: 'bg-gray-100 text-gray-800',\n    };\n    return colors[role] || 'bg-gray-100 text-gray-800';\n  };\n\n  const canManageUsers =\n    currentUserRole && securityService.hasPermission(currentUserRole, PERMISSIONS.MANAGE_USERS);\n\n  if (!canManageUsers) {\n    return (\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <div className='flex items-center space-x-3'>\n          <ExclamationTriangleIcon className='w-6 h-6 text-yellow-600' />\n          <div>\n            <h4 className='text-sm font-medium text-gray-900'>\n              {t('security.roles.noPermission', 'Insufficient Permissions')}\n            </h4>\n            <p className='text-sm text-gray-600'>\n              {t(\n                'security.roles.noPermissionDesc',\n                'You do not have permission to manage user roles.',\n              )}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      {/* Header */}\n      <div className='bg-white border border-gray-200 rounded-lg p-6'>\n        <div className='flex items-center justify-between mb-4'>\n          <div className='flex items-center space-x-3'>\n            <UserGroupIcon className='w-6 h-6 text-blue-600' />\n            <div>\n              <h4 className='text-sm font-medium text-gray-900'>\n                {t('security.roles.title', 'User Role Management')}\n              </h4>\n              <p className='text-sm text-gray-600'>\n                {t('security.roles.description', 'Manage user roles and permissions')}\n              </p>\n            </div>\n          </div>\n          <div className='text-sm text-gray-500'>\n            Your role:{' '}\n            <span\n              className={`px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(currentUserRole)}`}\n            >\n              {getRoleDisplayName(currentUserRole)}\n            </span>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className='relative'>\n          <MagnifyingGlassIcon className='w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400' />\n          <input\n            type='text'\n            placeholder={t('security.roles.searchUsers', 'Search users...')}\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            className='w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'\n          />\n        </div>\n      </div>\n\n      {/* Users List */}\n      <div className='bg-white border border-gray-200 rounded-lg overflow-hidden'>\n        {loading ? (\n          <div className='flex items-center justify-center p-8'>\n            <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n          </div>\n        ) : (\n          <div className='overflow-x-auto'>\n            <table className='min-w-full divide-y divide-gray-200'>\n              <thead className='bg-gray-50'>\n                <tr>\n                  <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                    {t('security.roles.table.user', 'User')}\n                  </th>\n                  <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                    {t('security.roles.table.role', 'Role')}\n                  </th>\n                  <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                    {t('security.roles.table.lastActive', 'Last Active')}\n                  </th>\n                  <th className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                    {t('security.roles.table.status', 'Status')}\n                  </th>\n                  <th className='px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>\n                    {t('security.roles.table.actions', 'Actions')}\n                  </th>\n                </tr>\n              </thead>\n              <tbody className='bg-white divide-y divide-gray-200'>\n                {filteredUsers.map(userItem => (\n                  <tr key={userItem.id} className='hover:bg-gray-50'>\n                    <td className='px-6 py-4 whitespace-nowrap'>\n                      <div className='flex items-center'>\n                        <div className='w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center'>\n                          <UserIcon className='w-4 h-4 text-gray-600' />\n                        </div>\n                        <div className='ml-4'>\n                          <div className='text-sm font-medium text-gray-900'>{userItem.name}</div>\n                          <div className='text-sm text-gray-500'>{userItem.email}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap'>\n                      <span\n                        className={`px-2 py-1 rounded-full text-xs font-medium ${getRoleColor(userItem.role)}`}\n                      >\n                        {getRoleDisplayName(userItem.role)}\n                      </span>\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-900'>\n                      {new Intl.DateTimeFormat('en-US', {\n                        dateStyle: 'short',\n                        timeStyle: 'short',\n                      }).format(userItem.lastActive)}\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap'>\n                      <span className='px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800'>\n                        {userItem.status}\n                      </span>\n                    </td>\n                    <td className='px-6 py-4 whitespace-nowrap text-right text-sm font-medium'>\n                      <button\n                        onClick={() => openRoleModal(userItem)}\n                        className='text-blue-600 hover:text-blue-900 flex items-center space-x-1'\n                      >\n                        <CogIcon className='w-4 h-4' />\n                        <span>{t('security.roles.editRole', 'Edit Role')}</span>\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* Role Assignment Modal */}\n      {showRoleModal && selectedUser && (\n        <div className='fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50'>\n          <div className='relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white'>\n            <div className='mt-3'>\n              <div className='flex items-center justify-between mb-4'>\n                <h3 className='text-lg font-medium text-gray-900'>\n                  {t('security.roles.editRoleFor', 'Edit Role for')} {selectedUser.name}\n                </h3>\n                <button\n                  onClick={() => setShowRoleModal(false)}\n                  className='text-gray-400 hover:text-gray-600'\n                >\n                  <XMarkIcon className='w-6 h-6' />\n                </button>\n              </div>\n\n              <div className='space-y-4'>\n                <div>\n                  <label className='block text-sm font-medium text-gray-700 mb-2'>\n                    {t('security.roles.selectRole', 'Select Role')}\n                  </label>\n                  <select\n                    value={selectedRole}\n                    onChange={e => setSelectedRole(e.target.value)}\n                    className='w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500'\n                  >\n                    {Object.values(ROLES).map(role => (\n                      <option key={role} value={role}>\n                        {getRoleDisplayName(role)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Role Permissions Preview */}\n                <div className='bg-gray-50 p-3 rounded-md'>\n                  <h4 className='text-sm font-medium text-gray-900 mb-2'>\n                    {t('security.roles.permissions', 'Permissions')}\n                  </h4>\n                  <div className='space-y-1'>\n                    {securityService\n                      .getUserPermissions(selectedRole)\n                      .slice(0, 5)\n                      .map(permission => (\n                        <div key={permission} className='flex items-center space-x-2'>\n                          <CheckCircleIcon className='w-4 h-4 text-green-600' />\n                          <span className='text-xs text-gray-600'>\n                            {permission.replace(/_/g, ' ')}\n                          </span>\n                        </div>\n                      ))}\n                    {securityService.getUserPermissions(selectedRole).length > 5 && (\n                      <div className='text-xs text-gray-500'>\n                        +{securityService.getUserPermissions(selectedRole).length - 5} more\n                        permissions\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className='flex space-x-3 pt-4'>\n                  <button\n                    onClick={handleRoleChange}\n                    disabled={loading || selectedRole === selectedUser.role}\n                    className='flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed'\n                  >\n                    {loading ? t('common.saving', 'Saving...') : t('common.save', 'Save')}\n                  </button>\n                  <button\n                    onClick={() => setShowRoleModal(false)}\n                    className='flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400'\n                  >\n                    {t('common.cancel', 'Cancel')}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\settings\\UserRoleManager.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'session' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":16,"column":6,"nodeType":"ArrayExpression","endLine":16,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData]","fix":{"range":[569,571],"text":"[fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '@lib/supabaseClient';\nimport { useClerkBypass as useClerk } from '@hooks/useClerkBypass';\n\nconst UserRoleManager = ({ showNotification }) => {\n  const { t } = useTranslation('settings');\n  const [users, setUsers] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const { session } = useClerk();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      // This is a placeholder for fetching users.\n      // In a real app, you would fetch users from your backend/Clerk.\n      const { data: usersData, error: usersError } = await supabase\n        .from('profiles')\n        .select('id, full_name, email');\n      if (usersError) throw usersError;\n\n      const { data: rolesData, error: rolesError } = await supabase.from('roles').select('*');\n      if (rolesError) throw rolesError;\n      setRoles(rolesData);\n\n      // Fetch user_roles and map them to users\n      const { data: userRolesData, error: userRolesError } = await supabase\n        .from('user_roles')\n        .select('*');\n      if (userRolesError) throw userRolesError;\n\n      const usersWithRoles = usersData.map(user => {\n        const userRole = userRolesData.find(ur => ur.user_id === user.id);\n        return { ...user, role_id: userRole ? userRole.role_id : null };\n      });\n\n      setUsers(usersWithRoles);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      showNotification(t('userRoleManager.alerts.loadError'), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRoleChange = async (userId, newRoleId) => {\n    setSaving(true);\n    try {\n      // Upsert user role\n      const { error } = await supabase\n        .from('user_roles')\n        .upsert({ user_id: userId, role_id: newRoleId }, { onConflict: 'user_id' });\n      if (error) throw error;\n\n      // Update local state\n      setUsers(users.map(u => (u.id === userId ? { ...u, role_id: newRoleId } : u)));\n      showNotification(t('userRoleManager.alerts.updateSuccess'), 'success');\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      showNotification(t('userRoleManager.alerts.updateFailure'), 'error');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className='flex justify-center items-center p-8'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-8'>\n      <div>\n        <h2 className='text-2xl font-bold text-gray-900'>{t('userRoleManager.title')}</h2>\n        <p className='mt-1 text-sm text-gray-600'>{t('userRoleManager.description')}</p>\n      </div>\n\n      <div className='bg-white border border-gray-200 rounded-lg overflow-hidden'>\n        <table className='min-w-full divide-y divide-gray-200'>\n          <thead className='bg-gray-50'>\n            <tr>\n              <th\n                scope='col'\n                className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'\n              >\n                {t('userRoleManager.table.user')}\n              </th>\n              <th\n                scope='col'\n                className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'\n              >\n                {t('userRoleManager.table.role')}\n              </th>\n            </tr>\n          </thead>\n          <tbody className='bg-white divide-y divide-gray-200'>\n            {users.map(user => (\n              <tr key={user.id}>\n                <td className='px-6 py-4 whitespace-nowrap'>\n                  <div className='text-sm font-medium text-gray-900'>{user.full_name}</div>\n                  <div className='text-sm text-gray-500'>{user.email}</div>\n                </td>\n                <td className='px-6 py-4 whitespace-nowrap'>\n                  <select\n                    value={user.role_id || ''}\n                    onChange={e => handleRoleChange(user.id, e.target.value)}\n                    disabled={saving}\n                    className='mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md'\n                  >\n                    <option value=''>{t('userRoleManager.noRole')}</option>\n                    {roles.map(role => (\n                      <option key={role.id} value={role.id}>\n                        {role.name}\n                      </option>\n                    ))}\n                  </select>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default UserRoleManager;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\ConfirmationModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\FloatingMicrophone.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'executeVoiceCommand'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [executeVoiceCommand]","fix":{"range":[1632,1634],"text":"[executeVoiceCommand]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":51,"endColumn":16,"suggestions":[{"fix":{"range":[1713,1761],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":179,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6651,6659],"text":"Heard: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6651,6659],"text":"Heard: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6651,6659],"text":"Heard: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6651,6659],"text":"Heard: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":179,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6671,6672],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6671,6672],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6671,6672],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6671,6672],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":190,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7210,7229],"text":"ÔÇó &quot;Go to dashboard\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7210,7229],"text":"ÔÇó &ldquo;Go to dashboard\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7210,7229],"text":"ÔÇó &#34;Go to dashboard\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7210,7229],"text":"ÔÇó &rdquo;Go to dashboard\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":190,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7210,7229],"text":"ÔÇó \"Go to dashboard&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7210,7229],"text":"ÔÇó \"Go to dashboard&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7210,7229],"text":"ÔÇó \"Go to dashboard&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7210,7229],"text":"ÔÇó \"Go to dashboard&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":191,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7253,7269],"text":"ÔÇó &quot;Open clients\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7253,7269],"text":"ÔÇó &ldquo;Open clients\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7253,7269],"text":"ÔÇó &#34;Open clients\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7253,7269],"text":"ÔÇó &rdquo;Open clients\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":191,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7253,7269],"text":"ÔÇó \"Open clients&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7253,7269],"text":"ÔÇó \"Open clients&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7253,7269],"text":"ÔÇó \"Open clients&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7253,7269],"text":"ÔÇó \"Open clients&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7293,7315],"text":"ÔÇó &quot;Create new invoice\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7293,7315],"text":"ÔÇó &ldquo;Create new invoice\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7293,7315],"text":"ÔÇó &#34;Create new invoice\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7293,7315],"text":"ÔÇó &rdquo;Create new invoice\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7293,7315],"text":"ÔÇó \"Create new invoice&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7293,7315],"text":"ÔÇó \"Create new invoice&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7293,7315],"text":"ÔÇó \"Create new invoice&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7293,7315],"text":"ÔÇó \"Create new invoice&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":193,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7339,7357],"text":"ÔÇó &quot;Show analytics\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7339,7357],"text":"ÔÇó &ldquo;Show analytics\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7339,7357],"text":"ÔÇó &#34;Show analytics\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7339,7357],"text":"ÔÇó &rdquo;Show analytics\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":193,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7339,7357],"text":"ÔÇó \"Show analytics&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7339,7357],"text":"ÔÇó \"Show analytics&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7339,7357],"text":"ÔÇó \"Show analytics&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7339,7357],"text":"ÔÇó \"Show analytics&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":194,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7381,7398],"text":"ÔÇó &quot;Open settings\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7381,7398],"text":"ÔÇó &ldquo;Open settings\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7381,7398],"text":"ÔÇó &#34;Open settings\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7381,7398],"text":"ÔÇó &rdquo;Open settings\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":194,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7381,7398],"text":"ÔÇó \"Open settings&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7381,7398],"text":"ÔÇó \"Open settings&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7381,7398],"text":"ÔÇó \"Open settings&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7381,7398],"text":"ÔÇó \"Open settings&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":195,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7422,7430],"text":"ÔÇó &quot;Help\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7422,7430],"text":"ÔÇó &ldquo;Help\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7422,7430],"text":"ÔÇó &#34;Help\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7422,7430],"text":"ÔÇó &rdquo;Help\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":195,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7422,7430],"text":"ÔÇó \"Help&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7422,7430],"text":"ÔÇó \"Help&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7422,7430],"text":"ÔÇó \"Help&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7422,7430],"text":"ÔÇó \"Help&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { MicrophoneIcon } from '@heroicons/react/24/outline';\nimport { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\n\nconst FloatingMicrophone = () => {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n  const navigate = useNavigate();\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const speechRecognition = new SpeechRecognition();\n\n      speechRecognition.continuous = false;\n      speechRecognition.interimResults = false;\n      speechRecognition.lang = 'en-US';\n\n      speechRecognition.onstart = () => {\n        setIsListening(true);\n        toast.success('Voice recognition started - speak now!');\n      };\n\n      speechRecognition.onresult = event => {\n        const command = event.results[0][0].transcript.toLowerCase();\n        setTranscript(command);\n        executeVoiceCommand(command);\n      };\n\n      speechRecognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n        toast.error('Voice recognition error. Please try again.');\n      };\n\n      speechRecognition.onend = () => {\n        setIsListening(false);\n      };\n\n      setRecognition(speechRecognition);\n    } else {\n      console.warn('Speech recognition not supported in this browser');\n    }\n  }, []);\n\n  // Execute voice commands\n  const executeVoiceCommand = command => {\n    console.log('Voice command received:', command);\n\n    // Navigation commands\n    if (command.includes('dashboard') || command.includes('home')) {\n      navigate('/dashboard');\n      toast.success('Navigating to Dashboard');\n    } else if (command.includes('client') && !command.includes('new')) {\n      navigate('/clients');\n      toast.success('Navigating to Clients');\n    } else if (command.includes('invoice')) {\n      navigate('/invoices');\n      toast.success('Navigating to Invoices');\n    } else if (command.includes('quote')) {\n      navigate('/quotes');\n      toast.success('Navigating to Quotes');\n    } else if (command.includes('transaction')) {\n      navigate('/transactions');\n      toast.success('Navigating to Transactions');\n    } else if (command.includes('inventory')) {\n      navigate('/inventory');\n      toast.success('Navigating to Inventory');\n    } else if (command.includes('analytics')) {\n      navigate('/analytics');\n      toast.success('Navigating to Analytics');\n    } else if (command.includes('report')) {\n      navigate('/reports');\n      toast.success('Navigating to Reports');\n    } else if (command.includes('calendar')) {\n      navigate('/calendar');\n      toast.success('Navigating to Calendar');\n    } else if (command.includes('document')) {\n      navigate('/documents');\n      toast.success('Navigating to Documents');\n    } else if (command.includes('email')) {\n      navigate('/email');\n      toast.success('Navigating to Email');\n    } else if (command.includes('scan')) {\n      navigate('/scan');\n      toast.success('Navigating to Scan');\n    } else if (command.includes('voice')) {\n      navigate('/voice');\n      toast.success('Navigating to Voice Commands');\n    } else if (command.includes('setting')) {\n      navigate('/settings');\n      toast.success('Navigating to Settings');\n    }\n\n    // Action commands\n    else if (command.includes('new client') || command.includes('add client')) {\n      navigate('/clients');\n      toast.success('Ready to add new client');\n      // Here you could trigger a modal or form\n    } else if (command.includes('new invoice') || command.includes('create invoice')) {\n      navigate('/invoices');\n      toast.success('Ready to create new invoice');\n      // Here you could trigger invoice creation\n    } else if (command.includes('new quote') || command.includes('create quote')) {\n      navigate('/quotes');\n      toast.success('Ready to create new quote');\n    } else if (command.includes('help')) {\n      navigate('/help');\n      toast.success('Opening Help Center');\n    } else if (command.includes('logout') || command.includes('log out')) {\n      toast.success('Logging out...');\n      // Here you would implement logout functionality\n    } else if (command.includes('dark mode')) {\n      toast.success('Dark mode toggle requested');\n      // Here you would toggle dark mode\n    }\n\n    // Fallback for unrecognized commands\n    else {\n      toast.error(`Command \"${command}\" not recognized. Try \"go to dashboard\" or \"create invoice\"`);\n    }\n  };\n\n  // Handle voice activation\n  const handleActivateVoice = () => {\n    if (!recognition) {\n      toast.error('Voice recognition not supported in this browser');\n      return;\n    }\n\n    if (isListening) {\n      // Stop listening\n      recognition.stop();\n      setIsListening(false);\n      toast.info('Voice recognition stopped');\n    } else {\n      // Start listening\n      setTranscript('');\n      recognition.start();\n    }\n  };\n\n  return (\n    <>\n      <div className='fixed bottom-6 right-6 z-50'>\n        <button\n          onClick={handleActivateVoice}\n          className={`w-14 h-14 rounded-full shadow-lg flex items-center justify-center transition-all duration-300 hover:scale-110 ${\n            isListening\n              ? 'bg-red-500 hover:bg-red-600 animate-pulse'\n              : 'bg-blue-500 hover:bg-blue-600'\n          }`}\n          title={\n            isListening\n              ? 'Stop Listening - Click to stop voice recognition'\n              : 'Start Voice Command - Click to speak'\n          }\n        >\n          <MicrophoneIcon className='w-6 h-6 text-white' />\n        </button>\n\n        {/* Voice Status Indicator */}\n        {isListening && (\n          <div className='absolute -top-12 right-0 bg-gray-900 text-white px-3 py-1 rounded-lg text-xs whitespace-nowrap'>\n            <div className='flex items-center gap-1'>\n              <div className='w-2 h-2 bg-red-400 rounded-full animate-pulse'></div>\n              Listening...\n            </div>\n            <div className='absolute top-full right-3 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900'></div>\n          </div>\n        )}\n\n        {/* Transcript Display (for debugging) */}\n        {transcript && (\n          <div className='absolute -top-20 right-0 bg-blue-900 text-white px-3 py-1 rounded-lg text-xs whitespace-nowrap max-w-xs'>\n            <div className='text-blue-200'>Heard: \"{transcript}\"</div>\n            <div className='absolute top-full right-3 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-blue-900'></div>\n          </div>\n        )}\n      </div>\n\n      {/* Voice Commands Help Overlay */}\n      {isListening && (\n        <div className='fixed bottom-24 right-6 bg-white border border-gray-200 rounded-lg shadow-lg p-4 z-40 max-w-sm'>\n          <h4 className='font-medium text-gray-900 mb-2 text-sm'>Say a command:</h4>\n          <div className='text-xs text-gray-600 space-y-1'>\n            <div>ÔÇó \"Go to dashboard\"</div>\n            <div>ÔÇó \"Open clients\"</div>\n            <div>ÔÇó \"Create new invoice\"</div>\n            <div>ÔÇó \"Show analytics\"</div>\n            <div>ÔÇó \"Open settings\"</div>\n            <div>ÔÇó \"Help\"</div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FloatingMicrophone;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\Footer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\Modal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\StatCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\TestRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\shared\\ViewModeToggle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\ui\\Button.jsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ButtonText' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@utils/cn';\nimport { ButtonText } from './Typography';\n\nexport const Button = ({\n  variant = 'primary',\n  size = 'default',\n  className,\n  children,\n  disabled = false,\n  loading = false,\n  icon: Icon,\n  iconPosition = 'left',\n  ...props\n}) => {\n  const baseStyles =\n    'inline-flex items-center justify-center rounded-lg font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';\n\n  const variants = {\n    primary:\n      'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 shadow-sm hover:shadow-md',\n    secondary:\n      'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-blue-500 shadow-sm hover:shadow-md',\n    outline:\n      'bg-transparent text-blue-600 border border-blue-600 hover:bg-blue-50 focus:ring-blue-500',\n    ghost: 'bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-500',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 shadow-sm hover:shadow-md',\n    success:\n      'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 shadow-sm hover:shadow-md',\n  };\n\n  const sizes = {\n    sm: 'px-3 py-2 text-button gap-2',\n    default: 'px-4 py-2.5 text-button gap-2',\n    lg: 'px-6 py-3 text-button-large gap-3',\n  };\n\n  const iconSizes = {\n    sm: 'w-4 h-4',\n    default: 'w-5 h-5',\n    lg: 'w-5 h-5',\n  };\n\n  const LoadingSpinner = () => (\n    <svg className={cn('animate-spin', iconSizes[size])} fill='none' viewBox='0 0 24 24'>\n      <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4' />\n      <path\n        className='opacity-75'\n        fill='currentColor'\n        d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'\n      />\n    </svg>\n  );\n\n  return (\n    <button\n      className={cn(baseStyles, variants[variant], sizes[size], className)}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading && <LoadingSpinner />}\n      {!loading && Icon && iconPosition === 'left' && <Icon className={iconSizes[size]} />}\n      {children}\n      {!loading && Icon && iconPosition === 'right' && <Icon className={iconSizes[size]} />}\n    </button>\n  );\n};\n\n// Icon button variant\nexport const IconButton = ({\n  variant = 'ghost',\n  size = 'default',\n  className,\n  icon: Icon,\n  ...props\n}) => {\n  const baseStyles =\n    'inline-flex items-center justify-center rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';\n\n  const variants = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n    secondary: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-blue-500',\n    ghost: 'bg-transparent text-gray-500 hover:bg-gray-100 hover:text-gray-700 focus:ring-gray-500',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n  };\n\n  const sizes = {\n    sm: 'p-1.5',\n    default: 'p-2',\n    lg: 'p-3',\n  };\n\n  const iconSizes = {\n    sm: 'w-4 h-4',\n    default: 'w-5 h-5',\n    lg: 'w-6 h-6',\n  };\n\n  return (\n    <button className={cn(baseStyles, variants[variant], sizes[size], className)} {...props}>\n      {Icon && <Icon className={iconSizes[size]} />}\n    </button>\n  );\n};\n\nexport default Button;\n","usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\ui\\Card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\ui\\Input.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\ui\\Spacing.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\ui\\Typography.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\AlexVenturesStudio\\Nexa_Manager_whit_Task_Master\\web-app\\src\\components\\ui\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
