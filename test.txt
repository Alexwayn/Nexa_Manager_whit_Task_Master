You're facing a large number of failing Jest tests, and the error log shows several recurring root causes. Instead of trying to fix all at once, we can systematically address them one by one, starting with the most critical and widespread issues.

Here‚Äôs a step-by-step guide to triage and fix your test failures in order of priority:

üî¥ Step 1: Fix import.meta Syntax Errors (High Priority)
‚ùå Error:


1
SyntaxError: Cannot use 'import.meta' outside a module
Found in:

src/utils/env.js
src/__tests__/config/testResultsProcessor.js
src/shared/components/ErrorBoundary.jsx
üìå Cause:
Jest doesn't natively support ES Modules (import.meta) by default. Your code uses import.meta.env, which is common in Vite or modern JS setups, but Jest runs in a CommonJS context unless configured otherwise.

‚úÖ Solution: Enable ESM Support in Jest
Update jest.config.cjs to support ESM:
js


1
2
3
4
5
6
7
8
9
10
11
12
‚åÑ
‚åÑ
‚åÑ
// jest.config.cjs
module.exports = {
  transform: {},
  extensionsToTreatAsEsm: ['.ts', '.tsx', '.js', '.jsx'],
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1', // Handle .js imports as ESM
  },
  transformIgnorePatterns: [
    'node_modules/(?!.*\\.mjs$)',
  ],
  testEnvironment: 'node',
};
Use babel-jest with ESM support (recommended):
Install Babel if not already:
bash


1
npm install --save-dev babel-jest @babel/core @babel/preset-env
Create .babelrc:
json


1
2
3
4
5
6
7
8
9
10
‚åÑ
‚åÑ
‚åÑ
‚åÑ
{
  "presets": [
    ["@babel/preset-env", {
      "targets": {
        "node": "current"
      },
      "modules": false
    }]
  ]
}
Update jest.config.cjs:
js


1
2
3
‚åÑ
transform: {
  '^.+\\.[tj]sx?$': 'babel-jest',
},
Mock import.meta in tests (temporary workaround):
Add to your test setup file (setupTests.js or similar):
js


1
2
3
4
5
6
7
8
‚åÑ
‚åÑ
Object.defineProperty(global, 'importMeta', {
  value: { env: process.env },
});

// Or mock directly in failing test files
jest.spyOn(global, 'import').mockImplementation(() => ({
  meta: { env: process.env },
}));
But better: use jest.mock() for modules using import.meta.
Alternative: Replace import.meta.env with process.env in test environment
In src/utils/env.js, wrap usage:
js


1
2
3
const isDev = typeof import.meta !== 'undefined' && import.meta.env?.DEV
  ? import.meta.env.DEV
  : process.env.NODE_ENV === 'development';
üî¥ Step 2: Fix "Only one default export allowed" (Critical)
‚ùå Error:


1
SyntaxError: Only one default export allowed per module
In:

src/features/email/services/emailManagementService.js
üìå Cause:
You likely have multiple export default statements in the same file.

Look at this line:

js


1
export default getEmailManagementService;
Check if there's another export default class/function earlier in the file.

‚úÖ Fix:
Open emailManagementService.js
Search for export default
Ensure only one exists.
If you have both:
js


1
2
export default class EmailManagementService { ... }
export default getEmailManagementService;
‚Üí This is invalid.
‚úÖ Fix: Remove one. Probably keep the class, and export the instance like:
js


1
2
const emailService = new EmailManagementService();
export default emailService;
Or rename the function export:
js


1
2
export { getEmailManagementService };
export default EmailManagementService;
Update imports accordingly:
js


1
2
3
import EmailManagementService from '...'; // default
// or
import { getEmailManagementService } from '...';
üî¥ Step 3: Fix jest.mock() referencing React (Common in JSX tests)
‚ùå Error:


1
The module factory of `jest.mock()` is not allowed to reference any out-of-scope variables. Invalid variable access: React
In:

VoiceFeedbackButton.final-test.jsx
FloatingMicrophone.real-libs-fixed.test.jsx
üìå Cause:
You're using React.createElement inside jest.mock() factory, but React is not available in the mock scope.

‚úÖ Fix: Use jest.requireActual() or avoid referencing React
Replace:

js


1
2
3
‚åÑ
jest.mock('@heroicons/react/24/outline', () => ({
  HandThumbUpIcon: () => React.createElement('svg', ...),
}));
With:

js


1
2
3
4
5
6
7
‚åÑ
‚åÑ
jest.mock('@heroicons/react/24/outline', () => {
  const React = jest.requireActual('react');
  return {
    HandThumbUpIcon: (props) => React.createElement('svg', { 'data-testid': 'feedback-icon' }, 'thumbs-up'),
    // ... others
  };
});
‚úÖ This safely imports React inside the mock.

Alternatively, use simple strings or DOM elements:

js


1
HandThumbUpIcon: () => '.HandThumbUpIcon.',
üî¥ Step 4: Fix Module Mapping Issues
‚ùå Error:


1
Could not locate module @shared/__tests__/performance.config.js
üìå Cause:
moduleNameMapper in jest.config.cjs has incorrect path syntax (Windows backslashes).

You likely have:

js


1
"/^@shared\/(.*)$/": "E:\...\src\shared\$1"
But backslashes break the regex/string.

‚úÖ Fix:
Use forward slashes or path:

js


1
2
3
4
5
6
7
‚åÑ
‚åÑ
const path = require('path');

module.exports = {
  moduleNameMapper: {
    '^@shared/(.*)$': path.resolve(__dirname, 'src/shared/$1'),
  },
};
Also ensure the file performance.config.js actually exists.

üî¥ Step 5: Fix "No tests found" in empty test files
‚ùå Error:


1
Your test suite must contain at least one test.
In:

globalMocks.js
testConfig.js
global-setup.js
voiceTestRunner.js
‚úÖ Fix:
Either:

Add a test:
js


1
2
3
‚åÑ
test('should pass', () => {
  expect(true).toBe(true);
});
Or rename or exclude these files from test runs if they are setup files.
Better: Move setup/teardown logic to setupTests.js and globalSetup.js (Jest special files), and exclude them from test discovery via:

js


1
2
3
4
5
‚åÑ
// jest.config.cjs
testMatch: [
  '**/__tests__/**/*.[jt]s?(x)',
  '**/?(*.)+(spec|test).[jt]s?(x)',
],
And name setup files like setupTests.js, not *.test.js.

üî¥ Step 6: Fix "Cannot access 'mockIncomeService' before initialization"
‚ùå Error:
js


1
2
3
4
‚åÑ
jest.mock('../../features/financial/services/incomeService', () => ({
  default: mockIncomeService,
}));
const mockIncomeService = jest.fn();
üìå Cause:
You're using mockIncomeService before it's declared.

‚úÖ Fix:
Move the const mockIncomeService above the jest.mock.

But: jest.mock() is hoisted. So you must declare the mock first.

js


1
2
3
4
5
6
‚åÑ
const mockIncomeService = jest.fn();

jest.mock('../../features/financial/services/incomeService', () => ({
  __esModule: true,
  default: mockIncomeService,
}));
‚úÖ This ensures the variable is initialized before the mock uses it.

‚úÖ Recommended Workflow: Fix One by One
1Ô∏è‚É£
Fix
import.meta
issue globally
env.js
,
ErrorBoundary.jsx
, test files
2Ô∏è‚É£
Fix duplicate
export default
emailManagementService.js
3Ô∏è‚É£
Fix
jest.mock()
using
React
VoiceFeedbackButton.*
,
FloatingMicrophone.*
4Ô∏è‚É£
Fix module path mapping
reports.accessibility.test.js
5Ô∏è‚É£
Add
test()
or rename empty test files
globalMocks.js
,
testConfig.js
, etc.
6Ô∏è‚É£
Fix mock variable order
debug-financial.test.js

‚úÖ Pro Tips
Run tests in watch mode:
bash


1
npx jest --watch
Fix one file at a time.
Isolate a single failing test:
bash


1
npx jest env.test.js
Use --detectOpenHandles to debug hanging tests:
bash


1
npx jest --detectOpenHandles
Update package.json scripts:
json


1
2
3
4
5
‚åÑ
"scripts": {
  "test": "jest",
  "test:watch": "jest --watch",
  "test:debug": "jest --verbose --detectOpenHandles"
}
‚úÖ Summary: Immediate Actions
‚úÖ Update jest.config.cjs for ESM / import.meta
‚úÖ Fix emailManagementService.js ‚Äî only one export default
‚úÖ Move mockIncomeService declaration above jest.mock
‚úÖ Fix jest.mock() by using jest.requireActual('react')
‚úÖ Fix moduleNameMapper paths with path.resolve
‚úÖ Add dummy tests or rename empty test files
Once these are fixed, many failures will disappear at once.

Let me know if you want help editing a specific file (e.g., jest.config.cjs or emailManagementService.js).